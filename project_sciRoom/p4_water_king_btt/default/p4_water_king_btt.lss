
p4_water_king_btt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000369c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a6  00800060  0000369c  00003730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800206  00800206  000038d6  2**0
                  ALLOC
  3 .stab         000031ec  00000000  00000000  000038d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008f9  00000000  00000000  00006ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000073bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000496  00000000  00000000  0000741d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000011b6  00000000  00000000  000078b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000305  00000000  00000000  00008a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d0f  00000000  00000000  00008d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000490  00000000  00000000  0000aa80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004db  00000000  00000000  0000af10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000622  00000000  00000000  0000b3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000042  00000000  00000000  0000ba0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  0000ba4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_4>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__vector_8>
      24:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_11>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <sound_c+0x20>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <out_c>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <in_a+0x4a>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <sleep+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	12 e0       	ldi	r17, 0x02	; 2
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ec e9       	ldi	r30, 0x9C	; 156
     162:	f6 e3       	ldi	r31, 0x36	; 54
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a6 30       	cpi	r26, 0x06	; 6
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	12 e0       	ldi	r17, 0x02	; 2
     172:	a6 e0       	ldi	r26, 0x06	; 6
     174:	b2 e0       	ldi	r27, 0x02	; 2
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a8 31       	cpi	r26, 0x18	; 24
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <main>
     184:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <sleep>:
#ifndef _SLEEP_H_
#define _SLEEP_H_

void sleep(unsigned int ms)
{
     18c:	df 93       	push	r29
     18e:	cf 93       	push	r28
     190:	00 d0       	rcall	.+0      	; 0x192 <sleep+0x6>
     192:	00 d0       	rcall	.+0      	; 0x194 <sleep+0x8>
     194:	00 d0       	rcall	.+0      	; 0x196 <sleep+0xa>
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	9e 83       	std	Y+6, r25	; 0x06
     19c:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i,j;
	for(i=0;i<ms;i++)
     19e:	1a 82       	std	Y+2, r1	; 0x02
     1a0:	19 82       	std	Y+1, r1	; 0x01
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <sleep+0x3e>
		for(j=0;j<795;j++);
     1a4:	1c 82       	std	Y+4, r1	; 0x04
     1a6:	1b 82       	std	Y+3, r1	; 0x03
     1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <sleep+0x28>
     1aa:	8b 81       	ldd	r24, Y+3	; 0x03
     1ac:	9c 81       	ldd	r25, Y+4	; 0x04
     1ae:	01 96       	adiw	r24, 0x01	; 1
     1b0:	9c 83       	std	Y+4, r25	; 0x04
     1b2:	8b 83       	std	Y+3, r24	; 0x03
     1b4:	8b 81       	ldd	r24, Y+3	; 0x03
     1b6:	9c 81       	ldd	r25, Y+4	; 0x04
     1b8:	23 e0       	ldi	r18, 0x03	; 3
     1ba:	8b 31       	cpi	r24, 0x1B	; 27
     1bc:	92 07       	cpc	r25, r18
     1be:	a8 f3       	brcs	.-22     	; 0x1aa <sleep+0x1e>
#define _SLEEP_H_

void sleep(unsigned int ms)
{
	unsigned int i,j;
	for(i=0;i<ms;i++)
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	9a 81       	ldd	r25, Y+2	; 0x02
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	9a 83       	std	Y+2, r25	; 0x02
     1c8:	89 83       	std	Y+1, r24	; 0x01
     1ca:	29 81       	ldd	r18, Y+1	; 0x01
     1cc:	3a 81       	ldd	r19, Y+2	; 0x02
     1ce:	8d 81       	ldd	r24, Y+5	; 0x05
     1d0:	9e 81       	ldd	r25, Y+6	; 0x06
     1d2:	28 17       	cp	r18, r24
     1d4:	39 07       	cpc	r19, r25
     1d6:	30 f3       	brcs	.-52     	; 0x1a4 <sleep+0x18>
		for(j=0;j<795;j++);
}
     1d8:	26 96       	adiw	r28, 0x06	; 6
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	cf 91       	pop	r28
     1e6:	df 91       	pop	r29
     1e8:	08 95       	ret

000001ea <toggle_a>:
#define clear_c(x)   	DDRC |= _BV(x);	PORTC &= ~_BV(x);		
#define set_d(x)  		DDRD |= _BV(x);	PORTD |= _BV(x)		
#define clear_d(x)   	DDRD |= _BV(x);	PORTD &= ~_BV(x);		

void toggle_a(char x)
{
     1ea:	df 93       	push	r29
     1ec:	cf 93       	push	r28
     1ee:	0f 92       	push	r0
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	89 83       	std	Y+1, r24	; 0x01
	DDRA |= _BV(x); 
     1f6:	8a e3       	ldi	r24, 0x3A	; 58
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	2a e3       	ldi	r18, 0x3A	; 58
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	f9 01       	movw	r30, r18
     200:	20 81       	ld	r18, Z
     202:	62 2f       	mov	r22, r18
     204:	29 81       	ldd	r18, Y+1	; 0x01
     206:	42 2f       	mov	r20, r18
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	21 e0       	ldi	r18, 0x01	; 1
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	02 c0       	rjmp	.+4      	; 0x214 <toggle_a+0x2a>
     210:	22 0f       	add	r18, r18
     212:	33 1f       	adc	r19, r19
     214:	4a 95       	dec	r20
     216:	e2 f7       	brpl	.-8      	; 0x210 <toggle_a+0x26>
     218:	26 2b       	or	r18, r22
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18
	PORTA ^= _BV(x);
     21e:	8b e3       	ldi	r24, 0x3B	; 59
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	2b e3       	ldi	r18, 0x3B	; 59
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	f9 01       	movw	r30, r18
     228:	20 81       	ld	r18, Z
     22a:	62 2f       	mov	r22, r18
     22c:	29 81       	ldd	r18, Y+1	; 0x01
     22e:	42 2f       	mov	r20, r18
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	21 e0       	ldi	r18, 0x01	; 1
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	04 2e       	mov	r0, r20
     238:	02 c0       	rjmp	.+4      	; 0x23e <toggle_a+0x54>
     23a:	22 0f       	add	r18, r18
     23c:	33 1f       	adc	r19, r19
     23e:	0a 94       	dec	r0
     240:	e2 f7       	brpl	.-8      	; 0x23a <toggle_a+0x50>
     242:	26 27       	eor	r18, r22
     244:	fc 01       	movw	r30, r24
     246:	20 83       	st	Z, r18
}
     248:	0f 90       	pop	r0
     24a:	cf 91       	pop	r28
     24c:	df 91       	pop	r29
     24e:	08 95       	ret

00000250 <toggle_b>:
void toggle_b(char x)
{
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	0f 92       	push	r0
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	89 83       	std	Y+1, r24	; 0x01
	DDRB |= _BV(x); 
     25c:	87 e3       	ldi	r24, 0x37	; 55
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	27 e3       	ldi	r18, 0x37	; 55
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	f9 01       	movw	r30, r18
     266:	20 81       	ld	r18, Z
     268:	62 2f       	mov	r22, r18
     26a:	29 81       	ldd	r18, Y+1	; 0x01
     26c:	42 2f       	mov	r20, r18
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	21 e0       	ldi	r18, 0x01	; 1
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	02 c0       	rjmp	.+4      	; 0x27a <toggle_b+0x2a>
     276:	22 0f       	add	r18, r18
     278:	33 1f       	adc	r19, r19
     27a:	4a 95       	dec	r20
     27c:	e2 f7       	brpl	.-8      	; 0x276 <toggle_b+0x26>
     27e:	26 2b       	or	r18, r22
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
	PORTB ^= _BV(x);
     284:	88 e3       	ldi	r24, 0x38	; 56
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	28 e3       	ldi	r18, 0x38	; 56
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	f9 01       	movw	r30, r18
     28e:	20 81       	ld	r18, Z
     290:	62 2f       	mov	r22, r18
     292:	29 81       	ldd	r18, Y+1	; 0x01
     294:	42 2f       	mov	r20, r18
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	04 2e       	mov	r0, r20
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <toggle_b+0x54>
     2a0:	22 0f       	add	r18, r18
     2a2:	33 1f       	adc	r19, r19
     2a4:	0a 94       	dec	r0
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <toggle_b+0x50>
     2a8:	26 27       	eor	r18, r22
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
}
     2ae:	0f 90       	pop	r0
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <toggle_c>:
void toggle_c(char x)
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	0f 92       	push	r0
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	89 83       	std	Y+1, r24	; 0x01
	DDRC |= _BV(x); 
     2c2:	84 e3       	ldi	r24, 0x34	; 52
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	24 e3       	ldi	r18, 0x34	; 52
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	f9 01       	movw	r30, r18
     2cc:	20 81       	ld	r18, Z
     2ce:	62 2f       	mov	r22, r18
     2d0:	29 81       	ldd	r18, Y+1	; 0x01
     2d2:	42 2f       	mov	r20, r18
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	21 e0       	ldi	r18, 0x01	; 1
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <toggle_c+0x2a>
     2dc:	22 0f       	add	r18, r18
     2de:	33 1f       	adc	r19, r19
     2e0:	4a 95       	dec	r20
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <toggle_c+0x26>
     2e4:	26 2b       	or	r18, r22
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
	PORTC ^= _BV(x);
     2ea:	85 e3       	ldi	r24, 0x35	; 53
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	25 e3       	ldi	r18, 0x35	; 53
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	f9 01       	movw	r30, r18
     2f4:	20 81       	ld	r18, Z
     2f6:	62 2f       	mov	r22, r18
     2f8:	29 81       	ldd	r18, Y+1	; 0x01
     2fa:	42 2f       	mov	r20, r18
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	04 2e       	mov	r0, r20
     304:	02 c0       	rjmp	.+4      	; 0x30a <toggle_c+0x54>
     306:	22 0f       	add	r18, r18
     308:	33 1f       	adc	r19, r19
     30a:	0a 94       	dec	r0
     30c:	e2 f7       	brpl	.-8      	; 0x306 <toggle_c+0x50>
     30e:	26 27       	eor	r18, r22
     310:	fc 01       	movw	r30, r24
     312:	20 83       	st	Z, r18
}
     314:	0f 90       	pop	r0
     316:	cf 91       	pop	r28
     318:	df 91       	pop	r29
     31a:	08 95       	ret

0000031c <toggle_d>:
void toggle_d(char x)
{
     31c:	df 93       	push	r29
     31e:	cf 93       	push	r28
     320:	0f 92       	push	r0
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	89 83       	std	Y+1, r24	; 0x01
	DDRD |= _BV(x); 
     328:	81 e3       	ldi	r24, 0x31	; 49
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	21 e3       	ldi	r18, 0x31	; 49
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	f9 01       	movw	r30, r18
     332:	20 81       	ld	r18, Z
     334:	62 2f       	mov	r22, r18
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	42 2f       	mov	r20, r18
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	21 e0       	ldi	r18, 0x01	; 1
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	02 c0       	rjmp	.+4      	; 0x346 <toggle_d+0x2a>
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	4a 95       	dec	r20
     348:	e2 f7       	brpl	.-8      	; 0x342 <toggle_d+0x26>
     34a:	26 2b       	or	r18, r22
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
	PORTD ^= _BV(x);
     350:	82 e3       	ldi	r24, 0x32	; 50
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	22 e3       	ldi	r18, 0x32	; 50
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	f9 01       	movw	r30, r18
     35a:	20 81       	ld	r18, Z
     35c:	62 2f       	mov	r22, r18
     35e:	29 81       	ldd	r18, Y+1	; 0x01
     360:	42 2f       	mov	r20, r18
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	04 2e       	mov	r0, r20
     36a:	02 c0       	rjmp	.+4      	; 0x370 <toggle_d+0x54>
     36c:	22 0f       	add	r18, r18
     36e:	33 1f       	adc	r19, r19
     370:	0a 94       	dec	r0
     372:	e2 f7       	brpl	.-8      	; 0x36c <toggle_d+0x50>
     374:	26 27       	eor	r18, r22
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
}
     37a:	0f 90       	pop	r0
     37c:	cf 91       	pop	r28
     37e:	df 91       	pop	r29
     380:	08 95       	ret

00000382 <in_a>:
char in_a(char _bit)
{
     382:	df 93       	push	r29
     384:	cf 93       	push	r28
     386:	0f 92       	push	r0
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	89 83       	std	Y+1, r24	; 0x01
	DDRA &= ~(1<<_bit);
     38e:	8a e3       	ldi	r24, 0x3A	; 58
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	2a e3       	ldi	r18, 0x3A	; 58
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	f9 01       	movw	r30, r18
     398:	20 81       	ld	r18, Z
     39a:	62 2f       	mov	r22, r18
     39c:	29 81       	ldd	r18, Y+1	; 0x01
     39e:	42 2f       	mov	r20, r18
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	21 e0       	ldi	r18, 0x01	; 1
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <in_a+0x2a>
     3a8:	22 0f       	add	r18, r18
     3aa:	33 1f       	adc	r19, r19
     3ac:	4a 95       	dec	r20
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <in_a+0x26>
     3b0:	20 95       	com	r18
     3b2:	26 23       	and	r18, r22
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
	return((PINA & _BV(_bit))>>_bit);	
     3b8:	89 e3       	ldi	r24, 0x39	; 57
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	28 2f       	mov	r18, r24
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	48 2f       	mov	r20, r24
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	04 2e       	mov	r0, r20
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <in_a+0x54>
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <in_a+0x50>
     3da:	82 23       	and	r24, r18
     3dc:	93 23       	and	r25, r19
     3de:	29 81       	ldd	r18, Y+1	; 0x01
     3e0:	22 2f       	mov	r18, r18
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	02 2e       	mov	r0, r18
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <in_a+0x6a>
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	0a 94       	dec	r0
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <in_a+0x66>
}
     3f0:	0f 90       	pop	r0
     3f2:	cf 91       	pop	r28
     3f4:	df 91       	pop	r29
     3f6:	08 95       	ret

000003f8 <in_b>:
char in_b(char _bit)
{
     3f8:	df 93       	push	r29
     3fa:	cf 93       	push	r28
     3fc:	0f 92       	push	r0
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	89 83       	std	Y+1, r24	; 0x01
	DDRB &= ~(1<<_bit);
     404:	87 e3       	ldi	r24, 0x37	; 55
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	27 e3       	ldi	r18, 0x37	; 55
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	f9 01       	movw	r30, r18
     40e:	20 81       	ld	r18, Z
     410:	62 2f       	mov	r22, r18
     412:	29 81       	ldd	r18, Y+1	; 0x01
     414:	42 2f       	mov	r20, r18
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	21 e0       	ldi	r18, 0x01	; 1
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	02 c0       	rjmp	.+4      	; 0x422 <in_b+0x2a>
     41e:	22 0f       	add	r18, r18
     420:	33 1f       	adc	r19, r19
     422:	4a 95       	dec	r20
     424:	e2 f7       	brpl	.-8      	; 0x41e <in_b+0x26>
     426:	20 95       	com	r18
     428:	26 23       	and	r18, r22
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
	return((PINB & _BV(_bit))>>_bit);	
     42e:	86 e3       	ldi	r24, 0x36	; 54
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	fc 01       	movw	r30, r24
     434:	80 81       	ld	r24, Z
     436:	28 2f       	mov	r18, r24
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	48 2f       	mov	r20, r24
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	04 2e       	mov	r0, r20
     446:	02 c0       	rjmp	.+4      	; 0x44c <in_b+0x54>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	0a 94       	dec	r0
     44e:	e2 f7       	brpl	.-8      	; 0x448 <in_b+0x50>
     450:	82 23       	and	r24, r18
     452:	93 23       	and	r25, r19
     454:	29 81       	ldd	r18, Y+1	; 0x01
     456:	22 2f       	mov	r18, r18
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	02 2e       	mov	r0, r18
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__stack+0x3>
     45e:	95 95       	asr	r25
     460:	87 95       	ror	r24
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <in_b+0x66>
}
     466:	0f 90       	pop	r0
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	08 95       	ret

0000046e <in_c>:
char in_c(char _bit)
{
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	0f 92       	push	r0
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	89 83       	std	Y+1, r24	; 0x01
	DDRC &= ~(1<<_bit);
     47a:	84 e3       	ldi	r24, 0x34	; 52
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	24 e3       	ldi	r18, 0x34	; 52
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	62 2f       	mov	r22, r18
     488:	29 81       	ldd	r18, Y+1	; 0x01
     48a:	42 2f       	mov	r20, r18
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	21 e0       	ldi	r18, 0x01	; 1
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	02 c0       	rjmp	.+4      	; 0x498 <in_c+0x2a>
     494:	22 0f       	add	r18, r18
     496:	33 1f       	adc	r19, r19
     498:	4a 95       	dec	r20
     49a:	e2 f7       	brpl	.-8      	; 0x494 <in_c+0x26>
     49c:	20 95       	com	r18
     49e:	26 23       	and	r18, r22
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
	return((PINC & _BV(_bit))>>_bit);	
     4a4:	83 e3       	ldi	r24, 0x33	; 51
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	fc 01       	movw	r30, r24
     4aa:	80 81       	ld	r24, Z
     4ac:	28 2f       	mov	r18, r24
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	48 2f       	mov	r20, r24
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	04 2e       	mov	r0, r20
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <in_c+0x54>
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	0a 94       	dec	r0
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <in_c+0x50>
     4c6:	82 23       	and	r24, r18
     4c8:	93 23       	and	r25, r19
     4ca:	29 81       	ldd	r18, Y+1	; 0x01
     4cc:	22 2f       	mov	r18, r18
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	02 2e       	mov	r0, r18
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <in_c+0x6a>
     4d4:	95 95       	asr	r25
     4d6:	87 95       	ror	r24
     4d8:	0a 94       	dec	r0
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <in_c+0x66>
}
     4dc:	0f 90       	pop	r0
     4de:	cf 91       	pop	r28
     4e0:	df 91       	pop	r29
     4e2:	08 95       	ret

000004e4 <in_d>:
char in_d(char _bit)
{
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	0f 92       	push	r0
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= ~(1<<_bit);
     4f0:	81 e3       	ldi	r24, 0x31	; 49
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	21 e3       	ldi	r18, 0x31	; 49
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	f9 01       	movw	r30, r18
     4fa:	20 81       	ld	r18, Z
     4fc:	62 2f       	mov	r22, r18
     4fe:	29 81       	ldd	r18, Y+1	; 0x01
     500:	42 2f       	mov	r20, r18
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	02 c0       	rjmp	.+4      	; 0x50e <in_d+0x2a>
     50a:	22 0f       	add	r18, r18
     50c:	33 1f       	adc	r19, r19
     50e:	4a 95       	dec	r20
     510:	e2 f7       	brpl	.-8      	; 0x50a <in_d+0x26>
     512:	20 95       	com	r18
     514:	26 23       	and	r18, r22
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18
	return((PIND & _BV(_bit))>>_bit);	
     51a:	80 e3       	ldi	r24, 0x30	; 48
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	fc 01       	movw	r30, r24
     520:	80 81       	ld	r24, Z
     522:	28 2f       	mov	r18, r24
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	48 2f       	mov	r20, r24
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	04 2e       	mov	r0, r20
     532:	02 c0       	rjmp	.+4      	; 0x538 <in_d+0x54>
     534:	88 0f       	add	r24, r24
     536:	99 1f       	adc	r25, r25
     538:	0a 94       	dec	r0
     53a:	e2 f7       	brpl	.-8      	; 0x534 <in_d+0x50>
     53c:	82 23       	and	r24, r18
     53e:	93 23       	and	r25, r19
     540:	29 81       	ldd	r18, Y+1	; 0x01
     542:	22 2f       	mov	r18, r18
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	02 2e       	mov	r0, r18
     548:	02 c0       	rjmp	.+4      	; 0x54e <in_d+0x6a>
     54a:	95 95       	asr	r25
     54c:	87 95       	ror	r24
     54e:	0a 94       	dec	r0
     550:	e2 f7       	brpl	.-8      	; 0x54a <in_d+0x66>
}
     552:	0f 90       	pop	r0
     554:	cf 91       	pop	r28
     556:	df 91       	pop	r29
     558:	08 95       	ret

0000055a <out_a>:


void out_a(char _bit,char _dat)
{
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	00 d0       	rcall	.+0      	; 0x560 <out_a+0x6>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	6a 83       	std	Y+2, r22	; 0x02
	DDRA |= _BV(_bit);
     568:	8a e3       	ldi	r24, 0x3A	; 58
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	2a e3       	ldi	r18, 0x3A	; 58
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	f9 01       	movw	r30, r18
     572:	20 81       	ld	r18, Z
     574:	62 2f       	mov	r22, r18
     576:	29 81       	ldd	r18, Y+1	; 0x01
     578:	42 2f       	mov	r20, r18
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	04 2e       	mov	r0, r20
     582:	02 c0       	rjmp	.+4      	; 0x588 <out_a+0x2e>
     584:	22 0f       	add	r18, r18
     586:	33 1f       	adc	r19, r19
     588:	0a 94       	dec	r0
     58a:	e2 f7       	brpl	.-8      	; 0x584 <out_a+0x2a>
     58c:	26 2b       	or	r18, r22
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
	if(_dat)
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	88 23       	and	r24, r24
     596:	b1 f0       	breq	.+44     	; 0x5c4 <out_a+0x6a>
		PORTA |= _BV(_bit);
     598:	8b e3       	ldi	r24, 0x3B	; 59
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	2b e3       	ldi	r18, 0x3B	; 59
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	f9 01       	movw	r30, r18
     5a2:	20 81       	ld	r18, Z
     5a4:	62 2f       	mov	r22, r18
     5a6:	29 81       	ldd	r18, Y+1	; 0x01
     5a8:	42 2f       	mov	r20, r18
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	04 2e       	mov	r0, r20
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <out_a+0x5e>
     5b4:	22 0f       	add	r18, r18
     5b6:	33 1f       	adc	r19, r19
     5b8:	0a 94       	dec	r0
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <out_a+0x5a>
     5bc:	26 2b       	or	r18, r22
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
     5c2:	16 c0       	rjmp	.+44     	; 0x5f0 <out_a+0x96>
	else
		PORTA &= ~_BV(_bit);
     5c4:	8b e3       	ldi	r24, 0x3B	; 59
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	2b e3       	ldi	r18, 0x3B	; 59
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	f9 01       	movw	r30, r18
     5ce:	20 81       	ld	r18, Z
     5d0:	62 2f       	mov	r22, r18
     5d2:	29 81       	ldd	r18, Y+1	; 0x01
     5d4:	42 2f       	mov	r20, r18
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	21 e0       	ldi	r18, 0x01	; 1
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	04 2e       	mov	r0, r20
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <out_a+0x8a>
     5e0:	22 0f       	add	r18, r18
     5e2:	33 1f       	adc	r19, r19
     5e4:	0a 94       	dec	r0
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <out_a+0x86>
     5e8:	20 95       	com	r18
     5ea:	26 23       	and	r18, r22
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18

}
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	cf 91       	pop	r28
     5f6:	df 91       	pop	r29
     5f8:	08 95       	ret

000005fa <out_b>:
void out_b(char _bit,char _dat)
{
     5fa:	df 93       	push	r29
     5fc:	cf 93       	push	r28
     5fe:	00 d0       	rcall	.+0      	; 0x600 <out_b+0x6>
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	89 83       	std	Y+1, r24	; 0x01
     606:	6a 83       	std	Y+2, r22	; 0x02
	DDRB |= _BV(_bit);
     608:	87 e3       	ldi	r24, 0x37	; 55
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	27 e3       	ldi	r18, 0x37	; 55
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	f9 01       	movw	r30, r18
     612:	20 81       	ld	r18, Z
     614:	62 2f       	mov	r22, r18
     616:	29 81       	ldd	r18, Y+1	; 0x01
     618:	42 2f       	mov	r20, r18
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	04 2e       	mov	r0, r20
     622:	02 c0       	rjmp	.+4      	; 0x628 <out_b+0x2e>
     624:	22 0f       	add	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	0a 94       	dec	r0
     62a:	e2 f7       	brpl	.-8      	; 0x624 <out_b+0x2a>
     62c:	26 2b       	or	r18, r22
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18
	if(_dat)
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	88 23       	and	r24, r24
     636:	b1 f0       	breq	.+44     	; 0x664 <out_b+0x6a>
		PORTB |= _BV(_bit);
     638:	88 e3       	ldi	r24, 0x38	; 56
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	28 e3       	ldi	r18, 0x38	; 56
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	f9 01       	movw	r30, r18
     642:	20 81       	ld	r18, Z
     644:	62 2f       	mov	r22, r18
     646:	29 81       	ldd	r18, Y+1	; 0x01
     648:	42 2f       	mov	r20, r18
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	04 2e       	mov	r0, r20
     652:	02 c0       	rjmp	.+4      	; 0x658 <out_b+0x5e>
     654:	22 0f       	add	r18, r18
     656:	33 1f       	adc	r19, r19
     658:	0a 94       	dec	r0
     65a:	e2 f7       	brpl	.-8      	; 0x654 <out_b+0x5a>
     65c:	26 2b       	or	r18, r22
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18
     662:	16 c0       	rjmp	.+44     	; 0x690 <out_b+0x96>
	else
		PORTB &= ~_BV(_bit);
     664:	88 e3       	ldi	r24, 0x38	; 56
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	28 e3       	ldi	r18, 0x38	; 56
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	f9 01       	movw	r30, r18
     66e:	20 81       	ld	r18, Z
     670:	62 2f       	mov	r22, r18
     672:	29 81       	ldd	r18, Y+1	; 0x01
     674:	42 2f       	mov	r20, r18
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	21 e0       	ldi	r18, 0x01	; 1
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	04 2e       	mov	r0, r20
     67e:	02 c0       	rjmp	.+4      	; 0x684 <out_b+0x8a>
     680:	22 0f       	add	r18, r18
     682:	33 1f       	adc	r19, r19
     684:	0a 94       	dec	r0
     686:	e2 f7       	brpl	.-8      	; 0x680 <out_b+0x86>
     688:	20 95       	com	r18
     68a:	26 23       	and	r18, r22
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18

}
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	cf 91       	pop	r28
     696:	df 91       	pop	r29
     698:	08 95       	ret

0000069a <out_c>:
void out_c(char _bit,char _dat)
{
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <out_c+0x6>
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	6a 83       	std	Y+2, r22	; 0x02
	DDRC |= _BV(_bit);
     6a8:	84 e3       	ldi	r24, 0x34	; 52
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	24 e3       	ldi	r18, 0x34	; 52
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	f9 01       	movw	r30, r18
     6b2:	20 81       	ld	r18, Z
     6b4:	62 2f       	mov	r22, r18
     6b6:	29 81       	ldd	r18, Y+1	; 0x01
     6b8:	42 2f       	mov	r20, r18
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	21 e0       	ldi	r18, 0x01	; 1
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	04 2e       	mov	r0, r20
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <out_c+0x2e>
     6c4:	22 0f       	add	r18, r18
     6c6:	33 1f       	adc	r19, r19
     6c8:	0a 94       	dec	r0
     6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <out_c+0x2a>
     6cc:	26 2b       	or	r18, r22
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 83       	st	Z, r18
	if(_dat)
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	88 23       	and	r24, r24
     6d6:	b1 f0       	breq	.+44     	; 0x704 <out_c+0x6a>
		PORTC |= _BV(_bit);
     6d8:	85 e3       	ldi	r24, 0x35	; 53
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	25 e3       	ldi	r18, 0x35	; 53
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	f9 01       	movw	r30, r18
     6e2:	20 81       	ld	r18, Z
     6e4:	62 2f       	mov	r22, r18
     6e6:	29 81       	ldd	r18, Y+1	; 0x01
     6e8:	42 2f       	mov	r20, r18
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	04 2e       	mov	r0, r20
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <out_c+0x5e>
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	0a 94       	dec	r0
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <out_c+0x5a>
     6fc:	26 2b       	or	r18, r22
     6fe:	fc 01       	movw	r30, r24
     700:	20 83       	st	Z, r18
     702:	16 c0       	rjmp	.+44     	; 0x730 <out_c+0x96>
	else
		PORTC &= ~_BV(_bit);
     704:	85 e3       	ldi	r24, 0x35	; 53
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	25 e3       	ldi	r18, 0x35	; 53
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	f9 01       	movw	r30, r18
     70e:	20 81       	ld	r18, Z
     710:	62 2f       	mov	r22, r18
     712:	29 81       	ldd	r18, Y+1	; 0x01
     714:	42 2f       	mov	r20, r18
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	21 e0       	ldi	r18, 0x01	; 1
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	04 2e       	mov	r0, r20
     71e:	02 c0       	rjmp	.+4      	; 0x724 <out_c+0x8a>
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <out_c+0x86>
     728:	20 95       	com	r18
     72a:	26 23       	and	r18, r22
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18

}
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	cf 91       	pop	r28
     736:	df 91       	pop	r29
     738:	08 95       	ret

0000073a <out_d>:
void out_d(char _bit,char _dat) 
{
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	00 d0       	rcall	.+0      	; 0x740 <out_d+0x6>
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	6a 83       	std	Y+2, r22	; 0x02
	DDRD |= _BV(_bit);
     748:	81 e3       	ldi	r24, 0x31	; 49
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	21 e3       	ldi	r18, 0x31	; 49
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	f9 01       	movw	r30, r18
     752:	20 81       	ld	r18, Z
     754:	62 2f       	mov	r22, r18
     756:	29 81       	ldd	r18, Y+1	; 0x01
     758:	42 2f       	mov	r20, r18
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	04 2e       	mov	r0, r20
     762:	02 c0       	rjmp	.+4      	; 0x768 <out_d+0x2e>
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	0a 94       	dec	r0
     76a:	e2 f7       	brpl	.-8      	; 0x764 <out_d+0x2a>
     76c:	26 2b       	or	r18, r22
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
	if(_dat)
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	88 23       	and	r24, r24
     776:	b1 f0       	breq	.+44     	; 0x7a4 <out_d+0x6a>
		PORTD |= _BV(_bit);
     778:	82 e3       	ldi	r24, 0x32	; 50
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	22 e3       	ldi	r18, 0x32	; 50
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	f9 01       	movw	r30, r18
     782:	20 81       	ld	r18, Z
     784:	62 2f       	mov	r22, r18
     786:	29 81       	ldd	r18, Y+1	; 0x01
     788:	42 2f       	mov	r20, r18
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	21 e0       	ldi	r18, 0x01	; 1
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	04 2e       	mov	r0, r20
     792:	02 c0       	rjmp	.+4      	; 0x798 <out_d+0x5e>
     794:	22 0f       	add	r18, r18
     796:	33 1f       	adc	r19, r19
     798:	0a 94       	dec	r0
     79a:	e2 f7       	brpl	.-8      	; 0x794 <out_d+0x5a>
     79c:	26 2b       	or	r18, r22
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
     7a2:	16 c0       	rjmp	.+44     	; 0x7d0 <out_d+0x96>
	else
		PORTD &= ~_BV(_bit);
     7a4:	82 e3       	ldi	r24, 0x32	; 50
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	22 e3       	ldi	r18, 0x32	; 50
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	f9 01       	movw	r30, r18
     7ae:	20 81       	ld	r18, Z
     7b0:	62 2f       	mov	r22, r18
     7b2:	29 81       	ldd	r18, Y+1	; 0x01
     7b4:	42 2f       	mov	r20, r18
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	04 2e       	mov	r0, r20
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <out_d+0x8a>
     7c0:	22 0f       	add	r18, r18
     7c2:	33 1f       	adc	r19, r19
     7c4:	0a 94       	dec	r0
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <out_d+0x86>
     7c8:	20 95       	com	r18
     7ca:	26 23       	and	r18, r22
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18
	
}
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	cf 91       	pop	r28
     7d6:	df 91       	pop	r29
     7d8:	08 95       	ret

000007da <delay_sound>:
#include <in_out.h>
//------------------------------------------------------------------------------------------------//
//---------------------------- Function delay 100 us per count -----------------------------------//
//------------------------------------------------------------------------------------------------//
void delay_sound(unsigned int ms)
{
     7da:	df 93       	push	r29
     7dc:	cf 93       	push	r28
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <delay_sound+0x6>
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <delay_sound+0x8>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <delay_sound+0xa>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	9e 83       	std	Y+6, r25	; 0x06
     7ea:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i,j;
	for(i=0;i<ms;i++)
     7ec:	1a 82       	std	Y+2, r1	; 0x02
     7ee:	19 82       	std	Y+1, r1	; 0x01
     7f0:	12 c0       	rjmp	.+36     	; 0x816 <delay_sound+0x3c>
		for(j=0;j<80;j++);
     7f2:	1c 82       	std	Y+4, r1	; 0x04
     7f4:	1b 82       	std	Y+3, r1	; 0x03
     7f6:	05 c0       	rjmp	.+10     	; 0x802 <delay_sound+0x28>
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	9c 81       	ldd	r25, Y+4	; 0x04
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	8b 83       	std	Y+3, r24	; 0x03
     802:	8b 81       	ldd	r24, Y+3	; 0x03
     804:	9c 81       	ldd	r25, Y+4	; 0x04
     806:	80 35       	cpi	r24, 0x50	; 80
     808:	91 05       	cpc	r25, r1
     80a:	b0 f3       	brcs	.-20     	; 0x7f8 <delay_sound+0x1e>
//---------------------------- Function delay 100 us per count -----------------------------------//
//------------------------------------------------------------------------------------------------//
void delay_sound(unsigned int ms)
{
	unsigned int i,j;
	for(i=0;i<ms;i++)
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	9a 81       	ldd	r25, Y+2	; 0x02
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	9a 83       	std	Y+2, r25	; 0x02
     814:	89 83       	std	Y+1, r24	; 0x01
     816:	29 81       	ldd	r18, Y+1	; 0x01
     818:	3a 81       	ldd	r19, Y+2	; 0x02
     81a:	8d 81       	ldd	r24, Y+5	; 0x05
     81c:	9e 81       	ldd	r25, Y+6	; 0x06
     81e:	28 17       	cp	r18, r24
     820:	39 07       	cpc	r19, r25
     822:	38 f3       	brcs	.-50     	; 0x7f2 <delay_sound+0x18>
		for(j=0;j<80;j++);
}
     824:	26 96       	adiw	r28, 0x06	; 6
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	cf 91       	pop	r28
     832:	df 91       	pop	r29
     834:	08 95       	ret

00000836 <sound_a>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_a(char ch,int freq,int time)
{
     836:	df 93       	push	r29
     838:	cf 93       	push	r28
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	29 97       	sbiw	r28, 0x09	; 9
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
     84a:	8d 83       	std	Y+5, r24	; 0x05
     84c:	7f 83       	std	Y+7, r23	; 0x07
     84e:	6e 83       	std	Y+6, r22	; 0x06
     850:	59 87       	std	Y+9, r21	; 0x09
     852:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,m=0;	// Keep value and 
     854:	1c 82       	std	Y+4, r1	; 0x04
     856:	1b 82       	std	Y+3, r1	; 0x03
     858:	1a 82       	std	Y+2, r1	; 0x02
     85a:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
     85c:	88 e8       	ldi	r24, 0x88	; 136
     85e:	93 e1       	ldi	r25, 0x13	; 19
     860:	2e 81       	ldd	r18, Y+6	; 0x06
     862:	3f 81       	ldd	r19, Y+7	; 0x07
     864:	b9 01       	movw	r22, r18
     866:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
     86a:	9b 01       	movw	r18, r22
     86c:	3c 83       	std	Y+4, r19	; 0x04
     86e:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
     870:	88 85       	ldd	r24, Y+8	; 0x08
     872:	99 85       	ldd	r25, Y+9	; 0x09
     874:	9c 01       	movw	r18, r24
     876:	22 0f       	add	r18, r18
     878:	33 1f       	adc	r19, r19
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	82 0f       	add	r24, r18
     880:	93 1f       	adc	r25, r19
     882:	2b 81       	ldd	r18, Y+3	; 0x03
     884:	3c 81       	ldd	r19, Y+4	; 0x04
     886:	b9 01       	movw	r22, r18
     888:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
     88c:	9b 01       	movw	r18, r22
     88e:	39 87       	std	Y+9, r19	; 0x09
     890:	28 87       	std	Y+8, r18	; 0x08
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     892:	1a 82       	std	Y+2, r1	; 0x02
     894:	19 82       	std	Y+1, r1	; 0x01
     896:	15 c0       	rjmp	.+42     	; 0x8c2 <sound_a+0x8c>
	{
        out_a(ch,1);
     898:	8d 81       	ldd	r24, Y+5	; 0x05
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	0e 94 ad 02 	call	0x55a	; 0x55a <out_a>
		delay_sound(dt);	// Delay for sound	
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	9c 81       	ldd	r25, Y+4	; 0x04
     8a4:	0e 94 ed 03 	call	0x7da	; 0x7da <delay_sound>
        out_a(ch,0);
     8a8:	8d 81       	ldd	r24, Y+5	; 0x05
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	0e 94 ad 02 	call	0x55a	; 0x55a <out_a>
		delay_sound(dt);	// Delay for sound
     8b0:	8b 81       	ldd	r24, Y+3	; 0x03
     8b2:	9c 81       	ldd	r25, Y+4	; 0x04
     8b4:	0e 94 ed 03 	call	0x7da	; 0x7da <delay_sound>
void sound_a(char ch,int freq,int time)
{
	int dt=0,m=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	9a 83       	std	Y+2, r25	; 0x02
     8c0:	89 83       	std	Y+1, r24	; 0x01
     8c2:	29 81       	ldd	r18, Y+1	; 0x01
     8c4:	3a 81       	ldd	r19, Y+2	; 0x02
     8c6:	88 85       	ldd	r24, Y+8	; 0x08
     8c8:	99 85       	ldd	r25, Y+9	; 0x09
     8ca:	28 17       	cp	r18, r24
     8cc:	39 07       	cpc	r19, r25
     8ce:	24 f3       	brlt	.-56     	; 0x898 <sound_a+0x62>
        out_a(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_a(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
     8d0:	29 96       	adiw	r28, 0x09	; 9
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	cf 91       	pop	r28
     8de:	df 91       	pop	r29
     8e0:	08 95       	ret

000008e2 <sound_b>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_b(char ch,int freq,int time)
{
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	29 97       	sbiw	r28, 0x09	; 9
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	8d 83       	std	Y+5, r24	; 0x05
     8f8:	7f 83       	std	Y+7, r23	; 0x07
     8fa:	6e 83       	std	Y+6, r22	; 0x06
     8fc:	59 87       	std	Y+9, r21	; 0x09
     8fe:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,m=0;	// Keep value and 
     900:	1c 82       	std	Y+4, r1	; 0x04
     902:	1b 82       	std	Y+3, r1	; 0x03
     904:	1a 82       	std	Y+2, r1	; 0x02
     906:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
     908:	88 e8       	ldi	r24, 0x88	; 136
     90a:	93 e1       	ldi	r25, 0x13	; 19
     90c:	2e 81       	ldd	r18, Y+6	; 0x06
     90e:	3f 81       	ldd	r19, Y+7	; 0x07
     910:	b9 01       	movw	r22, r18
     912:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
     916:	9b 01       	movw	r18, r22
     918:	3c 83       	std	Y+4, r19	; 0x04
     91a:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
     91c:	88 85       	ldd	r24, Y+8	; 0x08
     91e:	99 85       	ldd	r25, Y+9	; 0x09
     920:	9c 01       	movw	r18, r24
     922:	22 0f       	add	r18, r18
     924:	33 1f       	adc	r19, r19
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	82 0f       	add	r24, r18
     92c:	93 1f       	adc	r25, r19
     92e:	2b 81       	ldd	r18, Y+3	; 0x03
     930:	3c 81       	ldd	r19, Y+4	; 0x04
     932:	b9 01       	movw	r22, r18
     934:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
     938:	9b 01       	movw	r18, r22
     93a:	39 87       	std	Y+9, r19	; 0x09
     93c:	28 87       	std	Y+8, r18	; 0x08
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     93e:	1a 82       	std	Y+2, r1	; 0x02
     940:	19 82       	std	Y+1, r1	; 0x01
     942:	15 c0       	rjmp	.+42     	; 0x96e <sound_b+0x8c>
	{
        out_b(ch,1);
     944:	8d 81       	ldd	r24, Y+5	; 0x05
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
		delay_sound(dt);	// Delay for sound	
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	9c 81       	ldd	r25, Y+4	; 0x04
     950:	0e 94 ed 03 	call	0x7da	; 0x7da <delay_sound>
        out_b(ch,0);
     954:	8d 81       	ldd	r24, Y+5	; 0x05
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
		delay_sound(dt);	// Delay for sound
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	9c 81       	ldd	r25, Y+4	; 0x04
     960:	0e 94 ed 03 	call	0x7da	; 0x7da <delay_sound>
void sound_b(char ch,int freq,int time)
{
	int dt=0,m=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	9a 81       	ldd	r25, Y+2	; 0x02
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	9a 83       	std	Y+2, r25	; 0x02
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	29 81       	ldd	r18, Y+1	; 0x01
     970:	3a 81       	ldd	r19, Y+2	; 0x02
     972:	88 85       	ldd	r24, Y+8	; 0x08
     974:	99 85       	ldd	r25, Y+9	; 0x09
     976:	28 17       	cp	r18, r24
     978:	39 07       	cpc	r19, r25
     97a:	24 f3       	brlt	.-56     	; 0x944 <sound_b+0x62>
        out_b(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_b(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
     97c:	29 96       	adiw	r28, 0x09	; 9
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	cf 91       	pop	r28
     98a:	df 91       	pop	r29
     98c:	08 95       	ret

0000098e <sound_c>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_c(char ch,int freq,int time)
{
     98e:	df 93       	push	r29
     990:	cf 93       	push	r28
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	29 97       	sbiw	r28, 0x09	; 9
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	8d 83       	std	Y+5, r24	; 0x05
     9a4:	7f 83       	std	Y+7, r23	; 0x07
     9a6:	6e 83       	std	Y+6, r22	; 0x06
     9a8:	59 87       	std	Y+9, r21	; 0x09
     9aa:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,m=0;	// Keep value and 
     9ac:	1c 82       	std	Y+4, r1	; 0x04
     9ae:	1b 82       	std	Y+3, r1	; 0x03
     9b0:	1a 82       	std	Y+2, r1	; 0x02
     9b2:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
     9b4:	88 e8       	ldi	r24, 0x88	; 136
     9b6:	93 e1       	ldi	r25, 0x13	; 19
     9b8:	2e 81       	ldd	r18, Y+6	; 0x06
     9ba:	3f 81       	ldd	r19, Y+7	; 0x07
     9bc:	b9 01       	movw	r22, r18
     9be:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
     9c2:	9b 01       	movw	r18, r22
     9c4:	3c 83       	std	Y+4, r19	; 0x04
     9c6:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
     9c8:	88 85       	ldd	r24, Y+8	; 0x08
     9ca:	99 85       	ldd	r25, Y+9	; 0x09
     9cc:	9c 01       	movw	r18, r24
     9ce:	22 0f       	add	r18, r18
     9d0:	33 1f       	adc	r19, r19
     9d2:	22 0f       	add	r18, r18
     9d4:	33 1f       	adc	r19, r19
     9d6:	82 0f       	add	r24, r18
     9d8:	93 1f       	adc	r25, r19
     9da:	2b 81       	ldd	r18, Y+3	; 0x03
     9dc:	3c 81       	ldd	r19, Y+4	; 0x04
     9de:	b9 01       	movw	r22, r18
     9e0:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
     9e4:	9b 01       	movw	r18, r22
     9e6:	39 87       	std	Y+9, r19	; 0x09
     9e8:	28 87       	std	Y+8, r18	; 0x08
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     9ea:	1a 82       	std	Y+2, r1	; 0x02
     9ec:	19 82       	std	Y+1, r1	; 0x01
     9ee:	15 c0       	rjmp	.+42     	; 0xa1a <sound_c+0x8c>
	{
        out_c(ch,1);
     9f0:	8d 81       	ldd	r24, Y+5	; 0x05
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	0e 94 4d 03 	call	0x69a	; 0x69a <out_c>
		delay_sound(dt);	// Delay for sound	
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	0e 94 ed 03 	call	0x7da	; 0x7da <delay_sound>
        out_c(ch,0);
     a00:	8d 81       	ldd	r24, Y+5	; 0x05
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	0e 94 4d 03 	call	0x69a	; 0x69a <out_c>
		delay_sound(dt);	// Delay for sound
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	0e 94 ed 03 	call	0x7da	; 0x7da <delay_sound>
void sound_c(char ch,int freq,int time)
{
	int dt=0,m=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	9a 81       	ldd	r25, Y+2	; 0x02
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	9a 83       	std	Y+2, r25	; 0x02
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	29 81       	ldd	r18, Y+1	; 0x01
     a1c:	3a 81       	ldd	r19, Y+2	; 0x02
     a1e:	88 85       	ldd	r24, Y+8	; 0x08
     a20:	99 85       	ldd	r25, Y+9	; 0x09
     a22:	28 17       	cp	r18, r24
     a24:	39 07       	cpc	r19, r25
     a26:	24 f3       	brlt	.-56     	; 0x9f0 <sound_c+0x62>
        out_c(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_c(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
     a28:	29 96       	adiw	r28, 0x09	; 9
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	cf 91       	pop	r28
     a36:	df 91       	pop	r29
     a38:	08 95       	ret

00000a3a <sound_d>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_d(char ch,int freq,int time)
{
     a3a:	df 93       	push	r29
     a3c:	cf 93       	push	r28
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	29 97       	sbiw	r28, 0x09	; 9
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	cd bf       	out	0x3d, r28	; 61
     a4e:	8d 83       	std	Y+5, r24	; 0x05
     a50:	7f 83       	std	Y+7, r23	; 0x07
     a52:	6e 83       	std	Y+6, r22	; 0x06
     a54:	59 87       	std	Y+9, r21	; 0x09
     a56:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,m=0;	// Keep value and 
     a58:	1c 82       	std	Y+4, r1	; 0x04
     a5a:	1b 82       	std	Y+3, r1	; 0x03
     a5c:	1a 82       	std	Y+2, r1	; 0x02
     a5e:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
     a60:	88 e8       	ldi	r24, 0x88	; 136
     a62:	93 e1       	ldi	r25, 0x13	; 19
     a64:	2e 81       	ldd	r18, Y+6	; 0x06
     a66:	3f 81       	ldd	r19, Y+7	; 0x07
     a68:	b9 01       	movw	r22, r18
     a6a:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
     a6e:	9b 01       	movw	r18, r22
     a70:	3c 83       	std	Y+4, r19	; 0x04
     a72:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
     a74:	88 85       	ldd	r24, Y+8	; 0x08
     a76:	99 85       	ldd	r25, Y+9	; 0x09
     a78:	9c 01       	movw	r18, r24
     a7a:	22 0f       	add	r18, r18
     a7c:	33 1f       	adc	r19, r19
     a7e:	22 0f       	add	r18, r18
     a80:	33 1f       	adc	r19, r19
     a82:	82 0f       	add	r24, r18
     a84:	93 1f       	adc	r25, r19
     a86:	2b 81       	ldd	r18, Y+3	; 0x03
     a88:	3c 81       	ldd	r19, Y+4	; 0x04
     a8a:	b9 01       	movw	r22, r18
     a8c:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
     a90:	9b 01       	movw	r18, r22
     a92:	39 87       	std	Y+9, r19	; 0x09
     a94:	28 87       	std	Y+8, r18	; 0x08
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     a96:	1a 82       	std	Y+2, r1	; 0x02
     a98:	19 82       	std	Y+1, r1	; 0x01
     a9a:	15 c0       	rjmp	.+42     	; 0xac6 <sound_d+0x8c>
	{
        out_d(ch,1);
     a9c:	8d 81       	ldd	r24, Y+5	; 0x05
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
		delay_sound(dt);	// Delay for sound	
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	9c 81       	ldd	r25, Y+4	; 0x04
     aa8:	0e 94 ed 03 	call	0x7da	; 0x7da <delay_sound>
        out_d(ch,0);
     aac:	8d 81       	ldd	r24, Y+5	; 0x05
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
		delay_sound(dt);	// Delay for sound
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	0e 94 ed 03 	call	0x7da	; 0x7da <delay_sound>
void sound_d(char ch,int freq,int time)
{
	int dt=0,m=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	9a 81       	ldd	r25, Y+2	; 0x02
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	9a 83       	std	Y+2, r25	; 0x02
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	3a 81       	ldd	r19, Y+2	; 0x02
     aca:	88 85       	ldd	r24, Y+8	; 0x08
     acc:	99 85       	ldd	r25, Y+9	; 0x09
     ace:	28 17       	cp	r18, r24
     ad0:	39 07       	cpc	r19, r25
     ad2:	24 f3       	brlt	.-56     	; 0xa9c <sound_d+0x62>
        out_d(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_d(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
     ad4:	29 96       	adiw	r28, 0x09	; 9
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	cf 91       	pop	r28
     ae2:	df 91       	pop	r29
     ae4:	08 95       	ret

00000ae6 <beep_a>:

//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_a(char _ch)
{
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	0f 92       	push	r0
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	89 83       	std	Y+1, r24	; 0x01
	sound_a(_ch,3000,100);	// Generate sound default frequency
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	68 eb       	ldi	r22, 0xB8	; 184
     af6:	7b e0       	ldi	r23, 0x0B	; 11
     af8:	44 e6       	ldi	r20, 0x64	; 100
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	0e 94 1b 04 	call	0x836	; 0x836 <sound_a>
}
     b00:	0f 90       	pop	r0
     b02:	cf 91       	pop	r28
     b04:	df 91       	pop	r29
     b06:	08 95       	ret

00000b08 <beep_b>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_b(char _ch)
{
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	0f 92       	push	r0
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	89 83       	std	Y+1, r24	; 0x01
	sound_b(_ch,3000,100);	// Generate sound default frequency
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	68 eb       	ldi	r22, 0xB8	; 184
     b18:	7b e0       	ldi	r23, 0x0B	; 11
     b1a:	44 e6       	ldi	r20, 0x64	; 100
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <sound_b>
}
     b22:	0f 90       	pop	r0
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	08 95       	ret

00000b2a <beep_c>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_c(char _ch)
{
     b2a:	df 93       	push	r29
     b2c:	cf 93       	push	r28
     b2e:	0f 92       	push	r0
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	89 83       	std	Y+1, r24	; 0x01
	sound_c(_ch,3000,100);	// Generate sound default frequency
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	68 eb       	ldi	r22, 0xB8	; 184
     b3a:	7b e0       	ldi	r23, 0x0B	; 11
     b3c:	44 e6       	ldi	r20, 0x64	; 100
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	0e 94 c7 04 	call	0x98e	; 0x98e <sound_c>
}
     b44:	0f 90       	pop	r0
     b46:	cf 91       	pop	r28
     b48:	df 91       	pop	r29
     b4a:	08 95       	ret

00000b4c <beep_d>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_d(char _ch)
{
     b4c:	df 93       	push	r29
     b4e:	cf 93       	push	r28
     b50:	0f 92       	push	r0
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	89 83       	std	Y+1, r24	; 0x01
	sound_d(_ch,3000,100);	// Generate sound default frequency
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	68 eb       	ldi	r22, 0xB8	; 184
     b5c:	7b e0       	ldi	r23, 0x0B	; 11
     b5e:	44 e6       	ldi	r20, 0x64	; 100
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	0e 94 1d 05 	call	0xa3a	; 0xa3a <sound_d>
}
     b66:	0f 90       	pop	r0
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <lcd_clk>:
//------------------------------------------------------------------------------------//
void lcd_init(void);
char lcd_ini=0,_lcd_clear_display=0;

void lcd_clk(void)				/* Pulse LCD clock on EN*/
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
  EN(1);
     b76:	83 e0       	ldi	r24, 0x03	; 3
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	0e 94 4d 03 	call	0x69a	; 0x69a <out_c>
  sleep(1);
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
  EN(0);
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	0e 94 4d 03 	call	0x69a	; 0x69a <out_c>
  sleep(1);
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
}
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <lcd_command>:

void lcd_command(unsigned char outbyte)	/* Send command (4bit operation) */
{
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	0f 92       	push	r0
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	89 83       	std	Y+1, r24	; 0x01
  if(lcd_ini==0)
     ba8:	80 91 06 02 	lds	r24, 0x0206
     bac:	88 23       	and	r24, r24
     bae:	29 f4       	brne	.+10     	; 0xbba <lcd_command+0x1e>
  {
  	lcd_ini=1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 06 02 	sts	0x0206, r24
	lcd_init();
     bb6:	0e 94 9a 06 	call	0xd34	; 0xd34 <lcd_init>
  }
  RS(0);		// Command
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	0e 94 4d 03 	call	0x69a	; 0x69a <out_c>
  PORTC=(PORTC&0x0f)|(outbyte&0xf0);
     bc2:	85 e3       	ldi	r24, 0x35	; 53
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	25 e3       	ldi	r18, 0x35	; 53
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	f9 01       	movw	r30, r18
     bcc:	20 81       	ld	r18, Z
     bce:	32 2f       	mov	r19, r18
     bd0:	3f 70       	andi	r19, 0x0F	; 15
     bd2:	29 81       	ldd	r18, Y+1	; 0x01
     bd4:	20 7f       	andi	r18, 0xF0	; 240
     bd6:	23 2b       	or	r18, r19
     bd8:	fc 01       	movw	r30, r24
     bda:	20 83       	st	Z, r18
  lcd_clk();
     bdc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lcd_clk>
  PORTC=(PORTC&0x0f)|((outbyte<<4)&0xf0);
     be0:	85 e3       	ldi	r24, 0x35	; 53
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	25 e3       	ldi	r18, 0x35	; 53
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	f9 01       	movw	r30, r18
     bea:	20 81       	ld	r18, Z
     bec:	42 2f       	mov	r20, r18
     bee:	4f 70       	andi	r20, 0x0F	; 15
     bf0:	29 81       	ldd	r18, Y+1	; 0x01
     bf2:	22 2f       	mov	r18, r18
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	22 95       	swap	r18
     bf8:	32 95       	swap	r19
     bfa:	30 7f       	andi	r19, 0xF0	; 240
     bfc:	32 27       	eor	r19, r18
     bfe:	20 7f       	andi	r18, 0xF0	; 240
     c00:	32 27       	eor	r19, r18
     c02:	24 2b       	or	r18, r20
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
  lcd_clk();
     c08:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lcd_clk>
}
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <lcd_text>:

void lcd_text(unsigned char outbyte) /* Send Data (4bit operation) */
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	0f 92       	push	r0
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	89 83       	std	Y+1, r24	; 0x01
  if(lcd_ini==0)
     c20:	80 91 06 02 	lds	r24, 0x0206
     c24:	88 23       	and	r24, r24
     c26:	29 f4       	brne	.+10     	; 0xc32 <lcd_text+0x1e>
  {
  	lcd_ini=1;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 06 02 	sts	0x0206, r24
	lcd_init();
     c2e:	0e 94 9a 06 	call	0xd34	; 0xd34 <lcd_init>
  }
  RS(1);		// Display
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	0e 94 4d 03 	call	0x69a	; 0x69a <out_c>
  PORTC=(PORTC&0x0f)|(outbyte&0xf0);
     c3a:	85 e3       	ldi	r24, 0x35	; 53
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	25 e3       	ldi	r18, 0x35	; 53
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	f9 01       	movw	r30, r18
     c44:	20 81       	ld	r18, Z
     c46:	32 2f       	mov	r19, r18
     c48:	3f 70       	andi	r19, 0x0F	; 15
     c4a:	29 81       	ldd	r18, Y+1	; 0x01
     c4c:	20 7f       	andi	r18, 0xF0	; 240
     c4e:	23 2b       	or	r18, r19
     c50:	fc 01       	movw	r30, r24
     c52:	20 83       	st	Z, r18
  lcd_clk();
     c54:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lcd_clk>
  PORTC=(PORTC&0x0f)|((outbyte<<4)&0xf0);
     c58:	85 e3       	ldi	r24, 0x35	; 53
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	25 e3       	ldi	r18, 0x35	; 53
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	42 2f       	mov	r20, r18
     c66:	4f 70       	andi	r20, 0x0F	; 15
     c68:	29 81       	ldd	r18, Y+1	; 0x01
     c6a:	22 2f       	mov	r18, r18
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	22 95       	swap	r18
     c70:	32 95       	swap	r19
     c72:	30 7f       	andi	r19, 0xF0	; 240
     c74:	32 27       	eor	r19, r18
     c76:	20 7f       	andi	r18, 0xF0	; 240
     c78:	32 27       	eor	r19, r18
     c7a:	24 2b       	or	r18, r20
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 83       	st	Z, r18
  lcd_clk();
     c80:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lcd_clk>
}
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <lcd_puts>:
//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------------------ Function show string message ----------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd_puts(unsigned char line,char *p)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	00 d0       	rcall	.+0      	; 0xc92 <lcd_puts+0x6>
     c92:	0f 92       	push	r0
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	7b 83       	std	Y+3, r23	; 0x03
     c9c:	6a 83       	std	Y+2, r22	; 0x02
	lcd_origin();         // Set origin address of LCD
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
	lcd_command(line);			// Set address 00H of LCD
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
	while(*p)                  // Check data pointer = 0?
     caa:	0b c0       	rjmp	.+22     	; 0xcc2 <lcd_puts+0x36>
	{
	 lcd_text(*p);             // Send data to LCD
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	9b 81       	ldd	r25, Y+3	; 0x03
     cb0:	fc 01       	movw	r30, r24
     cb2:	80 81       	ld	r24, Z
     cb4:	0e 94 0a 06 	call	0xc14	; 0xc14 <lcd_text>
	 p++;                      // Increase address 1 time 
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	9b 83       	std	Y+3, r25	; 0x03
     cc0:	8a 83       	std	Y+2, r24	; 0x02
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd_puts(unsigned char line,char *p)
{
	lcd_origin();         // Set origin address of LCD
	lcd_command(line);			// Set address 00H of LCD
	while(*p)                  // Check data pointer = 0?
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	88 23       	and	r24, r24
     ccc:	79 f7       	brne	.-34     	; 0xcac <lcd_puts+0x20>
	{
	 lcd_text(*p);             // Send data to LCD
	 p++;                      // Increase address 1 time 
	}
}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <inttolcd>:

//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------- Convert integer to ascii for display on LCD ---------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void inttolcd(unsigned char posi, long value)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	65 97       	sbiw	r28, 0x15	; 21
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	89 8b       	std	Y+17, r24	; 0x11
     cf0:	4a 8b       	std	Y+18, r20	; 0x12
     cf2:	5b 8b       	std	Y+19, r21	; 0x13
     cf4:	6c 8b       	std	Y+20, r22	; 0x14
     cf6:	7d 8b       	std	Y+21, r23	; 0x15
	char buff[16];			// For keep string send to LCD 
	ltoa(value,&buff[0],10);
     cf8:	8a 89       	ldd	r24, Y+18	; 0x12
     cfa:	9b 89       	ldd	r25, Y+19	; 0x13
     cfc:	ac 89       	ldd	r26, Y+20	; 0x14
     cfe:	bd 89       	ldd	r27, Y+21	; 0x15
     d00:	bc 01       	movw	r22, r24
     d02:	cd 01       	movw	r24, r26
     d04:	9e 01       	movw	r18, r28
     d06:	2f 5f       	subi	r18, 0xFF	; 255
     d08:	3f 4f       	sbci	r19, 0xFF	; 255
     d0a:	a9 01       	movw	r20, r18
     d0c:	2a e0       	ldi	r18, 0x0A	; 10
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	0e 94 a2 18 	call	0x3144	; 0x3144 <ltoa>
	lcd_puts(posi,buff);  	// Send integer to LCD
     d14:	89 89       	ldd	r24, Y+17	; 0x11
     d16:	9e 01       	movw	r18, r28
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	b9 01       	movw	r22, r18
     d1e:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_puts>
}
     d22:	65 96       	adiw	r28, 0x15	; 21
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <lcd_init>:
	dtostrf(value,16,5,buff);
	lcd_puts(posi,buff);  	// Send integer to LCD
}*/

void lcd_init(void)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
  PORTC = 0x00;
     d3c:	85 e3       	ldi	r24, 0x35	; 53
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	fc 01       	movw	r30, r24
     d42:	10 82       	st	Z, r1
  DDRC = 0xFC;
     d44:	84 e3       	ldi	r24, 0x34	; 52
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	2c ef       	ldi	r18, 0xFC	; 252
     d4a:	fc 01       	movw	r30, r24
     d4c:	20 83       	st	Z, r18
  EN(0);						// Init. EN = 0
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	0e 94 4d 03 	call	0x69a	; 0x69a <out_c>
  RS(0);						// Init. RS = 0
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	0e 94 4d 03 	call	0x69a	; 0x69a <out_c>

  sleep(500);
     d5e:	84 ef       	ldi	r24, 0xF4	; 244
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
  PORTC=(PORTC&0x0f)|0x30;	// Force LCD receive 1 times command per pulse
     d66:	85 e3       	ldi	r24, 0x35	; 53
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	25 e3       	ldi	r18, 0x35	; 53
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	f9 01       	movw	r30, r18
     d70:	20 81       	ld	r18, Z
     d72:	2f 70       	andi	r18, 0x0F	; 15
     d74:	20 63       	ori	r18, 0x30	; 48
     d76:	fc 01       	movw	r30, r24
     d78:	20 83       	st	Z, r18
  lcd_clk();
     d7a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lcd_clk>
  PORTC=(PORTC&0x0f)|0x30;	// (do 3 times for ensure LCD operation forced)
     d7e:	85 e3       	ldi	r24, 0x35	; 53
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	25 e3       	ldi	r18, 0x35	; 53
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	f9 01       	movw	r30, r18
     d88:	20 81       	ld	r18, Z
     d8a:	2f 70       	andi	r18, 0x0F	; 15
     d8c:	20 63       	ori	r18, 0x30	; 48
     d8e:	fc 01       	movw	r30, r24
     d90:	20 83       	st	Z, r18
  lcd_clk();
     d92:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lcd_clk>
  PORTC=(PORTC&0x0f)|0x30;
     d96:	85 e3       	ldi	r24, 0x35	; 53
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	25 e3       	ldi	r18, 0x35	; 53
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	f9 01       	movw	r30, r18
     da0:	20 81       	ld	r18, Z
     da2:	2f 70       	andi	r18, 0x0F	; 15
     da4:	20 63       	ori	r18, 0x30	; 48
     da6:	fc 01       	movw	r30, r24
     da8:	20 83       	st	Z, r18
  lcd_clk();
     daa:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lcd_clk>

  PORTC=(PORTC&0x0f)|0x20;	// Switch to real 4 bit transfer mode on first
     dae:	85 e3       	ldi	r24, 0x35	; 53
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	25 e3       	ldi	r18, 0x35	; 53
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	f9 01       	movw	r30, r18
     db8:	20 81       	ld	r18, Z
     dba:	2f 70       	andi	r18, 0x0F	; 15
     dbc:	20 62       	ori	r18, 0x20	; 32
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 83       	st	Z, r18
  lcd_clk();
     dc2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lcd_clk>

  lcd_command(0x28);		// Send real command to 4 bit operation and set N=1, F=0
     dc6:	88 e2       	ldi	r24, 0x28	; 40
     dc8:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
  lcd_command(0x01);		// Clear all
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
  lcd_command(0x06);		// Increase cursor automatic after byte
     dd2:	86 e0       	ldi	r24, 0x06	; 6
     dd4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
  lcd_command(0x0C);		// Display on, no cursor, not blink
     dd8:	8c e0       	ldi	r24, 0x0C	; 12
     dda:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
  lcd_command(0x02);		// Home position
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
  lcd_command(0x01);		// Clear all again
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <lcd>:
//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------------------ Function LCD display and %d support(Beta version) ----------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd(char *p,...)
{
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	67 97       	sbiw	r28, 0x17	; 23
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
	char *arg,**pp;	// Poter of point
	char *ptr,char_count=0,buff[16];
     e08:	1d 82       	std	Y+5, r1	; 0x05
	pp = &p;
     e0a:	8e e1       	ldi	r24, 0x1E	; 30
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	8c 0f       	add	r24, r28
     e10:	9d 1f       	adc	r25, r29
     e12:	9f 83       	std	Y+7, r25	; 0x07
     e14:	8e 83       	std	Y+6, r24	; 0x06
	ptr = p;	// Copy address
     e16:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e18:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	8b 83       	std	Y+3, r24	; 0x03
	arg = pp;	// Copy address of p point	
     e1e:	8e 81       	ldd	r24, Y+6	; 0x06
     e20:	9f 81       	ldd	r25, Y+7	; 0x07
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
	
	lcd_origin();       // Set origin address of LCD
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
	lcd_command(0x80);	// Set address 00H of LCD
     e2c:	80 e8       	ldi	r24, 0x80	; 128
     e2e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
	if(_lcd_clear_display)
     e32:	80 91 07 02 	lds	r24, 0x0207
     e36:	88 23       	and	r24, r24
     e38:	29 f0       	breq	.+10     	; 0xe44 <lcd+0x54>
	{
		_lcd_clear_display = 0;
     e3a:	10 92 07 02 	sts	0x0207, r1
		lcd_clear();
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
	}
	arg += 2;	// Cross 2 time go to Origin of first parameter 
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	02 96       	adiw	r24, 0x02	; 2
     e4a:	9a 83       	std	Y+2, r25	; 0x02
     e4c:	89 83       	std	Y+1, r24	; 0x01
	
	while(*ptr)                 // Check data pointer = 0?
     e4e:	85 c1       	rjmp	.+778    	; 0x115a <lcd+0x36a>
	{
	 	if(TEST_CHAR_TYPE(ptr))
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	fc 01       	movw	r30, r24
     e56:	80 81       	ld	r24, Z
     e58:	85 32       	cpi	r24, 0x25	; 37
     e5a:	81 f5       	brne	.+96     	; 0xebc <lcd+0xcc>
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	fc 01       	movw	r30, r24
     e64:	80 81       	ld	r24, Z
     e66:	83 36       	cpi	r24, 0x63	; 99
     e68:	39 f0       	breq	.+14     	; 0xe78 <lcd+0x88>
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	fc 01       	movw	r30, r24
     e72:	80 81       	ld	r24, Z
     e74:	83 34       	cpi	r24, 0x43	; 67
     e76:	11 f5       	brne	.+68     	; 0xebc <lcd+0xcc>
		{
			char_count++;
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	8f 5f       	subi	r24, 0xFF	; 255
     e7c:	8d 83       	std	Y+5, r24	; 0x05
			if(char_count==17)
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	81 31       	cpi	r24, 0x11	; 17
     e82:	31 f4       	brne	.+12     	; 0xe90 <lcd+0xa0>
			{
				lcd_origin();
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
				lcd_command(0xC0);
     e8a:	80 ec       	ldi	r24, 0xC0	; 192
     e8c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
			}
			if(char_count>32)
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	81 32       	cpi	r24, 0x21	; 33
     e94:	08 f0       	brcs	.+2      	; 0xe98 <lcd+0xa8>
			{
				char_count = 0;
     e96:	1d 82       	std	Y+5, r1	; 0x05
			}
			lcd_text(toascii(*arg));             // Send data to LCD
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	fc 01       	movw	r30, r24
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 77       	andi	r24, 0x7F	; 127
     ea2:	0e 94 0a 06 	call	0xc14	; 0xc14 <lcd_text>
	 	
			arg+=2;	// Cross address char type
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	02 96       	adiw	r24, 0x02	; 2
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	9c 83       	std	Y+4, r25	; 0x04
     eb8:	8b 83       	std	Y+3, r24	; 0x03
     eba:	4a c1       	rjmp	.+660    	; 0x1150 <lcd+0x360>
		}
		else if(TEST_INT_TYPE(ptr))
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	fc 01       	movw	r30, r24
     ec2:	80 81       	ld	r24, Z
     ec4:	85 32       	cpi	r24, 0x25	; 37
     ec6:	09 f0       	breq	.+2      	; 0xeca <lcd+0xda>
     ec8:	51 c0       	rjmp	.+162    	; 0xf6c <lcd+0x17c>
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	fc 01       	movw	r30, r24
     ed2:	80 81       	ld	r24, Z
     ed4:	84 36       	cpi	r24, 0x64	; 100
     ed6:	41 f0       	breq	.+16     	; 0xee8 <lcd+0xf8>
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	fc 01       	movw	r30, r24
     ee0:	80 81       	ld	r24, Z
     ee2:	84 34       	cpi	r24, 0x44	; 68
     ee4:	09 f0       	breq	.+2      	; 0xee8 <lcd+0xf8>
     ee6:	42 c0       	rjmp	.+132    	; 0xf6c <lcd+0x17c>
		{
			p = ltoa(*(int *)arg,&buff[0],10);
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	fc 01       	movw	r30, r24
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	aa 27       	eor	r26, r26
     ef4:	97 fd       	sbrc	r25, 7
     ef6:	a0 95       	com	r26
     ef8:	ba 2f       	mov	r27, r26
     efa:	9e 01       	movw	r18, r28
     efc:	28 5f       	subi	r18, 0xF8	; 248
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	a9 01       	movw	r20, r18
     f06:	2a e0       	ldi	r18, 0x0A	; 10
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	0e 94 a2 18 	call	0x3144	; 0x3144 <ltoa>
     f0e:	9f 8f       	std	Y+31, r25	; 0x1f
     f10:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     f12:	1b c0       	rjmp	.+54     	; 0xf4a <lcd+0x15a>
			{
	 			char_count++;
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	8d 83       	std	Y+5, r24	; 0x05
				if(char_count==17)
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	81 31       	cpi	r24, 0x11	; 17
     f1e:	31 f4       	brne	.+12     	; 0xf2c <lcd+0x13c>
				{
					lcd_origin();
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
					lcd_command(0xC0);
     f26:	80 ec       	ldi	r24, 0xC0	; 192
     f28:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
				}
				if(char_count>32)
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	81 32       	cpi	r24, 0x21	; 33
     f30:	08 f0       	brcs	.+2      	; 0xf34 <lcd+0x144>
				{
					char_count = 0;
     f32:	1d 82       	std	Y+5, r1	; 0x05
				}
				lcd_text(*p);             // Send data to LCD
     f34:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f36:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f38:	fc 01       	movw	r30, r24
     f3a:	80 81       	ld	r24, Z
     f3c:	0e 94 0a 06 	call	0xc14	; 0xc14 <lcd_text>
	 			p++;                     // Increase address 1 time 
     f40:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f42:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	9f 8f       	std	Y+31, r25	; 0x1f
     f48:	8e 8f       	std	Y+30, r24	; 0x1e
			ptr++;	// Cross %d parameter
		}
		else if(TEST_INT_TYPE(ptr))
		{
			p = ltoa(*(int *)arg,&buff[0],10);
			while(*p)           // Check data pointer = 0?
     f4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f4e:	fc 01       	movw	r30, r24
     f50:	80 81       	ld	r24, Z
     f52:	88 23       	and	r24, r24
     f54:	f9 f6       	brne	.-66     	; 0xf14 <lcd+0x124>
					char_count = 0;
				}
				lcd_text(*p);             // Send data to LCD
	 			p++;                     // Increase address 1 time 
			}
			arg+=2;	// Cross address int type
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	02 96       	adiw	r24, 0x02	; 2
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	f2 c0       	rjmp	.+484    	; 0x1150 <lcd+0x360>
		}
		else if(TEST_LONG_TYPE(ptr))
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	fc 01       	movw	r30, r24
     f72:	80 81       	ld	r24, Z
     f74:	85 32       	cpi	r24, 0x25	; 37
     f76:	09 f0       	breq	.+2      	; 0xf7a <lcd+0x18a>
     f78:	4f c0       	rjmp	.+158    	; 0x1018 <lcd+0x228>
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	fc 01       	movw	r30, r24
     f82:	80 81       	ld	r24, Z
     f84:	8c 36       	cpi	r24, 0x6C	; 108
     f86:	41 f0       	breq	.+16     	; 0xf98 <lcd+0x1a8>
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	fc 01       	movw	r30, r24
     f90:	80 81       	ld	r24, Z
     f92:	8c 34       	cpi	r24, 0x4C	; 76
     f94:	09 f0       	breq	.+2      	; 0xf98 <lcd+0x1a8>
     f96:	40 c0       	rjmp	.+128    	; 0x1018 <lcd+0x228>
		{
			p = ltoa(*(long *)arg,&buff[0],10);
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	fc 01       	movw	r30, r24
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	a2 81       	ldd	r26, Z+2	; 0x02
     fa4:	b3 81       	ldd	r27, Z+3	; 0x03
     fa6:	9e 01       	movw	r18, r28
     fa8:	28 5f       	subi	r18, 0xF8	; 248
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	a9 01       	movw	r20, r18
     fb2:	2a e0       	ldi	r18, 0x0A	; 10
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	0e 94 a2 18 	call	0x3144	; 0x3144 <ltoa>
     fba:	9f 8f       	std	Y+31, r25	; 0x1f
     fbc:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     fbe:	1b c0       	rjmp	.+54     	; 0xff6 <lcd+0x206>
			{
	 			char_count++;
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	8d 83       	std	Y+5, r24	; 0x05
				if(char_count==17)
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	81 31       	cpi	r24, 0x11	; 17
     fca:	31 f4       	brne	.+12     	; 0xfd8 <lcd+0x1e8>
				{
					lcd_origin();
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
					lcd_command(0xC0);
     fd2:	80 ec       	ldi	r24, 0xC0	; 192
     fd4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
				}
				if(char_count>32)
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	81 32       	cpi	r24, 0x21	; 33
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <lcd+0x1f0>
				{
					char_count = 0;
     fde:	1d 82       	std	Y+5, r1	; 0x05
				}
				lcd_text(*p);             // Send data to LCD
     fe0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fe2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fe4:	fc 01       	movw	r30, r24
     fe6:	80 81       	ld	r24, Z
     fe8:	0e 94 0a 06 	call	0xc14	; 0xc14 <lcd_text>
	 			p++;                     // Increase address 1 time 
     fec:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fee:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	9f 8f       	std	Y+31, r25	; 0x1f
     ff4:	8e 8f       	std	Y+30, r24	; 0x1e
			ptr++;	// Cross %d parameter
		}
		else if(TEST_LONG_TYPE(ptr))
		{
			p = ltoa(*(long *)arg,&buff[0],10);
			while(*p)           // Check data pointer = 0?
     ff6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ffa:	fc 01       	movw	r30, r24
     ffc:	80 81       	ld	r24, Z
     ffe:	88 23       	and	r24, r24
    1000:	f9 f6       	brne	.-66     	; 0xfc0 <lcd+0x1d0>
					char_count = 0;
				}
				lcd_text(*p);             // Send data to LCD
	 			p++;                     // Increase address 1 time 
			}
			arg+=4;	// Cross address long type
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	04 96       	adiw	r24, 0x04	; 4
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	9c 81       	ldd	r25, Y+4	; 0x04
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	9c c0       	rjmp	.+312    	; 0x1150 <lcd+0x360>
		}
		else if(TEST_FLOAT_TYPE(ptr))
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	fc 01       	movw	r30, r24
    101e:	80 81       	ld	r24, Z
    1020:	85 32       	cpi	r24, 0x25	; 37
    1022:	09 f0       	breq	.+2      	; 0x1026 <lcd+0x236>
    1024:	4e c0       	rjmp	.+156    	; 0x10c2 <lcd+0x2d2>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	fc 01       	movw	r30, r24
    102e:	80 81       	ld	r24, Z
    1030:	86 36       	cpi	r24, 0x66	; 102
    1032:	41 f0       	breq	.+16     	; 0x1044 <lcd+0x254>
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	fc 01       	movw	r30, r24
    103c:	80 81       	ld	r24, Z
    103e:	86 34       	cpi	r24, 0x46	; 70
    1040:	09 f0       	breq	.+2      	; 0x1044 <lcd+0x254>
    1042:	3f c0       	rjmp	.+126    	; 0x10c2 <lcd+0x2d2>
		{
			p = dtostrf(*(float *)arg,2,F_PREC,&buff[0]);	// Convert float to string(used libm.a)
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	fc 01       	movw	r30, r24
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	a2 81       	ldd	r26, Z+2	; 0x02
    1050:	b3 81       	ldd	r27, Z+3	; 0x03
    1052:	fe 01       	movw	r30, r28
    1054:	38 96       	adiw	r30, 0x08	; 8
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	42 e0       	ldi	r20, 0x02	; 2
    105c:	23 e0       	ldi	r18, 0x03	; 3
    105e:	8f 01       	movw	r16, r30
    1060:	0e 94 80 18 	call	0x3100	; 0x3100 <dtostrf>
    1064:	9f 8f       	std	Y+31, r25	; 0x1f
    1066:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
    1068:	1b c0       	rjmp	.+54     	; 0x10a0 <lcd+0x2b0>
			{
	 			char_count++;
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	8d 83       	std	Y+5, r24	; 0x05
				if(char_count==17)
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	81 31       	cpi	r24, 0x11	; 17
    1074:	31 f4       	brne	.+12     	; 0x1082 <lcd+0x292>
				{
					lcd_origin();
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
					lcd_command(0xC0);
    107c:	80 ec       	ldi	r24, 0xC0	; 192
    107e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
				}
				if(char_count>32)
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	81 32       	cpi	r24, 0x21	; 33
    1086:	08 f0       	brcs	.+2      	; 0x108a <lcd+0x29a>
				{
					char_count = 0;
    1088:	1d 82       	std	Y+5, r1	; 0x05
				}
				lcd_text(*p);             // Send data to LCD
    108a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    108c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    108e:	fc 01       	movw	r30, r24
    1090:	80 81       	ld	r24, Z
    1092:	0e 94 0a 06 	call	0xc14	; 0xc14 <lcd_text>
	 			p++;                     // Increase address 1 time 
    1096:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1098:	9f 8d       	ldd	r25, Y+31	; 0x1f
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	9f 8f       	std	Y+31, r25	; 0x1f
    109e:	8e 8f       	std	Y+30, r24	; 0x1e
			ptr++;	// Cross %l parameter
		}
		else if(TEST_FLOAT_TYPE(ptr))
		{
			p = dtostrf(*(float *)arg,2,F_PREC,&buff[0]);	// Convert float to string(used libm.a)
			while(*p)           // Check data pointer = 0?
    10a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	88 23       	and	r24, r24
    10aa:	f9 f6       	brne	.-66     	; 0x106a <lcd+0x27a>
					char_count = 0;
				}
				lcd_text(*p);             // Send data to LCD
	 			p++;                     // Increase address 1 time 
			}
			arg+=4;	// Cross address long type
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	04 96       	adiw	r24, 0x04	; 4
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
    10c0:	47 c0       	rjmp	.+142    	; 0x1150 <lcd+0x360>
		}
		else if(TEST_CLEAR_NEXT_TYPE(ptr))
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	fc 01       	movw	r30, r24
    10c8:	80 81       	ld	r24, Z
    10ca:	83 32       	cpi	r24, 0x23	; 35
    10cc:	81 f4       	brne	.+32     	; 0x10ee <lcd+0x2fe>
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	fc 01       	movw	r30, r24
    10d6:	80 81       	ld	r24, Z
    10d8:	83 36       	cpi	r24, 0x63	; 99
    10da:	49 f4       	brne	.+18     	; 0x10ee <lcd+0x2fe>
		{
			_lcd_clear_display = 1;	// Clear display next time 
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 07 02 	sts	0x0207, r24
			
			ptr++;	// Cross %l parameter
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	9c 83       	std	Y+4, r25	; 0x04
    10ea:	8b 83       	std	Y+3, r24	; 0x03
    10ec:	31 c0       	rjmp	.+98     	; 0x1150 <lcd+0x360>
		}
		else if(TEST_NEW_LINE_TYPE(ptr))
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	fc 01       	movw	r30, r24
    10f4:	80 81       	ld	r24, Z
    10f6:	83 32       	cpi	r24, 0x23	; 35
    10f8:	a9 f4       	brne	.+42     	; 0x1124 <lcd+0x334>
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	fc 01       	movw	r30, r24
    1102:	80 81       	ld	r24, Z
    1104:	8e 36       	cpi	r24, 0x6E	; 110
    1106:	71 f4       	brne	.+28     	; 0x1124 <lcd+0x334>
		{
			
			char_count = 17;	// Character start line 2 
    1108:	81 e1       	ldi	r24, 0x11	; 17
    110a:	8d 83       	std	Y+5, r24	; 0x05
			lcd_origin();
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
			lcd_command(0xC0);		
    1112:	80 ec       	ldi	r24, 0xC0	; 192
    1114:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
			ptr++;	// Cross %l parameter
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
    1122:	16 c0       	rjmp	.+44     	; 0x1150 <lcd+0x360>
		}
		else
		{
			char_count++;
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	8d 83       	std	Y+5, r24	; 0x05
			if(char_count==17)
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	81 31       	cpi	r24, 0x11	; 17
    112e:	31 f4       	brne	.+12     	; 0x113c <lcd+0x34c>
			{
				lcd_origin();
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
				lcd_command(0xC0);
    1136:	80 ec       	ldi	r24, 0xC0	; 192
    1138:	0e 94 ce 05 	call	0xb9c	; 0xb9c <lcd_command>
			}
			if(char_count>32)
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	81 32       	cpi	r24, 0x21	; 33
    1140:	08 f0       	brcs	.+2      	; 0x1144 <lcd+0x354>
			{
				char_count = 0;
    1142:	1d 82       	std	Y+5, r1	; 0x05
			}
			lcd_text(*ptr);             // Send data to LCD
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	fc 01       	movw	r30, r24
    114a:	80 81       	ld	r24, Z
    114c:	0e 94 0a 06 	call	0xc14	; 0xc14 <lcd_text>
	 	}
		
		ptr++;                      // Increase address 1 time 
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
		_lcd_clear_display = 0;
		lcd_clear();
	}
	arg += 2;	// Cross 2 time go to Origin of first parameter 
	
	while(*ptr)                 // Check data pointer = 0?
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	fc 01       	movw	r30, r24
    1160:	80 81       	ld	r24, Z
    1162:	88 23       	and	r24, r24
    1164:	09 f0       	breq	.+2      	; 0x1168 <lcd+0x378>
    1166:	74 ce       	rjmp	.-792    	; 0xe50 <lcd+0x60>
	 	}
		
		ptr++;                      // Increase address 1 time 
	}

}
    1168:	67 96       	adiw	r28, 0x17	; 23
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	08 95       	ret

0000117e <analog>:

#include <avr/io.h>
#define knob() analog(7)
#define KNOB knob
unsigned int analog(unsigned char channel)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <analog+0x6>
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int adc_val;
	ADMUX = 0x40; 
    118c:	87 e2       	ldi	r24, 0x27	; 39
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	20 e4       	ldi	r18, 0x40	; 64
    1192:	fc 01       	movw	r30, r24
    1194:	20 83       	st	Z, r18
	ADMUX |= channel;	// Sigle end mode
    1196:	87 e2       	ldi	r24, 0x27	; 39
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	27 e2       	ldi	r18, 0x27	; 39
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	f9 01       	movw	r30, r18
    11a0:	30 81       	ld	r19, Z
    11a2:	2b 81       	ldd	r18, Y+3	; 0x03
    11a4:	23 2b       	or	r18, r19
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
	ADCSRA = 0xC6;
    11aa:	86 e2       	ldi	r24, 0x26	; 38
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	26 ec       	ldi	r18, 0xC6	; 198
    11b0:	fc 01       	movw	r30, r24
    11b2:	20 83       	st	Z, r18
	while((ADCSRA & (1<<ADSC)));
    11b4:	00 00       	nop
    11b6:	86 e2       	ldi	r24, 0x26	; 38
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	fc 01       	movw	r30, r24
    11bc:	80 81       	ld	r24, Z
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	80 74       	andi	r24, 0x40	; 64
    11c4:	90 70       	andi	r25, 0x00	; 0
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	b1 f7       	brne	.-20     	; 0x11b6 <analog+0x38>
	adc_val = ADCL; 
    11ca:	84 e2       	ldi	r24, 0x24	; 36
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	fc 01       	movw	r30, r24
    11d0:	80 81       	ld	r24, Z
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	9a 83       	std	Y+2, r25	; 0x02
    11d8:	89 83       	std	Y+1, r24	; 0x01
	adc_val += (ADCH*256);
    11da:	85 e2       	ldi	r24, 0x25	; 37
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	fc 01       	movw	r30, r24
    11e0:	80 81       	ld	r24, Z
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	98 2f       	mov	r25, r24
    11e8:	88 27       	eor	r24, r24
    11ea:	29 81       	ldd	r18, Y+1	; 0x01
    11ec:	3a 81       	ldd	r19, Y+2	; 0x02
    11ee:	82 0f       	add	r24, r18
    11f0:	93 1f       	adc	r25, r19
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
	return(adc_val);
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <__vector_4>:
						};



SIGNAL (SIG_OVERFLOW2) // Interval 5 ms
{
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	2f 93       	push	r18
    1212:	3f 93       	push	r19
    1214:	4f 93       	push	r20
    1216:	5f 93       	push	r21
    1218:	6f 93       	push	r22
    121a:	7f 93       	push	r23
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	af 93       	push	r26
    1222:	bf 93       	push	r27
    1224:	ef 93       	push	r30
    1226:	ff 93       	push	r31
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 178;	// Reload interval 5 ms(TCNT2 = 178)  
    1230:	84 e4       	ldi	r24, 0x44	; 68
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	22 eb       	ldi	r18, 0xB2	; 178
    1236:	fc 01       	movw	r30, r24
    1238:	20 83       	st	Z, r18
	
		if(seg_i>round_count)	// Counter loop
    123a:	90 91 08 02 	lds	r25, 0x0208
    123e:	80 91 60 00 	lds	r24, 0x0060
    1242:	89 17       	cp	r24, r25
    1244:	10 f4       	brcc	.+4      	; 0x124a <__vector_4+0x44>
		{
			seg_i=0;
    1246:	10 92 08 02 	sts	0x0208, r1
		}
		
		if(segment_ini)
    124a:	80 91 09 02 	lds	r24, 0x0209
    124e:	88 23       	and	r24, r24
    1250:	09 f4       	brne	.+2      	; 0x1254 <__vector_4+0x4e>
    1252:	70 c1       	rjmp	.+736    	; 0x1534 <__vector_4+0x32e>
		{
		
			if(led_ini==1)
    1254:	80 91 0a 02 	lds	r24, 0x020A
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	21 f4       	brne	.+8      	; 0x1264 <__vector_4+0x5e>
			{
				DIGIT5(0);	// Not arrow LED display on task SEGMENT
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
			}
			if(seg_i==0)		// Digit 1
    1264:	80 91 08 02 	lds	r24, 0x0208
    1268:	88 23       	and	r24, r24
    126a:	09 f0       	breq	.+2      	; 0x126e <__vector_4+0x68>
    126c:	47 c0       	rjmp	.+142    	; 0x12fc <__vector_4+0xf6>
			{
				if(segment_dat>9999)
    126e:	80 91 0b 02 	lds	r24, 0x020B
    1272:	90 91 0c 02 	lds	r25, 0x020C
    1276:	f7 e2       	ldi	r31, 0x27	; 39
    1278:	80 31       	cpi	r24, 0x10	; 16
    127a:	9f 07       	cpc	r25, r31
    127c:	30 f0       	brcs	.+12     	; 0x128a <__vector_4+0x84>
					PORTC = 0x02;	// Display "-" because overflow
    127e:	85 e3       	ldi	r24, 0x35	; 53
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	22 e0       	ldi	r18, 0x02	; 2
    1284:	fc 01       	movw	r30, r24
    1286:	20 83       	st	Z, r18
    1288:	28 c0       	rjmp	.+80     	; 0x12da <__vector_4+0xd4>
				else
				{
					if(_segment_dot==1)
    128a:	80 91 0e 02 	lds	r24, 0x020E
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	99 f4       	brne	.+38     	; 0x12b8 <__vector_4+0xb2>
						PORTC = num[segment_dat%10] | _DOT;
    1292:	25 e3       	ldi	r18, 0x35	; 53
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	80 91 0b 02 	lds	r24, 0x020B
    129a:	90 91 0c 02 	lds	r25, 0x020C
    129e:	4a e0       	ldi	r20, 0x0A	; 10
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	ba 01       	movw	r22, r20
    12a4:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    12a8:	8f 59       	subi	r24, 0x9F	; 159
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	fc 01       	movw	r30, r24
    12ae:	80 81       	ld	r24, Z
    12b0:	81 60       	ori	r24, 0x01	; 1
    12b2:	f9 01       	movw	r30, r18
    12b4:	80 83       	st	Z, r24
    12b6:	11 c0       	rjmp	.+34     	; 0x12da <__vector_4+0xd4>
					else
						PORTC = num[segment_dat%10];
    12b8:	25 e3       	ldi	r18, 0x35	; 53
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	80 91 0b 02 	lds	r24, 0x020B
    12c0:	90 91 0c 02 	lds	r25, 0x020C
    12c4:	4a e0       	ldi	r20, 0x0A	; 10
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	ba 01       	movw	r22, r20
    12ca:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    12ce:	8f 59       	subi	r24, 0x9F	; 159
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	fc 01       	movw	r30, r24
    12d4:	80 81       	ld	r24, Z
    12d6:	f9 01       	movw	r30, r18
    12d8:	80 83       	st	Z, r24
				}
				DIGIT4(1);
    12da:	84 e0       	ldi	r24, 0x04	; 4
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT3(0);
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT2(0);
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT1(0);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
    12fa:	1c c1       	rjmp	.+568    	; 0x1534 <__vector_4+0x32e>
			}
			else if(seg_i==1)	// Digit 2
    12fc:	80 91 08 02 	lds	r24, 0x0208
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	09 f0       	breq	.+2      	; 0x1306 <__vector_4+0x100>
    1304:	55 c0       	rjmp	.+170    	; 0x13b0 <__vector_4+0x1aa>
			{
				if(segment_dat>9999)
    1306:	80 91 0b 02 	lds	r24, 0x020B
    130a:	90 91 0c 02 	lds	r25, 0x020C
    130e:	f7 e2       	ldi	r31, 0x27	; 39
    1310:	80 31       	cpi	r24, 0x10	; 16
    1312:	9f 07       	cpc	r25, r31
    1314:	30 f0       	brcs	.+12     	; 0x1322 <__vector_4+0x11c>
					PORTC = 0x02;	// Display "-" because overflow
    1316:	85 e3       	ldi	r24, 0x35	; 53
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	22 e0       	ldi	r18, 0x02	; 2
    131c:	fc 01       	movw	r30, r24
    131e:	20 83       	st	Z, r18
    1320:	36 c0       	rjmp	.+108    	; 0x138e <__vector_4+0x188>
				else
				{
					if(_segment_dot==2)
    1322:	80 91 0e 02 	lds	r24, 0x020E
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	d1 f4       	brne	.+52     	; 0x135e <__vector_4+0x158>
						PORTC = num[(segment_dat%100)/10] | _DOT;
    132a:	25 e3       	ldi	r18, 0x35	; 53
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	80 91 0b 02 	lds	r24, 0x020B
    1332:	90 91 0c 02 	lds	r25, 0x020C
    1336:	44 e6       	ldi	r20, 0x64	; 100
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	ba 01       	movw	r22, r20
    133c:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    1340:	4a e0       	ldi	r20, 0x0A	; 10
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	ba 01       	movw	r22, r20
    1346:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    134a:	ab 01       	movw	r20, r22
    134c:	ca 01       	movw	r24, r20
    134e:	8f 59       	subi	r24, 0x9F	; 159
    1350:	9f 4f       	sbci	r25, 0xFF	; 255
    1352:	fc 01       	movw	r30, r24
    1354:	80 81       	ld	r24, Z
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	f9 01       	movw	r30, r18
    135a:	80 83       	st	Z, r24
    135c:	18 c0       	rjmp	.+48     	; 0x138e <__vector_4+0x188>
					else
						PORTC = num[(segment_dat%100)/10];
    135e:	25 e3       	ldi	r18, 0x35	; 53
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	80 91 0b 02 	lds	r24, 0x020B
    1366:	90 91 0c 02 	lds	r25, 0x020C
    136a:	44 e6       	ldi	r20, 0x64	; 100
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	ba 01       	movw	r22, r20
    1370:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    1374:	4a e0       	ldi	r20, 0x0A	; 10
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	ba 01       	movw	r22, r20
    137a:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    137e:	ab 01       	movw	r20, r22
    1380:	ca 01       	movw	r24, r20
    1382:	8f 59       	subi	r24, 0x9F	; 159
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	fc 01       	movw	r30, r24
    1388:	80 81       	ld	r24, Z
    138a:	f9 01       	movw	r30, r18
    138c:	80 83       	st	Z, r24
				}
				DIGIT4(0);
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT3(1);
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	61 e0       	ldi	r22, 0x01	; 1
    139a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT2(0);
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT1(0);
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
    13ae:	c2 c0       	rjmp	.+388    	; 0x1534 <__vector_4+0x32e>
				
			}
			else if(seg_i==2)	// Digit 3
    13b0:	80 91 08 02 	lds	r24, 0x0208
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	09 f0       	breq	.+2      	; 0x13ba <__vector_4+0x1b4>
    13b8:	55 c0       	rjmp	.+170    	; 0x1464 <__vector_4+0x25e>
			{
				if(segment_dat>9999)
    13ba:	80 91 0b 02 	lds	r24, 0x020B
    13be:	90 91 0c 02 	lds	r25, 0x020C
    13c2:	f7 e2       	ldi	r31, 0x27	; 39
    13c4:	80 31       	cpi	r24, 0x10	; 16
    13c6:	9f 07       	cpc	r25, r31
    13c8:	30 f0       	brcs	.+12     	; 0x13d6 <__vector_4+0x1d0>
					PORTC = 0x02;	// Display "-" because overflow
    13ca:	85 e3       	ldi	r24, 0x35	; 53
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	22 e0       	ldi	r18, 0x02	; 2
    13d0:	fc 01       	movw	r30, r24
    13d2:	20 83       	st	Z, r18
    13d4:	36 c0       	rjmp	.+108    	; 0x1442 <__vector_4+0x23c>
				else
				{
					if(_segment_dot==3)
    13d6:	80 91 0e 02 	lds	r24, 0x020E
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	d1 f4       	brne	.+52     	; 0x1412 <__vector_4+0x20c>
						PORTC = num[(segment_dat%1000)/100] | _DOT;
    13de:	25 e3       	ldi	r18, 0x35	; 53
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	80 91 0b 02 	lds	r24, 0x020B
    13e6:	90 91 0c 02 	lds	r25, 0x020C
    13ea:	48 ee       	ldi	r20, 0xE8	; 232
    13ec:	53 e0       	ldi	r21, 0x03	; 3
    13ee:	ba 01       	movw	r22, r20
    13f0:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    13f4:	44 e6       	ldi	r20, 0x64	; 100
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	ba 01       	movw	r22, r20
    13fa:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    13fe:	ab 01       	movw	r20, r22
    1400:	ca 01       	movw	r24, r20
    1402:	8f 59       	subi	r24, 0x9F	; 159
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	fc 01       	movw	r30, r24
    1408:	80 81       	ld	r24, Z
    140a:	81 60       	ori	r24, 0x01	; 1
    140c:	f9 01       	movw	r30, r18
    140e:	80 83       	st	Z, r24
    1410:	18 c0       	rjmp	.+48     	; 0x1442 <__vector_4+0x23c>
					else
						PORTC = num[(segment_dat%1000)/100];
    1412:	25 e3       	ldi	r18, 0x35	; 53
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	80 91 0b 02 	lds	r24, 0x020B
    141a:	90 91 0c 02 	lds	r25, 0x020C
    141e:	48 ee       	ldi	r20, 0xE8	; 232
    1420:	53 e0       	ldi	r21, 0x03	; 3
    1422:	ba 01       	movw	r22, r20
    1424:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    1428:	44 e6       	ldi	r20, 0x64	; 100
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	ba 01       	movw	r22, r20
    142e:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    1432:	ab 01       	movw	r20, r22
    1434:	ca 01       	movw	r24, r20
    1436:	8f 59       	subi	r24, 0x9F	; 159
    1438:	9f 4f       	sbci	r25, 0xFF	; 255
    143a:	fc 01       	movw	r30, r24
    143c:	80 81       	ld	r24, Z
    143e:	f9 01       	movw	r30, r18
    1440:	80 83       	st	Z, r24
				}
				DIGIT4(0);
    1442:	84 e0       	ldi	r24, 0x04	; 4
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT3(0);
    144a:	83 e0       	ldi	r24, 0x03	; 3
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT2(1);
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	61 e0       	ldi	r22, 0x01	; 1
    1456:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT1(0);
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
    1462:	68 c0       	rjmp	.+208    	; 0x1534 <__vector_4+0x32e>
			}
			else if(seg_i==3)	// Digit 4
    1464:	80 91 08 02 	lds	r24, 0x0208
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	09 f0       	breq	.+2      	; 0x146e <__vector_4+0x268>
    146c:	4b c0       	rjmp	.+150    	; 0x1504 <__vector_4+0x2fe>
			{
				if(segment_dat>9999)
    146e:	80 91 0b 02 	lds	r24, 0x020B
    1472:	90 91 0c 02 	lds	r25, 0x020C
    1476:	f7 e2       	ldi	r31, 0x27	; 39
    1478:	80 31       	cpi	r24, 0x10	; 16
    147a:	9f 07       	cpc	r25, r31
    147c:	30 f0       	brcs	.+12     	; 0x148a <__vector_4+0x284>
					PORTC = 0x02;	// Display "-" because overflow
    147e:	85 e3       	ldi	r24, 0x35	; 53
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	22 e0       	ldi	r18, 0x02	; 2
    1484:	fc 01       	movw	r30, r24
    1486:	20 83       	st	Z, r18
    1488:	2c c0       	rjmp	.+88     	; 0x14e2 <__vector_4+0x2dc>
				else
				{
					if(_segment_dot==4)
    148a:	80 91 0e 02 	lds	r24, 0x020E
    148e:	84 30       	cpi	r24, 0x04	; 4
    1490:	a9 f4       	brne	.+42     	; 0x14bc <__vector_4+0x2b6>
						PORTC = num[segment_dat/1000] | _DOT;
    1492:	25 e3       	ldi	r18, 0x35	; 53
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	80 91 0b 02 	lds	r24, 0x020B
    149a:	90 91 0c 02 	lds	r25, 0x020C
    149e:	48 ee       	ldi	r20, 0xE8	; 232
    14a0:	53 e0       	ldi	r21, 0x03	; 3
    14a2:	ba 01       	movw	r22, r20
    14a4:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    14a8:	ab 01       	movw	r20, r22
    14aa:	ca 01       	movw	r24, r20
    14ac:	8f 59       	subi	r24, 0x9F	; 159
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	fc 01       	movw	r30, r24
    14b2:	80 81       	ld	r24, Z
    14b4:	81 60       	ori	r24, 0x01	; 1
    14b6:	f9 01       	movw	r30, r18
    14b8:	80 83       	st	Z, r24
    14ba:	13 c0       	rjmp	.+38     	; 0x14e2 <__vector_4+0x2dc>
					else
						PORTC = num[segment_dat/1000];
    14bc:	25 e3       	ldi	r18, 0x35	; 53
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	80 91 0b 02 	lds	r24, 0x020B
    14c4:	90 91 0c 02 	lds	r25, 0x020C
    14c8:	48 ee       	ldi	r20, 0xE8	; 232
    14ca:	53 e0       	ldi	r21, 0x03	; 3
    14cc:	ba 01       	movw	r22, r20
    14ce:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    14d2:	ab 01       	movw	r20, r22
    14d4:	ca 01       	movw	r24, r20
    14d6:	8f 59       	subi	r24, 0x9F	; 159
    14d8:	9f 4f       	sbci	r25, 0xFF	; 255
    14da:	fc 01       	movw	r30, r24
    14dc:	80 81       	ld	r24, Z
    14de:	f9 01       	movw	r30, r18
    14e0:	80 83       	st	Z, r24
				}
				DIGIT4(0);
    14e2:	84 e0       	ldi	r24, 0x04	; 4
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT3(0);
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT2(0);
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT1(1);
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
    1502:	18 c0       	rjmp	.+48     	; 0x1534 <__vector_4+0x32e>
			}
			else if(seg_i==4) // Add on for test
    1504:	80 91 08 02 	lds	r24, 0x0208
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	a1 f4       	brne	.+40     	; 0x1534 <__vector_4+0x32e>
			{
		
				PORTC = 0;
    150c:	85 e3       	ldi	r24, 0x35	; 53
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	fc 01       	movw	r30, r24
    1512:	10 82       	st	Z, r1
				DIGIT4(0);
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT3(0);
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT2(0);
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
				DIGIT1(0);
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
			}
	}	
	
	if(seg_i==4 && led_ini==1)	// Led display
    1534:	80 91 08 02 	lds	r24, 0x0208
    1538:	84 30       	cpi	r24, 0x04	; 4
    153a:	f1 f4       	brne	.+60     	; 0x1578 <__vector_4+0x372>
    153c:	80 91 0a 02 	lds	r24, 0x020A
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	d1 f4       	brne	.+52     	; 0x1578 <__vector_4+0x372>
	{
		
		PORTC = led_dat;
    1544:	85 e3       	ldi	r24, 0x35	; 53
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	20 91 0d 02 	lds	r18, 0x020D
    154c:	fc 01       	movw	r30, r24
    154e:	20 83       	st	Z, r18
		DIGIT4(0);
    1550:	84 e0       	ldi	r24, 0x04	; 4
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
		DIGIT3(0);
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
		DIGIT2(0);
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
		DIGIT1(0);
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
		DIGIT5(1);
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
	}
	
	seg_i++;
    1578:	80 91 08 02 	lds	r24, 0x0208
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	80 93 08 02 	sts	0x0208, r24
		
}
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

000015a8 <segment_init>:

void segment_init() // Config. and Start up timer 0 
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
   	DDRC = 0xFF; // Port C output only
    15b0:	84 e3       	ldi	r24, 0x34	; 52
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	2f ef       	ldi	r18, 0xFF	; 255
    15b6:	fc 01       	movw	r30, r24
    15b8:	20 83       	st	Z, r18
	//DDRB = 0x1F; // Bit control set output
	//DDRB = 0;	
	TCCR2 |= (1<<CS22)|(1<<CS21)|(1<<CS20); 	// Prescaler 1024,16 MHz,1 MC = 1024/16M = 64us/count 
    15ba:	85 e4       	ldi	r24, 0x45	; 69
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	25 e4       	ldi	r18, 0x45	; 69
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	f9 01       	movw	r30, r18
    15c4:	20 81       	ld	r18, Z
    15c6:	27 60       	ori	r18, 0x07	; 7
    15c8:	fc 01       	movw	r30, r24
    15ca:	20 83       	st	Z, r18
	TIFR |= 1<<TOV2; 	//Clear TOV2 / clear
    15cc:	88 e5       	ldi	r24, 0x58	; 88
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	28 e5       	ldi	r18, 0x58	; 88
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	f9 01       	movw	r30, r18
    15d6:	20 81       	ld	r18, Z
    15d8:	20 64       	ori	r18, 0x40	; 64
    15da:	fc 01       	movw	r30, r24
    15dc:	20 83       	st	Z, r18
	TIMSK |= 1<<TOIE2; 	//Enable Timer2 Overflow Interrupt
    15de:	89 e5       	ldi	r24, 0x59	; 89
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	29 e5       	ldi	r18, 0x59	; 89
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	f9 01       	movw	r30, r18
    15e8:	20 81       	ld	r18, Z
    15ea:	20 64       	ori	r18, 0x40	; 64
    15ec:	fc 01       	movw	r30, r24
    15ee:	20 83       	st	Z, r18
	TCNT2 = 178;	// Interval 5 ms  	
    15f0:	84 e4       	ldi	r24, 0x44	; 68
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	22 eb       	ldi	r18, 0xB2	; 178
    15f6:	fc 01       	movw	r30, r24
    15f8:	20 83       	st	Z, r18
    sei();			// Enable all interrupt
    15fa:	78 94       	sei
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <segment>:
void segment(unsigned int val)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <segment+0x6>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
	if(segment_ini==0)
    1610:	80 91 09 02 	lds	r24, 0x0209
    1614:	88 23       	and	r24, r24
    1616:	29 f4       	brne	.+10     	; 0x1622 <segment+0x20>
	{
		segment_ini=1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 93 09 02 	sts	0x0209, r24
		segment_init();
    161e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <segment_init>
	}
	segment_dat = val;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	90 93 0c 02 	sts	0x020C, r25
    162a:	80 93 0b 02 	sts	0x020B, r24
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <segment_dot>:
void segment_dot(unsigned char _dot_val)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	89 83       	std	Y+1, r24	; 0x01
	if(segment_ini==0)
    1644:	80 91 09 02 	lds	r24, 0x0209
    1648:	88 23       	and	r24, r24
    164a:	29 f4       	brne	.+10     	; 0x1656 <segment_dot+0x1e>
	{
		segment_ini=1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	80 93 09 02 	sts	0x0209, r24
		segment_init();
    1652:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <segment_init>
	}
	_segment_dot = _dot_val;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	80 93 0e 02 	sts	0x020E, r24
}
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <segment_off>:
void segment_off()
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	if(led_ini==0)
    166c:	80 91 0a 02 	lds	r24, 0x020A
    1670:	88 23       	and	r24, r24
    1672:	49 f4       	brne	.+18     	; 0x1686 <segment_off+0x22>
	{
		TIMSK &= ~(1<<TOIE2); 	//Disable Timer2 Overflow Interrupt(Disable 7-segment for display)
    1674:	89 e5       	ldi	r24, 0x59	; 89
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	29 e5       	ldi	r18, 0x59	; 89
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	f9 01       	movw	r30, r18
    167e:	20 81       	ld	r18, Z
    1680:	2f 7b       	andi	r18, 0xBF	; 191
    1682:	fc 01       	movw	r30, r24
    1684:	20 83       	st	Z, r18
	}
	round_count = 4;	// Count for led
    1686:	84 e0       	ldi	r24, 0x04	; 4
    1688:	80 93 60 00 	sts	0x0060, r24
	segment_ini=0;	// Restore before start up 7-segment
    168c:	10 92 09 02 	sts	0x0209, r1
	DIGIT4(0);	// Disable digit 1
    1690:	84 e0       	ldi	r24, 0x04	; 4
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
	DIGIT3(0);	// Disable digit 2
    1698:	83 e0       	ldi	r24, 0x03	; 3
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
	DIGIT2(0);	// Disable digit 3
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
	DIGIT1(0);	// Disable digit 4
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <led8>:
void led8(unsigned char _dat)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	0f 92       	push	r0
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	89 83       	std	Y+1, r24	; 0x01
	round_count = 4;	// Count for led
    16c2:	84 e0       	ldi	r24, 0x04	; 4
    16c4:	80 93 60 00 	sts	0x0060, r24
	if(led_ini==0)
    16c8:	80 91 0a 02 	lds	r24, 0x020A
    16cc:	88 23       	and	r24, r24
    16ce:	29 f4       	brne	.+10     	; 0x16da <led8+0x24>
	{
		led_ini=1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	80 93 0a 02 	sts	0x020A, r24
		segment_init();
    16d6:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <segment_init>
	}
	led_dat = _dat;	
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	80 93 0d 02 	sts	0x020D, r24
}
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <led8_off>:
void led8_off()
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
	if(segment_ini==0)
    16f0:	80 91 09 02 	lds	r24, 0x0209
    16f4:	88 23       	and	r24, r24
    16f6:	49 f4       	brne	.+18     	; 0x170a <led8_off+0x22>
	{
		TIMSK &= ~(1<<TOIE2); 	//Disable Timer2 Overflow Interrupt(Disable 7-segment for display)
    16f8:	89 e5       	ldi	r24, 0x59	; 89
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	29 e5       	ldi	r18, 0x59	; 89
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	f9 01       	movw	r30, r18
    1702:	20 81       	ld	r18, Z
    1704:	2f 7b       	andi	r18, 0xBF	; 191
    1706:	fc 01       	movw	r30, r24
    1708:	20 83       	st	Z, r18
	}
	round_count = 3;	// Count for Segment 1-4 only
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	80 93 60 00 	sts	0x0060, r24
	led_ini = 0;
    1710:	10 92 0a 02 	sts	0x020A, r1
	DIGIT5(0);
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	0e 94 fd 02 	call	0x5fa	; 0x5fa <out_b>
}
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <__vector_9>:
/**********************************************************************************/

unsigned long _ms=0;

SIGNAL (SIG_OVERFLOW0) // Interval 1 ms
{
    1722:	1f 92       	push	r1
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	0f 92       	push	r0
    172a:	11 24       	eor	r1, r1
    172c:	2f 93       	push	r18
    172e:	8f 93       	push	r24
    1730:	9f 93       	push	r25
    1732:	af 93       	push	r26
    1734:	bf 93       	push	r27
    1736:	ef 93       	push	r30
    1738:	ff 93       	push	r31
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 6;	// Interval 1 ms  
    1742:	82 e5       	ldi	r24, 0x52	; 82
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	26 e0       	ldi	r18, 0x06	; 6
    1748:	fc 01       	movw	r30, r24
    174a:	20 83       	st	Z, r18
	_ms++;
    174c:	80 91 0f 02 	lds	r24, 0x020F
    1750:	90 91 10 02 	lds	r25, 0x0210
    1754:	a0 91 11 02 	lds	r26, 0x0211
    1758:	b0 91 12 02 	lds	r27, 0x0212
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	a1 1d       	adc	r26, r1
    1760:	b1 1d       	adc	r27, r1
    1762:	80 93 0f 02 	sts	0x020F, r24
    1766:	90 93 10 02 	sts	0x0210, r25
    176a:	a0 93 11 02 	sts	0x0211, r26
    176e:	b0 93 12 02 	sts	0x0212, r27
	
}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	ff 91       	pop	r31
    1778:	ef 91       	pop	r30
    177a:	bf 91       	pop	r27
    177c:	af 91       	pop	r26
    177e:	9f 91       	pop	r25
    1780:	8f 91       	pop	r24
    1782:	2f 91       	pop	r18
    1784:	0f 90       	pop	r0
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	0f 90       	pop	r0
    178a:	1f 90       	pop	r1
    178c:	18 95       	reti

0000178e <timer_start>:
void timer_start(void) // Config. and Start up timer 0 
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
   
	TCCR0 = (1<<CS01)|(1<<CS00); 	// Prescaler 64,16 MHz,1 MC = 64/16M = 4us/count 
    1796:	83 e5       	ldi	r24, 0x53	; 83
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	23 e0       	ldi	r18, 0x03	; 3
    179c:	fc 01       	movw	r30, r24
    179e:	20 83       	st	Z, r18
	TIFR |= 1<<TOV0; 	//Clear TOV0 / clear
    17a0:	88 e5       	ldi	r24, 0x58	; 88
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	28 e5       	ldi	r18, 0x58	; 88
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	f9 01       	movw	r30, r18
    17aa:	20 81       	ld	r18, Z
    17ac:	21 60       	ori	r18, 0x01	; 1
    17ae:	fc 01       	movw	r30, r24
    17b0:	20 83       	st	Z, r18
	TIMSK |= 1<<TOIE0; 	//Enable Timer0 Overflow Interrupt
    17b2:	89 e5       	ldi	r24, 0x59	; 89
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	29 e5       	ldi	r18, 0x59	; 89
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	f9 01       	movw	r30, r18
    17bc:	20 81       	ld	r18, Z
    17be:	21 60       	ori	r18, 0x01	; 1
    17c0:	fc 01       	movw	r30, r24
    17c2:	20 83       	st	Z, r18
	TCNT0 = 6;	// Interval 1 ms  	
    17c4:	82 e5       	ldi	r24, 0x52	; 82
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	26 e0       	ldi	r18, 0x06	; 6
    17ca:	fc 01       	movw	r30, r24
    17cc:	20 83       	st	Z, r18
    
	sei();	// Enable all interrupt
    17ce:	78 94       	sei
	_ms = 0;
    17d0:	10 92 0f 02 	sts	0x020F, r1
    17d4:	10 92 10 02 	sts	0x0210, r1
    17d8:	10 92 11 02 	sts	0x0211, r1
    17dc:	10 92 12 02 	sts	0x0212, r1
}
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <timer_stop>:
void timer_stop()
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;		// Stop timer and 
    17ee:	83 e5       	ldi	r24, 0x53	; 83
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	fc 01       	movw	r30, r24
    17f4:	10 82       	st	Z, r1
	TCNT0 = 0;
    17f6:	82 e5       	ldi	r24, 0x52	; 82
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	fc 01       	movw	r30, r24
    17fc:	10 82       	st	Z, r1
	TIMSK &= ~_BV(TOIE0);	// Clear bit TOIE0
    17fe:	89 e5       	ldi	r24, 0x59	; 89
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	29 e5       	ldi	r18, 0x59	; 89
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	f9 01       	movw	r30, r18
    1808:	20 81       	ld	r18, Z
    180a:	2e 7f       	andi	r18, 0xFE	; 254
    180c:	fc 01       	movw	r30, r24
    180e:	20 83       	st	Z, r18
	_ms = 0;		// Clear time
    1810:	10 92 0f 02 	sts	0x020F, r1
    1814:	10 92 10 02 	sts	0x0210, r1
    1818:	10 92 11 02 	sts	0x0211, r1
    181c:	10 92 12 02 	sts	0x0212, r1
}
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <timer_pause>:
void timer_pause()
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;		// Stop timer and not clear time
    182e:	83 e5       	ldi	r24, 0x53	; 83
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	fc 01       	movw	r30, r24
    1834:	10 82       	st	Z, r1
}
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <timer_resume>:
void timer_resume()
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01)|(1<<CS00); 	// Prescaler 64,16 MHz,1 MC = 64/16M = 4us/count 
    1844:	83 e5       	ldi	r24, 0x53	; 83
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	23 e0       	ldi	r18, 0x03	; 3
    184a:	fc 01       	movw	r30, r24
    184c:	20 83       	st	Z, r18
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <msec>:
unsigned long msec()
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	return(_ms);	
    185c:	80 91 0f 02 	lds	r24, 0x020F
    1860:	90 91 10 02 	lds	r25, 0x0210
    1864:	a0 91 11 02 	lds	r26, 0x0211
    1868:	b0 91 12 02 	lds	r27, 0x0212
} 
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <sec>:
unsigned long sec()
{ 
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
	return(_ms/1000);	
    187e:	80 91 0f 02 	lds	r24, 0x020F
    1882:	90 91 10 02 	lds	r25, 0x0210
    1886:	a0 91 11 02 	lds	r26, 0x0211
    188a:	b0 91 12 02 	lds	r27, 0x0212
    188e:	28 ee       	ldi	r18, 0xE8	; 232
    1890:	33 e0       	ldi	r19, 0x03	; 3
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 43 18 	call	0x3086	; 0x3086 <__udivmodsi4>
    189e:	da 01       	movw	r26, r20
    18a0:	c9 01       	movw	r24, r18
} 
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <__vector_11>:


//#ifndef USE_EVEN_UART_REC
		
SIGNAL(SIG_UART_RECV) 
{ 	
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	_key = UDR;
    18c6:	8c e2       	ldi	r24, 0x2C	; 44
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	fc 01       	movw	r30, r24
    18cc:	80 81       	ld	r24, Z
    18ce:	80 93 14 02 	sts	0x0214, r24
	
}
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	ff 91       	pop	r31
    18d8:	ef 91       	pop	r30
    18da:	9f 91       	pop	r25
    18dc:	8f 91       	pop	r24
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <uart_set_baud>:
//#endif


void uart_set_baud(unsigned int baud) 
{
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <uart_set_baud+0xa>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01
	_baud = baud;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	90 93 6c 00 	sts	0x006C, r25
    1902:	80 93 6b 00 	sts	0x006B, r24
	uart_ini=1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	80 93 13 02 	sts	0x0213, r24
	// Set baud rate
	UBRRH = (unsigned int)(UART_BAUD_CALC(baud,F_OSC)>>8);
    190c:	00 e4       	ldi	r16, 0x40	; 64
    190e:	10 e0       	ldi	r17, 0x00	; 0
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	cc 01       	movw	r24, r24
    1916:	a0 e0       	ldi	r26, 0x00	; 0
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	aa 1f       	adc	r26, r26
    1920:	bb 1f       	adc	r27, r27
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	aa 1f       	adc	r26, r26
    1928:	bb 1f       	adc	r27, r27
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	aa 1f       	adc	r26, r26
    1930:	bb 1f       	adc	r27, r27
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	aa 1f       	adc	r26, r26
    1938:	bb 1f       	adc	r27, r27
    193a:	9c 01       	movw	r18, r24
    193c:	ad 01       	movw	r20, r26
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	94 e2       	ldi	r25, 0x24	; 36
    1942:	a4 ef       	ldi	r26, 0xF4	; 244
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 65 18 	call	0x30ca	; 0x30ca <__divmodsi4>
    194e:	da 01       	movw	r26, r20
    1950:	c9 01       	movw	r24, r18
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	a1 09       	sbc	r26, r1
    1956:	b1 09       	sbc	r27, r1
    1958:	89 2f       	mov	r24, r25
    195a:	9a 2f       	mov	r25, r26
    195c:	ab 2f       	mov	r26, r27
    195e:	bb 27       	eor	r27, r27
    1960:	a7 fd       	sbrc	r26, 7
    1962:	ba 95       	dec	r27
    1964:	f8 01       	movw	r30, r16
    1966:	80 83       	st	Z, r24
	UBRRL = (unsigned int)UART_BAUD_CALC(baud,F_OSC);
    1968:	09 e2       	ldi	r16, 0x29	; 41
    196a:	10 e0       	ldi	r17, 0x00	; 0
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	cc 01       	movw	r24, r24
    1972:	a0 e0       	ldi	r26, 0x00	; 0
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	aa 1f       	adc	r26, r26
    197c:	bb 1f       	adc	r27, r27
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	aa 1f       	adc	r26, r26
    1984:	bb 1f       	adc	r27, r27
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	aa 1f       	adc	r26, r26
    198c:	bb 1f       	adc	r27, r27
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	aa 1f       	adc	r26, r26
    1994:	bb 1f       	adc	r27, r27
    1996:	9c 01       	movw	r18, r24
    1998:	ad 01       	movw	r20, r26
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	94 e2       	ldi	r25, 0x24	; 36
    199e:	a4 ef       	ldi	r26, 0xF4	; 244
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 65 18 	call	0x30ca	; 0x30ca <__divmodsi4>
    19aa:	da 01       	movw	r26, r20
    19ac:	c9 01       	movw	r24, r18
    19ae:	81 50       	subi	r24, 0x01	; 1
    19b0:	f8 01       	movw	r30, r16
    19b2:	80 83       	st	Z, r24

	// Enable receiver and transmitter; enable RX interrupt
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    19b4:	8a e2       	ldi	r24, 0x2A	; 42
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	2a e2       	ldi	r18, 0x2A	; 42
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	f9 01       	movw	r30, r18
    19be:	20 81       	ld	r18, Z
    19c0:	28 69       	ori	r18, 0x98	; 152
    19c2:	fc 01       	movw	r30, r24
    19c4:	20 83       	st	Z, r18

	// Asynchronous 8N1
	UCSRC |= (1 << URSEL) | (3 << UCSZ0);
    19c6:	80 e4       	ldi	r24, 0x40	; 64
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	20 e4       	ldi	r18, 0x40	; 64
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	f9 01       	movw	r30, r18
    19d0:	20 81       	ld	r18, Z
    19d2:	26 68       	ori	r18, 0x86	; 134
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
	sei();  // enable interrupts
    19d8:	78 94       	sei

}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	08 95       	ret

000019e8 <uart_gets_baud>:

unsigned int uart_gets_baud()
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
	return(_baud);
    19f0:	80 91 6b 00 	lds	r24, 0x006B
    19f4:	90 91 6c 00 	lds	r25, 0x006C
}
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <uart_putc>:

void uart_putc(unsigned char c) 
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	0f 92       	push	r0
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & (1 << UDRE)));
    1a0a:	00 00       	nop
    1a0c:	8b e2       	ldi	r24, 0x2B	; 43
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	fc 01       	movw	r30, r24
    1a12:	80 81       	ld	r24, Z
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	80 72       	andi	r24, 0x20	; 32
    1a1a:	90 70       	andi	r25, 0x00	; 0
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	b1 f3       	breq	.-20     	; 0x1a0c <uart_putc+0xe>
	UDR = c;    // send character
    1a20:	8c e2       	ldi	r24, 0x2C	; 44
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	29 81       	ldd	r18, Y+1	; 0x01
    1a26:	fc 01       	movw	r30, r24
    1a28:	20 83       	st	Z, r18
	
}
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <uart_puts>:

void uart_puts(char *s) 
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <uart_puts+0x6>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	while (*s) 
    1a40:	0b c0       	rjmp	.+22     	; 0x1a58 <uart_puts+0x26>
	{
		uart_putc(*s);
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	fc 01       	movw	r30, r24
    1a48:	80 81       	ld	r24, Z
    1a4a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <uart_putc>
		s++;
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
	
}

void uart_puts(char *s) 
{
	while (*s) 
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	80 81       	ld	r24, Z
    1a60:	88 23       	and	r24, r24
    1a62:	79 f7       	brne	.-34     	; 0x1a42 <uart_puts+0x10>
	{
		uart_putc(*s);
		s++;
	}
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <uart>:
void uart(char *p,...) 
{
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	66 97       	sbiw	r28, 0x16	; 22
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
	char *arg,**pp;	// Poter of point
	char *ptr,buff[16]/*,s_arg_offset=0,s_arg_i=0*/;
	pp = &p;
    1a86:	8d e1       	ldi	r24, 0x1D	; 29
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	8c 0f       	add	r24, r28
    1a8c:	9d 1f       	adc	r25, r29
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	8d 83       	std	Y+5, r24	; 0x05
	ptr = p;	// Copy address
    1a92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a96:	9c 83       	std	Y+4, r25	; 0x04
    1a98:	8b 83       	std	Y+3, r24	; 0x03
	arg = pp;	// Copy address of p point	
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	
	arg += 2;	// Cross 2 time go to Origin of first parameter 
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa6:	02 96       	adiw	r24, 0x02	; 2
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	89 83       	std	Y+1, r24	; 0x01
	
	if(uart_ini==0)
    1aac:	80 91 13 02 	lds	r24, 0x0213
    1ab0:	88 23       	and	r24, r24
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <uart+0x48>
    1ab4:	df c0       	rjmp	.+446    	; 0x1c74 <uart+0x206>
	{
		uart_ini=1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 13 02 	sts	0x0213, r24
		uart_set_baud(_baud);
    1abc:	80 91 6b 00 	lds	r24, 0x006B
    1ac0:	90 91 6c 00 	lds	r25, 0x006C
    1ac4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uart_set_baud>
	}
		
	while(*ptr)                 // Check data pointer = 0?
    1ac8:	d6 c0       	rjmp	.+428    	; 0x1c76 <uart+0x208>
	{
	 	if(TEST_CHAR_TYPE(ptr))
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	fc 01       	movw	r30, r24
    1ad0:	80 81       	ld	r24, Z
    1ad2:	85 32       	cpi	r24, 0x25	; 37
    1ad4:	01 f5       	brne	.+64     	; 0x1b16 <uart+0xa8>
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	fc 01       	movw	r30, r24
    1ade:	80 81       	ld	r24, Z
    1ae0:	83 36       	cpi	r24, 0x63	; 99
    1ae2:	39 f0       	breq	.+14     	; 0x1af2 <uart+0x84>
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	fc 01       	movw	r30, r24
    1aec:	80 81       	ld	r24, Z
    1aee:	83 34       	cpi	r24, 0x43	; 67
    1af0:	91 f4       	brne	.+36     	; 0x1b16 <uart+0xa8>
		{
			uart_putc(toascii(*arg));
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	fc 01       	movw	r30, r24
    1af8:	80 81       	ld	r24, Z
    1afa:	8f 77       	andi	r24, 0x7F	; 127
    1afc:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <uart_putc>
			arg+=2;	// Cross address char type
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	02 96       	adiw	r24, 0x02	; 2
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
    1b14:	a9 c0       	rjmp	.+338    	; 0x1c68 <uart+0x1fa>
		}
		else if(TEST_INT_TYPE(ptr))
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	80 81       	ld	r24, Z
    1b1e:	85 32       	cpi	r24, 0x25	; 37
    1b20:	91 f5       	brne	.+100    	; 0x1b86 <uart+0x118>
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	fc 01       	movw	r30, r24
    1b2a:	80 81       	ld	r24, Z
    1b2c:	84 36       	cpi	r24, 0x64	; 100
    1b2e:	39 f0       	breq	.+14     	; 0x1b3e <uart+0xd0>
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 81       	ld	r24, Z
    1b3a:	84 34       	cpi	r24, 0x44	; 68
    1b3c:	21 f5       	brne	.+72     	; 0x1b86 <uart+0x118>
		{
			p = ltoa(*(int *)arg,&buff[0],10);
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	fc 01       	movw	r30, r24
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	aa 27       	eor	r26, r26
    1b4a:	97 fd       	sbrc	r25, 7
    1b4c:	a0 95       	com	r26
    1b4e:	ba 2f       	mov	r27, r26
    1b50:	9e 01       	movw	r18, r28
    1b52:	29 5f       	subi	r18, 0xF9	; 249
    1b54:	3f 4f       	sbci	r19, 0xFF	; 255
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	a9 01       	movw	r20, r18
    1b5c:	2a e0       	ldi	r18, 0x0A	; 10
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	0e 94 a2 18 	call	0x3144	; 0x3144 <ltoa>
    1b64:	9e 8f       	std	Y+30, r25	; 0x1e
    1b66:	8d 8f       	std	Y+29, r24	; 0x1d
			uart_puts(p);
    1b68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b6c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <uart_puts>
			arg+=2;	// Cross address int type
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	02 96       	adiw	r24, 0x02	; 2
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	8b 83       	std	Y+3, r24	; 0x03
    1b84:	71 c0       	rjmp	.+226    	; 0x1c68 <uart+0x1fa>
		}
		else if(TEST_LONG_TYPE(ptr))
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	80 81       	ld	r24, Z
    1b8e:	85 32       	cpi	r24, 0x25	; 37
    1b90:	81 f5       	brne	.+96     	; 0x1bf2 <uart+0x184>
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	fc 01       	movw	r30, r24
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8c 36       	cpi	r24, 0x6C	; 108
    1b9e:	39 f0       	breq	.+14     	; 0x1bae <uart+0x140>
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	80 81       	ld	r24, Z
    1baa:	8c 34       	cpi	r24, 0x4C	; 76
    1bac:	11 f5       	brne	.+68     	; 0x1bf2 <uart+0x184>
		{
			p = ltoa(*(long *)arg,&buff[0],10);
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	a2 81       	ldd	r26, Z+2	; 0x02
    1bba:	b3 81       	ldd	r27, Z+3	; 0x03
    1bbc:	9e 01       	movw	r18, r28
    1bbe:	29 5f       	subi	r18, 0xF9	; 249
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	a9 01       	movw	r20, r18
    1bc8:	2a e0       	ldi	r18, 0x0A	; 10
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	0e 94 a2 18 	call	0x3144	; 0x3144 <ltoa>
    1bd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd2:	8d 8f       	std	Y+29, r24	; 0x1d
			uart_puts(p);
    1bd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bd8:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <uart_puts>
			arg+=4;	// Cross address long type
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	04 96       	adiw	r24, 0x04	; 4
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	9c 83       	std	Y+4, r25	; 0x04
    1bee:	8b 83       	std	Y+3, r24	; 0x03
    1bf0:	3b c0       	rjmp	.+118    	; 0x1c68 <uart+0x1fa>
		}
		else if(TEST_FLOAT_TYPE(ptr))
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	80 81       	ld	r24, Z
    1bfa:	85 32       	cpi	r24, 0x25	; 37
    1bfc:	79 f5       	brne	.+94     	; 0x1c5c <uart+0x1ee>
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	fc 01       	movw	r30, r24
    1c06:	80 81       	ld	r24, Z
    1c08:	86 36       	cpi	r24, 0x66	; 102
    1c0a:	39 f0       	breq	.+14     	; 0x1c1a <uart+0x1ac>
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	fc 01       	movw	r30, r24
    1c14:	80 81       	ld	r24, Z
    1c16:	86 34       	cpi	r24, 0x46	; 70
    1c18:	09 f5       	brne	.+66     	; 0x1c5c <uart+0x1ee>
		{
			p = dtostrf(*(float *)arg,2,F_PREC,&buff[0]);	// Convert float to string(used libm.a)
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1e:	fc 01       	movw	r30, r24
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	a2 81       	ldd	r26, Z+2	; 0x02
    1c26:	b3 81       	ldd	r27, Z+3	; 0x03
    1c28:	fe 01       	movw	r30, r28
    1c2a:	37 96       	adiw	r30, 0x07	; 7
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	42 e0       	ldi	r20, 0x02	; 2
    1c32:	23 e0       	ldi	r18, 0x03	; 3
    1c34:	8f 01       	movw	r16, r30
    1c36:	0e 94 80 18 	call	0x3100	; 0x3100 <dtostrf>
    1c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3c:	8d 8f       	std	Y+29, r24	; 0x1d
			uart_puts(p);
    1c3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c42:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <uart_puts>
			arg+=4;	// Cross address long type
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	04 96       	adiw	r24, 0x04	; 4
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	06 c0       	rjmp	.+12     	; 0x1c68 <uart+0x1fa>
		}
		else
		{
			uart_putc(*ptr);             // Send data to LCD
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	fc 01       	movw	r30, r24
    1c62:	80 81       	ld	r24, Z
    1c64:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <uart_putc>
	 	}
		
		ptr++;                      // Increase address 1 time 
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	9c 83       	std	Y+4, r25	; 0x04
    1c70:	8b 83       	std	Y+3, r24	; 0x03
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <uart+0x208>
	{
		uart_ini=1;
		uart_set_baud(_baud);
	}
		
	while(*ptr)                 // Check data pointer = 0?
    1c74:	00 00       	nop
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	80 81       	ld	r24, Z
    1c7e:	88 23       	and	r24, r24
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <uart+0x216>
    1c82:	23 cf       	rjmp	.-442    	; 0x1aca <uart+0x5c>
			uart_putc(*ptr);             // Send data to LCD
	 	}
		
		ptr++;                      // Increase address 1 time 
	}
}
    1c84:	66 96       	adiw	r28, 0x16	; 22
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	08 95       	ret

00001c9a <uart_getkey>:
char uart_getkey()
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	0f 92       	push	r0
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	char _c=0;
    1ca4:	19 82       	std	Y+1, r1	; 0x01
	if(uart_ini==0)
    1ca6:	80 91 13 02 	lds	r24, 0x0213
    1caa:	88 23       	and	r24, r24
    1cac:	51 f4       	brne	.+20     	; 0x1cc2 <uart_getkey+0x28>
	{
		uart_ini=1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 13 02 	sts	0x0213, r24
		uart_set_baud(_baud);
    1cb4:	80 91 6b 00 	lds	r24, 0x006B
    1cb8:	90 91 6c 00 	lds	r25, 0x006C
    1cbc:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uart_set_baud>
	}
	while(!_key);
    1cc0:	01 c0       	rjmp	.+2      	; 0x1cc4 <uart_getkey+0x2a>
    1cc2:	00 00       	nop
    1cc4:	80 91 14 02 	lds	r24, 0x0214
    1cc8:	88 23       	and	r24, r24
    1cca:	e1 f3       	breq	.-8      	; 0x1cc4 <uart_getkey+0x2a>
	_c = _key;
    1ccc:	80 91 14 02 	lds	r24, 0x0214
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	_key = 0;
    1cd2:	10 92 14 02 	sts	0x0214, r1
	return(_c);	
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <__vector_8>:
#define all 3
unsigned char _duty1=0,_duty2=0; 
char pwm_ini =0;

SIGNAL (SIG_OVERFLOW1) // Interval 1 ms
{
    1ce0:	1f 92       	push	r1
    1ce2:	0f 92       	push	r0
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	0f 92       	push	r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	2f 93       	push	r18
    1cec:	8f 93       	push	r24
    1cee:	9f 93       	push	r25
    1cf0:	ef 93       	push	r30
    1cf2:	ff 93       	push	r31
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
	OCR1AL = _duty1; 
    1cfc:	8a e4       	ldi	r24, 0x4A	; 74
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	20 91 15 02 	lds	r18, 0x0215
    1d04:	fc 01       	movw	r30, r24
    1d06:	20 83       	st	Z, r18
	OCR1BL = _duty2;
    1d08:	88 e4       	ldi	r24, 0x48	; 72
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	20 91 16 02 	lds	r18, 0x0216
    1d10:	fc 01       	movw	r30, r24
    1d12:	20 83       	st	Z, r18
}
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	ff 91       	pop	r31
    1d1a:	ef 91       	pop	r30
    1d1c:	9f 91       	pop	r25
    1d1e:	8f 91       	pop	r24
    1d20:	2f 91       	pop	r18
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <pwm_init>:

void pwm_init()
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |= (1<<WGM10);
    1d34:	8f e4       	ldi	r24, 0x4F	; 79
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	2f e4       	ldi	r18, 0x4F	; 79
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	f9 01       	movw	r30, r18
    1d3e:	20 81       	ld	r18, Z
    1d40:	21 60       	ori	r18, 0x01	; 1
    1d42:	fc 01       	movw	r30, r24
    1d44:	20 83       	st	Z, r18
	TCCR1B = (1<<CS12)|(1<<CS10)|(1<<WGM12);
    1d46:	8e e4       	ldi	r24, 0x4E	; 78
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	2d e0       	ldi	r18, 0x0D	; 13
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	20 83       	st	Z, r18
	TIFR |= 1<<TOV1; 	//Clear TOV0 / clear
    1d50:	88 e5       	ldi	r24, 0x58	; 88
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	28 e5       	ldi	r18, 0x58	; 88
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	f9 01       	movw	r30, r18
    1d5a:	20 81       	ld	r18, Z
    1d5c:	24 60       	ori	r18, 0x04	; 4
    1d5e:	fc 01       	movw	r30, r24
    1d60:	20 83       	st	Z, r18
	TIMSK |= 1<<TOIE1; 	//Enable Timer0 Overflow Interrupt
    1d62:	89 e5       	ldi	r24, 0x59	; 89
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	29 e5       	ldi	r18, 0x59	; 89
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	f9 01       	movw	r30, r18
    1d6c:	20 81       	ld	r18, Z
    1d6e:	24 60       	ori	r18, 0x04	; 4
    1d70:	fc 01       	movw	r30, r24
    1d72:	20 83       	st	Z, r18
	//timer_enable_int(_BV(TOIE1));
	sei();
    1d74:	78 94       	sei
}
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <pwm>:
void pwm(char channel,unsigned int duty)
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <pwm+0x6>
    1d82:	0f 92       	push	r0
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	7b 83       	std	Y+3, r23	; 0x03
    1d8c:	6a 83       	std	Y+2, r22	; 0x02
	duty = (duty*255)/100;
    1d8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d90:	3b 81       	ldd	r19, Y+3	; 0x03
    1d92:	c9 01       	movw	r24, r18
    1d94:	ac 01       	movw	r20, r24
    1d96:	44 0f       	add	r20, r20
    1d98:	55 1f       	adc	r21, r21
    1d9a:	ca 01       	movw	r24, r20
    1d9c:	96 95       	lsr	r25
    1d9e:	98 2f       	mov	r25, r24
    1da0:	88 27       	eor	r24, r24
    1da2:	97 95       	ror	r25
    1da4:	87 95       	ror	r24
    1da6:	84 1b       	sub	r24, r20
    1da8:	95 0b       	sbc	r25, r21
    1daa:	82 0f       	add	r24, r18
    1dac:	93 1f       	adc	r25, r19
    1dae:	24 e6       	ldi	r18, 0x64	; 100
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	b9 01       	movw	r22, r18
    1db4:	0e 94 1c 18 	call	0x3038	; 0x3038 <__udivmodhi4>
    1db8:	9b 01       	movw	r18, r22
    1dba:	3b 83       	std	Y+3, r19	; 0x03
    1dbc:	2a 83       	std	Y+2, r18	; 0x02
	if(pwm_ini==0)
    1dbe:	80 91 17 02 	lds	r24, 0x0217
    1dc2:	88 23       	and	r24, r24
    1dc4:	29 f4       	brne	.+10     	; 0x1dd0 <pwm+0x54>
	{
		pwm_init();
    1dc6:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <pwm_init>
		pwm_ini=1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	80 93 17 02 	sts	0x0217, r24
	}
	if(channel==2)
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	d9 f4       	brne	.+54     	; 0x1e0c <pwm+0x90>
	{
		TCCR1A |= _BV(COM1A1);
    1dd6:	8f e4       	ldi	r24, 0x4F	; 79
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	2f e4       	ldi	r18, 0x4F	; 79
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	f9 01       	movw	r30, r18
    1de0:	20 81       	ld	r18, Z
    1de2:	20 68       	ori	r18, 0x80	; 128
    1de4:	fc 01       	movw	r30, r24
    1de6:	20 83       	st	Z, r18
		DDRD |= _BV(PD5);
    1de8:	81 e3       	ldi	r24, 0x31	; 49
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	21 e3       	ldi	r18, 0x31	; 49
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	f9 01       	movw	r30, r18
    1df2:	20 81       	ld	r18, Z
    1df4:	20 62       	ori	r18, 0x20	; 32
    1df6:	fc 01       	movw	r30, r24
    1df8:	20 83       	st	Z, r18
		OCR1AL = duty;
    1dfa:	8a e4       	ldi	r24, 0x4A	; 74
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	2a 81       	ldd	r18, Y+2	; 0x02
    1e00:	fc 01       	movw	r30, r24
    1e02:	20 83       	st	Z, r18
		_duty1 = duty;
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	80 93 15 02 	sts	0x0215, r24
    1e0a:	1d c0       	rjmp	.+58     	; 0x1e46 <pwm+0xca>
	}
	else if(channel==1)
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	d1 f4       	brne	.+52     	; 0x1e46 <pwm+0xca>
	{
		TCCR1A |= _BV(COM1B1);
    1e12:	8f e4       	ldi	r24, 0x4F	; 79
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	2f e4       	ldi	r18, 0x4F	; 79
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	f9 01       	movw	r30, r18
    1e1c:	20 81       	ld	r18, Z
    1e1e:	20 62       	ori	r18, 0x20	; 32
    1e20:	fc 01       	movw	r30, r24
    1e22:	20 83       	st	Z, r18
		DDRD |= _BV(PD4);
    1e24:	81 e3       	ldi	r24, 0x31	; 49
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	21 e3       	ldi	r18, 0x31	; 49
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	f9 01       	movw	r30, r18
    1e2e:	20 81       	ld	r18, Z
    1e30:	20 61       	ori	r18, 0x10	; 16
    1e32:	fc 01       	movw	r30, r24
    1e34:	20 83       	st	Z, r18
		OCR1BL = duty;
    1e36:	88 e4       	ldi	r24, 0x48	; 72
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	20 83       	st	Z, r18
		_duty2 = duty;
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	80 93 16 02 	sts	0x0216, r24
	}
}
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <motor>:
void motor(char _channel,int _power)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <motor+0x6>
    1e58:	0f 92       	push	r0
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	7b 83       	std	Y+3, r23	; 0x03
    1e62:	6a 83       	std	Y+2, r22	; 0x02
	if(_power>0)
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	18 16       	cp	r1, r24
    1e6a:	19 06       	cpc	r1, r25
    1e6c:	f4 f4       	brge	.+60     	; 0x1eaa <motor+0x58>
	{
		pwm(_channel,_power);
    1e6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e70:	3b 81       	ldd	r19, Y+3	; 0x03
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	b9 01       	movw	r22, r18
    1e76:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <pwm>
		if(_channel==2)
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	82 30       	cpi	r24, 0x02	; 2
    1e7e:	49 f4       	brne	.+18     	; 0x1e92 <motor+0x40>
		{
			out_d(7,1);		
    1e80:	87 e0       	ldi	r24, 0x07	; 7
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
			out_d(6,0);
    1e88:	86 e0       	ldi	r24, 0x06	; 6
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
    1e90:	2f c0       	rjmp	.+94     	; 0x1ef0 <motor+0x9e>
		}
		else if(_channel==1)
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	61 f5       	brne	.+88     	; 0x1ef0 <motor+0x9e>
		{
			out_d(2,1);		
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
			out_d(3,0);
    1ea0:	83 e0       	ldi	r24, 0x03	; 3
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
    1ea8:	23 c0       	rjmp	.+70     	; 0x1ef0 <motor+0x9e>
		}
	}
	else
	{
		
		pwm(_channel,abs(_power));
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	9b 81       	ldd	r25, Y+3	; 0x03
    1eae:	99 23       	and	r25, r25
    1eb0:	1c f4       	brge	.+6      	; 0x1eb8 <motor+0x66>
    1eb2:	90 95       	com	r25
    1eb4:	81 95       	neg	r24
    1eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb8:	9c 01       	movw	r18, r24
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	b9 01       	movw	r22, r18
    1ebe:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <pwm>
		if(_channel==2)
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	49 f4       	brne	.+18     	; 0x1eda <motor+0x88>
		{
			out_d(7,0);
    1ec8:	87 e0       	ldi	r24, 0x07	; 7
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
			out_d(6,1);
    1ed0:	86 e0       	ldi	r24, 0x06	; 6
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
    1ed8:	0b c0       	rjmp	.+22     	; 0x1ef0 <motor+0x9e>
		}
		else if(_channel==1)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	41 f4       	brne	.+16     	; 0x1ef0 <motor+0x9e>
		{
			out_d(2,0);
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
			out_d(3,1);
    1ee8:	83 e0       	ldi	r24, 0x03	; 3
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
		}	
	
	}
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <motor_stop>:
void motor_stop(char _channel)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	0f 92       	push	r0
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	89 83       	std	Y+1, r24	; 0x01
	pwm(_channel,0);
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <pwm>
	if(_channel==2 ||_channel==3)
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	19 f0       	breq	.+6      	; 0x1f1e <motor_stop+0x22>
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	83 30       	cpi	r24, 0x03	; 3
    1f1c:	41 f4       	brne	.+16     	; 0x1f2e <motor_stop+0x32>
	{
		out_d(7,0);		
    1f1e:	87 e0       	ldi	r24, 0x07	; 7
    1f20:	60 e0       	ldi	r22, 0x00	; 0
    1f22:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
		out_d(6,0);
    1f26:	86 e0       	ldi	r24, 0x06	; 6
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
	}
	if(_channel==1||_channel==3)
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	19 f0       	breq	.+6      	; 0x1f3a <motor_stop+0x3e>
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	83 30       	cpi	r24, 0x03	; 3
    1f38:	41 f4       	brne	.+16     	; 0x1f4a <motor_stop+0x4e>
	{
		out_d(2,0);		
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
		out_d(3,0);
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
	}

	
}
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <main>:
#define DANS SOUNDFUNC(SOUNDPORT,5000,1200);



/* Main Programming */
void main(){
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
while(1){toggle_d(0);sleep(1000);}
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	0e 94 8e 01 	call	0x31c	; 0x31c <toggle_d>
    1f60:	88 ee       	ldi	r24, 0xE8	; 232
    1f62:	93 e0       	ldi	r25, 0x03	; 3
    1f64:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
    1f68:	f8 cf       	rjmp	.-16     	; 0x1f5a <main+0x8>

00001f6a <covHourtoMin>:


/*------- Calculator Function --------*/

// Time Calculate
long covHourtoMin(unsigned int hour){
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <covHourtoMin+0x6>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <covHourtoMin+0x8>
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <covHourtoMin+0xa>
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
	long a=0;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
    1f7e:	1a 82       	std	Y+2, r1	; 0x02
    1f80:	1b 82       	std	Y+3, r1	; 0x03
    1f82:	1c 82       	std	Y+4, r1	; 0x04
	a = hour*60*1000;
    1f84:	4d 81       	ldd	r20, Y+5	; 0x05
    1f86:	5e 81       	ldd	r21, Y+6	; 0x06
    1f88:	20 e6       	ldi	r18, 0x60	; 96
    1f8a:	3a ee       	ldi	r19, 0xEA	; 234
    1f8c:	42 9f       	mul	r20, r18
    1f8e:	c0 01       	movw	r24, r0
    1f90:	43 9f       	mul	r20, r19
    1f92:	90 0d       	add	r25, r0
    1f94:	52 9f       	mul	r21, r18
    1f96:	90 0d       	add	r25, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	cc 01       	movw	r24, r24
    1f9c:	a0 e0       	ldi	r26, 0x00	; 0
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	ab 83       	std	Y+3, r26	; 0x03
    1fa6:	bc 83       	std	Y+4, r27	; 0x04
	return a;
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	9a 81       	ldd	r25, Y+2	; 0x02
    1fac:	ab 81       	ldd	r26, Y+3	; 0x03
    1fae:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	26 96       	adiw	r28, 0x06	; 6
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <sleepMin>:

void sleepMin(unsigned int mina)  //Sleep Def
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <sleepMin+0x6>
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <sleepMin+0x8>
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <sleepMin+0xa>
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i,j;
	for(i=0;i<mina;i++){
    1fd8:	1a 82       	std	Y+2, r1	; 0x02
    1fda:	19 82       	std	Y+1, r1	; 0x01
    1fdc:	16 c0       	rjmp	.+44     	; 0x200a <sleepMin+0x44>
	for(j=0;j<60;j++){
    1fde:	1c 82       	std	Y+4, r1	; 0x04
    1fe0:	1b 82       	std	Y+3, r1	; 0x03
    1fe2:	09 c0       	rjmp	.+18     	; 0x1ff6 <sleepMin+0x30>
	sleep(1000);}}
    1fe4:	88 ee       	ldi	r24, 0xE8	; 232
    1fe6:	93 e0       	ldi	r25, 0x03	; 3
    1fe8:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>

void sleepMin(unsigned int mina)  //Sleep Def
{
	unsigned int i,j;
	for(i=0;i<mina;i++){
	for(j=0;j<60;j++){
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	9c 83       	std	Y+4, r25	; 0x04
    1ff4:	8b 83       	std	Y+3, r24	; 0x03
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	8c 33       	cpi	r24, 0x3C	; 60
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	90 f3       	brcs	.-28     	; 0x1fe4 <sleepMin+0x1e>
}

void sleepMin(unsigned int mina)  //Sleep Def
{
	unsigned int i,j;
	for(i=0;i<mina;i++){
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	29 81       	ldd	r18, Y+1	; 0x01
    200c:	3a 81       	ldd	r19, Y+2	; 0x02
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	28 17       	cp	r18, r24
    2014:	39 07       	cpc	r19, r25
    2016:	18 f3       	brcs	.-58     	; 0x1fde <sleepMin+0x18>
	for(j=0;j<60;j++){
	sleep(1000);}}
}
    2018:	26 96       	adiw	r28, 0x06	; 6
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <ar>:

//Calculate
float ar(unsigned int port, unsigned int number,unsigned int delay){ //Find Average
    202a:	ef 92       	push	r14
    202c:	ff 92       	push	r15
    202e:	0f 93       	push	r16
    2030:	1f 93       	push	r17
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	64 97       	sbiw	r28, 0x14	; 20
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	98 8b       	std	Y+16, r25	; 0x10
    2048:	8f 87       	std	Y+15, r24	; 0x0f
    204a:	7a 8b       	std	Y+18, r23	; 0x12
    204c:	69 8b       	std	Y+17, r22	; 0x11
    204e:	5c 8b       	std	Y+20, r21	; 0x14
    2050:	4b 8b       	std	Y+19, r20	; 0x13
	return arg;


	//Use lcd("#cA%f      ",ar(1,15,200));

}
    2052:	0d b7       	in	r16, 0x3d	; 61
    2054:	1e b7       	in	r17, 0x3e	; 62
	for(j=0;j<60;j++){
	sleep(1000);}}
}

//Calculate
float ar(unsigned int port, unsigned int number,unsigned int delay){ //Find Average
    2056:	8d b7       	in	r24, 0x3d	; 61
    2058:	9e b7       	in	r25, 0x3e	; 62
    205a:	7c 01       	movw	r14, r24
	int i,list[number];
    205c:	89 89       	ldd	r24, Y+17	; 0x11
    205e:	9a 89       	ldd	r25, Y+18	; 0x12
    2060:	9c 01       	movw	r18, r24
    2062:	21 50       	subi	r18, 0x01	; 1
    2064:	30 40       	sbci	r19, 0x00	; 0
    2066:	38 87       	std	Y+8, r19	; 0x08
    2068:	2f 83       	std	Y+7, r18	; 0x07
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	2d b7       	in	r18, 0x3d	; 61
    2070:	3e b7       	in	r19, 0x3e	; 62
    2072:	28 1b       	sub	r18, r24
    2074:	39 0b       	sbc	r19, r25
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	3e bf       	out	0x3e, r19	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	2d bf       	out	0x3d, r18	; 61
    2080:	8d b7       	in	r24, 0x3d	; 61
    2082:	9e b7       	in	r25, 0x3e	; 62
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	00 96       	adiw	r24, 0x00	; 0
    2088:	9a 87       	std	Y+10, r25	; 0x0a
    208a:	89 87       	std	Y+9, r24	; 0x09
		//lcd("Plz Wait while #nSysChk Mois ");
		//sleep(1000);
		//lcd("#c");
	

		for(i=0;i<number;i++){ 
    208c:	1a 82       	std	Y+2, r1	; 0x02
    208e:	19 82       	std	Y+1, r1	; 0x01
    2090:	50 c0       	rjmp	.+160    	; 0x2132 <ar+0x108>
			list[i]= analog(port);
    2092:	8f 85       	ldd	r24, Y+15	; 0x0f
    2094:	0e 94 bf 08 	call	0x117e	; 0x117e <analog>
    2098:	9c 01       	movw	r18, r24
    209a:	49 85       	ldd	r20, Y+9	; 0x09
    209c:	5a 85       	ldd	r21, Y+10	; 0x0a
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	84 0f       	add	r24, r20
    20a8:	95 1f       	adc	r25, r21
    20aa:	fc 01       	movw	r30, r24
    20ac:	31 83       	std	Z+1, r19	; 0x01
    20ae:	20 83       	st	Z, r18
			sleep(delay);
    20b0:	8b 89       	ldd	r24, Y+19	; 0x13
    20b2:	9c 89       	ldd	r25, Y+20	; 0x14
    20b4:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
			lcd("#c%d     ",analog(port));
    20b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ba:	0e 94 bf 08 	call	0x117e	; 0x117e <analog>
    20be:	9c 01       	movw	r18, r24
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <ar+0x98>
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <ar+0x9a>
    20c4:	8d b7       	in	r24, 0x3d	; 61
    20c6:	9e b7       	in	r25, 0x3e	; 62
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	4d e6       	ldi	r20, 0x6D	; 109
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	fc 01       	movw	r30, r24
    20d0:	51 83       	std	Z+1, r21	; 0x01
    20d2:	40 83       	st	Z, r20
    20d4:	fc 01       	movw	r30, r24
    20d6:	33 83       	std	Z+3, r19	; 0x03
    20d8:	22 83       	std	Z+2, r18	; 0x02
    20da:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0

			//ar
			sum = sum + list[i];
    20e6:	29 85       	ldd	r18, Y+9	; 0x09
    20e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	82 0f       	add	r24, r18
    20f4:	93 1f       	adc	r25, r19
    20f6:	fc 01       	movw	r30, r24
    20f8:	80 81       	ld	r24, Z
    20fa:	91 81       	ldd	r25, Z+1	; 0x01
    20fc:	aa 27       	eor	r26, r26
    20fe:	97 fd       	sbrc	r25, 7
    2100:	a0 95       	com	r26
    2102:	ba 2f       	mov	r27, r26
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__floatsisf>
    210c:	9b 01       	movw	r18, r22
    210e:	ac 01       	movw	r20, r24
    2110:	6b 81       	ldd	r22, Y+3	; 0x03
    2112:	7c 81       	ldd	r23, Y+4	; 0x04
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__addsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8b 83       	std	Y+3, r24	; 0x03
    2122:	9c 83       	std	Y+4, r25	; 0x04
    2124:	ad 83       	std	Y+5, r26	; 0x05
    2126:	be 83       	std	Y+6, r27	; 0x06
		//lcd("Plz Wait while #nSysChk Mois ");
		//sleep(1000);
		//lcd("#c");
	

		for(i=0;i<number;i++){ 
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	29 81       	ldd	r18, Y+1	; 0x01
    2134:	3a 81       	ldd	r19, Y+2	; 0x02
    2136:	89 89       	ldd	r24, Y+17	; 0x11
    2138:	9a 89       	ldd	r25, Y+18	; 0x12
    213a:	28 17       	cp	r18, r24
    213c:	39 07       	cpc	r19, r25
    213e:	08 f4       	brcc	.+2      	; 0x2142 <ar+0x118>
    2140:	a8 cf       	rjmp	.-176    	; 0x2092 <ar+0x68>
			lcd("#c%d     ",analog(port));

			//ar
			sum = sum + list[i];
		}
		arg = sum / number;	
    2142:	89 89       	ldd	r24, Y+17	; 0x11
    2144:	9a 89       	ldd	r25, Y+18	; 0x12
    2146:	cc 01       	movw	r24, r24
    2148:	a0 e0       	ldi	r26, 0x00	; 0
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__floatunsisf>
    2154:	9b 01       	movw	r18, r22
    2156:	ac 01       	movw	r20, r24
    2158:	6b 81       	ldd	r22, Y+3	; 0x03
    215a:	7c 81       	ldd	r23, Y+4	; 0x04
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__divsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	8b 87       	std	Y+11, r24	; 0x0b
    216a:	9c 87       	std	Y+12, r25	; 0x0c
    216c:	ad 87       	std	Y+13, r26	; 0x0d
    216e:	be 87       	std	Y+14, r27	; 0x0e
	return arg;
    2170:	8b 85       	ldd	r24, Y+11	; 0x0b
    2172:	9c 85       	ldd	r25, Y+12	; 0x0c
    2174:	ad 85       	ldd	r26, Y+13	; 0x0d
    2176:	be 85       	ldd	r27, Y+14	; 0x0e
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	fe be       	out	0x3e, r15	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	ed be       	out	0x3d, r14	; 61


	//Use lcd("#cA%f      ",ar(1,15,200));

}
    2182:	bc 01       	movw	r22, r24
    2184:	cd 01       	movw	r24, r26
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	1e bf       	out	0x3e, r17	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	0d bf       	out	0x3d, r16	; 61
    2190:	64 96       	adiw	r28, 0x14	; 20
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	ff 90       	pop	r15
    21a6:	ef 90       	pop	r14
    21a8:	08 95       	ret

000021aa <cal_chk_insoil>:

float cal_chk_insoil(unsigned int port, unsigned int number, unsigned int delay) //Chack vol scolling
{
    21aa:	9f 92       	push	r9
    21ac:	af 92       	push	r10
    21ae:	bf 92       	push	r11
    21b0:	cf 92       	push	r12
    21b2:	df 92       	push	r13
    21b4:	ef 92       	push	r14
    21b6:	ff 92       	push	r15
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	64 97       	sbiw	r28, 0x14	; 20
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	98 8b       	std	Y+16, r25	; 0x10
    21d2:	8f 87       	std	Y+15, r24	; 0x0f
    21d4:	7a 8b       	std	Y+18, r23	; 0x12
    21d6:	69 8b       	std	Y+17, r22	; 0x11
    21d8:	5c 8b       	std	Y+20, r21	; 0x14
    21da:	4b 8b       	std	Y+19, r20	; 0x13
		arga = suma / number;	
	

if((float)lista[0]==arga||(float)lista[0]>=arga-10&&(float)lista[0]<=arga+10){return 1;} //Not scolling
else{return 0;} //Scolling
}
    21dc:	cd b6       	in	r12, 0x3d	; 61
    21de:	de b6       	in	r13, 0x3e	; 62
	//Use lcd("#cA%f      ",ar(1,15,200));

}

float cal_chk_insoil(unsigned int port, unsigned int number, unsigned int delay) //Chack vol scolling
{
    21e0:	8d b7       	in	r24, 0x3d	; 61
    21e2:	9e b7       	in	r25, 0x3e	; 62
    21e4:	5c 01       	movw	r10, r24
	int ia,lista[number];
    21e6:	89 89       	ldd	r24, Y+17	; 0x11
    21e8:	9a 89       	ldd	r25, Y+18	; 0x12
    21ea:	9c 01       	movw	r18, r24
    21ec:	21 50       	subi	r18, 0x01	; 1
    21ee:	30 40       	sbci	r19, 0x00	; 0
    21f0:	38 87       	std	Y+8, r19	; 0x08
    21f2:	2f 83       	std	Y+7, r18	; 0x07
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	2d b7       	in	r18, 0x3d	; 61
    21fa:	3e b7       	in	r19, 0x3e	; 62
    21fc:	28 1b       	sub	r18, r24
    21fe:	39 0b       	sbc	r19, r25
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	3e bf       	out	0x3e, r19	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	2d bf       	out	0x3d, r18	; 61
    220a:	8d b7       	in	r24, 0x3d	; 61
    220c:	9e b7       	in	r25, 0x3e	; 62
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	00 96       	adiw	r24, 0x00	; 0
    2212:	9a 87       	std	Y+10, r25	; 0x0a
    2214:	89 87       	std	Y+9, r24	; 0x09
	float suma, arga;
	
			for(ia=0;ia<number;ia++){ 
    2216:	1a 82       	std	Y+2, r1	; 0x02
    2218:	19 82       	std	Y+1, r1	; 0x01
    221a:	39 c0       	rjmp	.+114    	; 0x228e <cal_chk_insoil+0xe4>
			lista[ia]= analog(port);
    221c:	8f 85       	ldd	r24, Y+15	; 0x0f
    221e:	0e 94 bf 08 	call	0x117e	; 0x117e <analog>
    2222:	9c 01       	movw	r18, r24
    2224:	49 85       	ldd	r20, Y+9	; 0x09
    2226:	5a 85       	ldd	r21, Y+10	; 0x0a
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	9a 81       	ldd	r25, Y+2	; 0x02
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	84 0f       	add	r24, r20
    2232:	95 1f       	adc	r25, r21
    2234:	fc 01       	movw	r30, r24
    2236:	31 83       	std	Z+1, r19	; 0x01
    2238:	20 83       	st	Z, r18
			sleep(delay);
    223a:	8b 89       	ldd	r24, Y+19	; 0x13
    223c:	9c 89       	ldd	r25, Y+20	; 0x14
    223e:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
			//lcd("#c%d     ",analog(port));

			//ar
			suma = suma + (float)lista[ia];
    2242:	29 85       	ldd	r18, Y+9	; 0x09
    2244:	3a 85       	ldd	r19, Y+10	; 0x0a
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	9a 81       	ldd	r25, Y+2	; 0x02
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	82 0f       	add	r24, r18
    2250:	93 1f       	adc	r25, r19
    2252:	fc 01       	movw	r30, r24
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	aa 27       	eor	r26, r26
    225a:	97 fd       	sbrc	r25, 7
    225c:	a0 95       	com	r26
    225e:	ba 2f       	mov	r27, r26
    2260:	bc 01       	movw	r22, r24
    2262:	cd 01       	movw	r24, r26
    2264:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__floatsisf>
    2268:	9b 01       	movw	r18, r22
    226a:	ac 01       	movw	r20, r24
    226c:	6b 81       	ldd	r22, Y+3	; 0x03
    226e:	7c 81       	ldd	r23, Y+4	; 0x04
    2270:	8d 81       	ldd	r24, Y+5	; 0x05
    2272:	9e 81       	ldd	r25, Y+6	; 0x06
    2274:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__addsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	8b 83       	std	Y+3, r24	; 0x03
    227e:	9c 83       	std	Y+4, r25	; 0x04
    2280:	ad 83       	std	Y+5, r26	; 0x05
    2282:	be 83       	std	Y+6, r27	; 0x06
float cal_chk_insoil(unsigned int port, unsigned int number, unsigned int delay) //Chack vol scolling
{
	int ia,lista[number];
	float suma, arga;
	
			for(ia=0;ia<number;ia++){ 
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	9a 83       	std	Y+2, r25	; 0x02
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	29 81       	ldd	r18, Y+1	; 0x01
    2290:	3a 81       	ldd	r19, Y+2	; 0x02
    2292:	89 89       	ldd	r24, Y+17	; 0x11
    2294:	9a 89       	ldd	r25, Y+18	; 0x12
    2296:	28 17       	cp	r18, r24
    2298:	39 07       	cpc	r19, r25
    229a:	08 f4       	brcc	.+2      	; 0x229e <cal_chk_insoil+0xf4>
    229c:	bf cf       	rjmp	.-130    	; 0x221c <cal_chk_insoil+0x72>
			//lcd("#c%d     ",analog(port));

			//ar
			suma = suma + (float)lista[ia];
		}
		arga = suma / number;	
    229e:	89 89       	ldd	r24, Y+17	; 0x11
    22a0:	9a 89       	ldd	r25, Y+18	; 0x12
    22a2:	cc 01       	movw	r24, r24
    22a4:	a0 e0       	ldi	r26, 0x00	; 0
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__floatunsisf>
    22b0:	9b 01       	movw	r18, r22
    22b2:	ac 01       	movw	r20, r24
    22b4:	6b 81       	ldd	r22, Y+3	; 0x03
    22b6:	7c 81       	ldd	r23, Y+4	; 0x04
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__divsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8b 87       	std	Y+11, r24	; 0x0b
    22c6:	9c 87       	std	Y+12, r25	; 0x0c
    22c8:	ad 87       	std	Y+13, r26	; 0x0d
    22ca:	be 87       	std	Y+14, r27	; 0x0e
	

if((float)lista[0]==arga||(float)lista[0]>=arga-10&&(float)lista[0]<=arga+10){return 1;} //Not scolling
    22cc:	89 85       	ldd	r24, Y+9	; 0x09
    22ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d0:	fc 01       	movw	r30, r24
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	aa 27       	eor	r26, r26
    22d8:	97 fd       	sbrc	r25, 7
    22da:	a0 95       	com	r26
    22dc:	ba 2f       	mov	r27, r26
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__floatsisf>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    22f0:	3c 85       	ldd	r19, Y+12	; 0x0c
    22f2:	4d 85       	ldd	r20, Y+13	; 0x0d
    22f4:	5e 85       	ldd	r21, Y+14	; 0x0e
    22f6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__cmpsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	09 f4       	brne	.+2      	; 0x2300 <cal_chk_insoil+0x156>
    22fe:	50 c0       	rjmp	.+160    	; 0x23a0 <cal_chk_insoil+0x1f6>
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	fc 01       	movw	r30, r24
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	aa 27       	eor	r26, r26
    230c:	97 fd       	sbrc	r25, 7
    230e:	a0 95       	com	r26
    2310:	ba 2f       	mov	r27, r26
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__floatsisf>
    231a:	7b 01       	movw	r14, r22
    231c:	8c 01       	movw	r16, r24
    231e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2320:	7c 85       	ldd	r23, Y+12	; 0x0c
    2322:	8d 85       	ldd	r24, Y+13	; 0x0d
    2324:	9e 85       	ldd	r25, Y+14	; 0x0e
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e2       	ldi	r20, 0x20	; 32
    232c:	51 e4       	ldi	r21, 0x41	; 65
    232e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__subsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9c 01       	movw	r18, r24
    2338:	ad 01       	movw	r20, r26
    233a:	99 24       	eor	r9, r9
    233c:	93 94       	inc	r9
    233e:	c8 01       	movw	r24, r16
    2340:	b7 01       	movw	r22, r14
    2342:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <__gesf2>
    2346:	88 23       	and	r24, r24
    2348:	0c f4       	brge	.+2      	; 0x234c <cal_chk_insoil+0x1a2>
    234a:	99 24       	eor	r9, r9
    234c:	99 20       	and	r9, r9
    234e:	69 f1       	breq	.+90     	; 0x23aa <cal_chk_insoil+0x200>
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	fc 01       	movw	r30, r24
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	aa 27       	eor	r26, r26
    235c:	97 fd       	sbrc	r25, 7
    235e:	a0 95       	com	r26
    2360:	ba 2f       	mov	r27, r26
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__floatsisf>
    236a:	7b 01       	movw	r14, r22
    236c:	8c 01       	movw	r16, r24
    236e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2370:	7c 85       	ldd	r23, Y+12	; 0x0c
    2372:	8d 85       	ldd	r24, Y+13	; 0x0d
    2374:	9e 85       	ldd	r25, Y+14	; 0x0e
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e2       	ldi	r20, 0x20	; 32
    237c:	51 e4       	ldi	r21, 0x41	; 65
    237e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__addsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9c 01       	movw	r18, r24
    2388:	ad 01       	movw	r20, r26
    238a:	99 24       	eor	r9, r9
    238c:	93 94       	inc	r9
    238e:	c8 01       	movw	r24, r16
    2390:	b7 01       	movw	r22, r14
    2392:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__cmpsf2>
    2396:	18 16       	cp	r1, r24
    2398:	0c f4       	brge	.+2      	; 0x239c <cal_chk_insoil+0x1f2>
    239a:	99 24       	eor	r9, r9
    239c:	99 20       	and	r9, r9
    239e:	29 f0       	breq	.+10     	; 0x23aa <cal_chk_insoil+0x200>
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e8       	ldi	r26, 0x80	; 128
    23a6:	bf e3       	ldi	r27, 0x3F	; 63
    23a8:	03 c0       	rjmp	.+6      	; 0x23b0 <cal_chk_insoil+0x206>
else{return 0;} //Scolling
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	dc 01       	movw	r26, r24
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	be be       	out	0x3e, r11	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	ad be       	out	0x3d, r10	; 61
}
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de be       	out	0x3e, r13	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd be       	out	0x3d, r12	; 61
    23c8:	64 96       	adiw	r28, 0x14	; 20
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	1f 91       	pop	r17
    23da:	0f 91       	pop	r16
    23dc:	ff 90       	pop	r15
    23de:	ef 90       	pop	r14
    23e0:	df 90       	pop	r13
    23e2:	cf 90       	pop	r12
    23e4:	bf 90       	pop	r11
    23e6:	af 90       	pop	r10
    23e8:	9f 90       	pop	r9
    23ea:	08 95       	ret

000023ec <persen>:


float persen(float numa, float maxa,float pera) //return float
{
    23ec:	ef 92       	push	r14
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	60 97       	sbiw	r28, 0x10	; 16
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	6d 83       	std	Y+5, r22	; 0x05
    240a:	7e 83       	std	Y+6, r23	; 0x06
    240c:	8f 83       	std	Y+7, r24	; 0x07
    240e:	98 87       	std	Y+8, r25	; 0x08
    2410:	29 87       	std	Y+9, r18	; 0x09
    2412:	3a 87       	std	Y+10, r19	; 0x0a
    2414:	4b 87       	std	Y+11, r20	; 0x0b
    2416:	5c 87       	std	Y+12, r21	; 0x0c
    2418:	ed 86       	std	Y+13, r14	; 0x0d
    241a:	fe 86       	std	Y+14, r15	; 0x0e
    241c:	0f 87       	std	Y+15, r16	; 0x0f
    241e:	18 8b       	std	Y+16, r17	; 0x10
	float ap;
	ap = (numa/maxa)*pera;
    2420:	6d 81       	ldd	r22, Y+5	; 0x05
    2422:	7e 81       	ldd	r23, Y+6	; 0x06
    2424:	8f 81       	ldd	r24, Y+7	; 0x07
    2426:	98 85       	ldd	r25, Y+8	; 0x08
    2428:	29 85       	ldd	r18, Y+9	; 0x09
    242a:	3a 85       	ldd	r19, Y+10	; 0x0a
    242c:	4b 85       	ldd	r20, Y+11	; 0x0b
    242e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2430:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__divsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	2d 85       	ldd	r18, Y+13	; 0x0d
    243e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2440:	4f 85       	ldd	r20, Y+15	; 0x0f
    2442:	58 89       	ldd	r21, Y+16	; 0x10
    2444:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	ab 83       	std	Y+3, r26	; 0x03
    2452:	bc 83       	std	Y+4, r27	; 0x04
	return ap;
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	9a 81       	ldd	r25, Y+2	; 0x02
    2458:	ab 81       	ldd	r26, Y+3	; 0x03
    245a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	60 96       	adiw	r28, 0x10	; 16
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
    2474:	ff 90       	pop	r15
    2476:	ef 90       	pop	r14
    2478:	08 95       	ret

0000247a <select_menu>:


/*------- User Interface ------*/


void select_menu(){
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	00 d0       	rcall	.+0      	; 0x2480 <select_menu+0x6>
    2480:	00 d0       	rcall	.+0      	; 0x2482 <select_menu+0x8>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
	int ps,nt,ac,tt,is;
	while(is<=3){
    2486:	5b c0       	rjmp	.+182    	; 0x253e <select_menu+0xc4>
		if(PSB==0||NTB==0||ACB==0){
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    248e:	88 23       	and	r24, r24
    2490:	51 f0       	breq	.+20     	; 0x24a6 <select_menu+0x2c>
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    2498:	88 23       	and	r24, r24
    249a:	29 f0       	breq	.+10     	; 0x24a6 <select_menu+0x2c>
    249c:	82 e0       	ldi	r24, 0x02	; 2
    249e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    24a2:	88 23       	and	r24, r24
    24a4:	31 f5       	brne	.+76     	; 0x24f2 <select_menu+0x78>
			if(PSB==0){tt+=2;}
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    24ac:	88 23       	and	r24, r24
    24ae:	31 f4       	brne	.+12     	; 0x24bc <select_menu+0x42>
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	02 96       	adiw	r24, 0x02	; 2
    24b6:	9a 83       	std	Y+2, r25	; 0x02
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	15 c0       	rjmp	.+42     	; 0x24e6 <select_menu+0x6c>
			else if(NTB==0){tt-=1;}
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    24c2:	88 23       	and	r24, r24
    24c4:	31 f4       	brne	.+12     	; 0x24d2 <select_menu+0x58>
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	0a c0       	rjmp	.+20     	; 0x24e6 <select_menu+0x6c>
			else if(ACB==0){tt+=3;}
    24d2:	82 e0       	ldi	r24, 0x02	; 2
    24d4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    24d8:	88 23       	and	r24, r24
    24da:	29 f4       	brne	.+10     	; 0x24e6 <select_menu+0x6c>
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	03 96       	adiw	r24, 0x03	; 3
    24e2:	9a 83       	std	Y+2, r25	; 0x02
    24e4:	89 83       	std	Y+1, r24	; 0x01
			is++;
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
    24f0:	26 c0       	rjmp	.+76     	; 0x253e <select_menu+0xc4>
		}
		else if(tt==8){
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	88 30       	cpi	r24, 0x08	; 8
    24f8:	91 05       	cpc	r25, r1
    24fa:	09 f5       	brne	.+66     	; 0x253e <select_menu+0xc4>
			lcd("%l             ",(unsigned long)timer_set_manul());
    24fc:	0e 94 ac 12 	call	0x2558	; 0x2558 <timer_set_manul>
    2500:	aa 27       	eor	r26, r26
    2502:	97 fd       	sbrc	r25, 7
    2504:	a0 95       	com	r26
    2506:	ba 2f       	mov	r27, r26
    2508:	00 d0       	rcall	.+0      	; 0x250a <select_menu+0x90>
    250a:	00 d0       	rcall	.+0      	; 0x250c <select_menu+0x92>
    250c:	00 d0       	rcall	.+0      	; 0x250e <select_menu+0x94>
    250e:	2d b7       	in	r18, 0x3d	; 61
    2510:	3e b7       	in	r19, 0x3e	; 62
    2512:	2f 5f       	subi	r18, 0xFF	; 255
    2514:	3f 4f       	sbci	r19, 0xFF	; 255
    2516:	47 e7       	ldi	r20, 0x77	; 119
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	f9 01       	movw	r30, r18
    251c:	51 83       	std	Z+1, r21	; 0x01
    251e:	40 83       	st	Z, r20
    2520:	f9 01       	movw	r30, r18
    2522:	82 83       	std	Z+2, r24	; 0x02
    2524:	93 83       	std	Z+3, r25	; 0x03
    2526:	a4 83       	std	Z+4, r26	; 0x04
    2528:	b5 83       	std	Z+5, r27	; 0x05
    252a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    252e:	8d b7       	in	r24, 0x3d	; 61
    2530:	9e b7       	in	r25, 0x3e	; 62
    2532:	06 96       	adiw	r24, 0x06	; 6
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	9e bf       	out	0x3e, r25	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	8d bf       	out	0x3d, r24	; 61
/*------- User Interface ------*/


void select_menu(){
	int ps,nt,ac,tt,is;
	while(is<=3){
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	84 30       	cpi	r24, 0x04	; 4
    2544:	91 05       	cpc	r25, r1
    2546:	0c f4       	brge	.+2      	; 0x254a <select_menu+0xd0>
    2548:	9f cf       	rjmp	.-194    	; 0x2488 <select_menu+0xe>
		}
		else if(tt==8){
			lcd("%l             ",(unsigned long)timer_set_manul());
		}
	}
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <timer_set_manul>:

int timer_set_manul(){
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	2c 97       	sbiw	r28, 0x0c	; 12
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
	unsigned long hr,mn,sc;
	hr=0;mn=0;sc=0;
    256c:	19 82       	std	Y+1, r1	; 0x01
    256e:	1a 82       	std	Y+2, r1	; 0x02
    2570:	1b 82       	std	Y+3, r1	; 0x03
    2572:	1c 82       	std	Y+4, r1	; 0x04
    2574:	1d 82       	std	Y+5, r1	; 0x05
    2576:	1e 82       	std	Y+6, r1	; 0x06
    2578:	1f 82       	std	Y+7, r1	; 0x07
    257a:	18 86       	std	Y+8, r1	; 0x08
    257c:	19 86       	std	Y+9, r1	; 0x09
    257e:	1a 86       	std	Y+10, r1	; 0x0a
    2580:	1b 86       	std	Y+11, r1	; 0x0b
    2582:	1c 86       	std	Y+12, r1	; 0x0c
	while(ACB!=0){
    2584:	56 c0       	rjmp	.+172    	; 0x2632 <timer_set_manul+0xda>
		lcd("Set Hours#n:::%d      ",hr);
    2586:	00 d0       	rcall	.+0      	; 0x2588 <timer_set_manul+0x30>
    2588:	00 d0       	rcall	.+0      	; 0x258a <timer_set_manul+0x32>
    258a:	00 d0       	rcall	.+0      	; 0x258c <timer_set_manul+0x34>
    258c:	2d b7       	in	r18, 0x3d	; 61
    258e:	3e b7       	in	r19, 0x3e	; 62
    2590:	2f 5f       	subi	r18, 0xFF	; 255
    2592:	3f 4f       	sbci	r19, 0xFF	; 255
    2594:	87 e8       	ldi	r24, 0x87	; 135
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	f9 01       	movw	r30, r18
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	80 83       	st	Z, r24
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	ab 81       	ldd	r26, Y+3	; 0x03
    25a4:	bc 81       	ldd	r27, Y+4	; 0x04
    25a6:	f9 01       	movw	r30, r18
    25a8:	82 83       	std	Z+2, r24	; 0x02
    25aa:	93 83       	std	Z+3, r25	; 0x03
    25ac:	a4 83       	std	Z+4, r26	; 0x04
    25ae:	b5 83       	std	Z+5, r27	; 0x05
    25b0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    25b4:	8d b7       	in	r24, 0x3d	; 61
    25b6:	9e b7       	in	r25, 0x3e	; 62
    25b8:	06 96       	adiw	r24, 0x06	; 6
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	9e bf       	out	0x3e, r25	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	8d bf       	out	0x3d, r24	; 61
		sleep(100);
    25c4:	84 e6       	ldi	r24, 0x64	; 100
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
		if(PSB==0){ hr++;}
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    25d2:	88 23       	and	r24, r24
    25d4:	61 f4       	brne	.+24     	; 0x25ee <timer_set_manul+0x96>
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	ab 81       	ldd	r26, Y+3	; 0x03
    25dc:	bc 81       	ldd	r27, Y+4	; 0x04
    25de:	01 96       	adiw	r24, 0x01	; 1
    25e0:	a1 1d       	adc	r26, r1
    25e2:	b1 1d       	adc	r27, r1
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	ab 83       	std	Y+3, r26	; 0x03
    25ea:	bc 83       	std	Y+4, r27	; 0x04
    25ec:	22 c0       	rjmp	.+68     	; 0x2632 <timer_set_manul+0xda>
		else if(NTB==0){hr--;}
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    25f4:	88 23       	and	r24, r24
    25f6:	61 f4       	brne	.+24     	; 0x2610 <timer_set_manul+0xb8>
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	ab 81       	ldd	r26, Y+3	; 0x03
    25fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	a1 09       	sbc	r26, r1
    2604:	b1 09       	sbc	r27, r1
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	ab 83       	std	Y+3, r26	; 0x03
    260c:	bc 83       	std	Y+4, r27	; 0x04
    260e:	11 c0       	rjmp	.+34     	; 0x2632 <timer_set_manul+0xda>
		else if(hr<0){hr=0;}
		else if(hr>59){hr=59;}
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	ab 81       	ldd	r26, Y+3	; 0x03
    2616:	bc 81       	ldd	r27, Y+4	; 0x04
    2618:	8c 33       	cpi	r24, 0x3C	; 60
    261a:	91 05       	cpc	r25, r1
    261c:	a1 05       	cpc	r26, r1
    261e:	b1 05       	cpc	r27, r1
    2620:	40 f0       	brcs	.+16     	; 0x2632 <timer_set_manul+0xda>
    2622:	8b e3       	ldi	r24, 0x3B	; 59
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	a0 e0       	ldi	r26, 0x00	; 0
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	ab 83       	std	Y+3, r26	; 0x03
    2630:	bc 83       	std	Y+4, r27	; 0x04
}

int timer_set_manul(){
	unsigned long hr,mn,sc;
	hr=0;mn=0;sc=0;
	while(ACB!=0){
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    2638:	88 23       	and	r24, r24
    263a:	09 f0       	breq	.+2      	; 0x263e <timer_set_manul+0xe6>
    263c:	a4 cf       	rjmp	.-184    	; 0x2586 <timer_set_manul+0x2e>
		if(PSB==0){ hr++;}
		else if(NTB==0){hr--;}
		else if(hr<0){hr=0;}
		else if(hr>59){hr=59;}
	}
	while(ACB!=0){
    263e:	56 c0       	rjmp	.+172    	; 0x26ec <timer_set_manul+0x194>
		lcd("Set Minute#n:::%d      ",mn);
    2640:	00 d0       	rcall	.+0      	; 0x2642 <timer_set_manul+0xea>
    2642:	00 d0       	rcall	.+0      	; 0x2644 <timer_set_manul+0xec>
    2644:	00 d0       	rcall	.+0      	; 0x2646 <timer_set_manul+0xee>
    2646:	2d b7       	in	r18, 0x3d	; 61
    2648:	3e b7       	in	r19, 0x3e	; 62
    264a:	2f 5f       	subi	r18, 0xFF	; 255
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	8e e9       	ldi	r24, 0x9E	; 158
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	f9 01       	movw	r30, r18
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	af 81       	ldd	r26, Y+7	; 0x07
    265e:	b8 85       	ldd	r27, Y+8	; 0x08
    2660:	f9 01       	movw	r30, r18
    2662:	82 83       	std	Z+2, r24	; 0x02
    2664:	93 83       	std	Z+3, r25	; 0x03
    2666:	a4 83       	std	Z+4, r26	; 0x04
    2668:	b5 83       	std	Z+5, r27	; 0x05
    266a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    266e:	8d b7       	in	r24, 0x3d	; 61
    2670:	9e b7       	in	r25, 0x3e	; 62
    2672:	06 96       	adiw	r24, 0x06	; 6
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	9e bf       	out	0x3e, r25	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	8d bf       	out	0x3d, r24	; 61
		sleep(100);
    267e:	84 e6       	ldi	r24, 0x64	; 100
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
		if(PSB==0){ mn++;}
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    268c:	88 23       	and	r24, r24
    268e:	61 f4       	brne	.+24     	; 0x26a8 <timer_set_manul+0x150>
    2690:	8d 81       	ldd	r24, Y+5	; 0x05
    2692:	9e 81       	ldd	r25, Y+6	; 0x06
    2694:	af 81       	ldd	r26, Y+7	; 0x07
    2696:	b8 85       	ldd	r27, Y+8	; 0x08
    2698:	01 96       	adiw	r24, 0x01	; 1
    269a:	a1 1d       	adc	r26, r1
    269c:	b1 1d       	adc	r27, r1
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	af 83       	std	Y+7, r26	; 0x07
    26a4:	b8 87       	std	Y+8, r27	; 0x08
    26a6:	22 c0       	rjmp	.+68     	; 0x26ec <timer_set_manul+0x194>
		else if(NTB==0){mn--;}
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    26ae:	88 23       	and	r24, r24
    26b0:	61 f4       	brne	.+24     	; 0x26ca <timer_set_manul+0x172>
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	af 81       	ldd	r26, Y+7	; 0x07
    26b8:	b8 85       	ldd	r27, Y+8	; 0x08
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	a1 09       	sbc	r26, r1
    26be:	b1 09       	sbc	r27, r1
    26c0:	8d 83       	std	Y+5, r24	; 0x05
    26c2:	9e 83       	std	Y+6, r25	; 0x06
    26c4:	af 83       	std	Y+7, r26	; 0x07
    26c6:	b8 87       	std	Y+8, r27	; 0x08
    26c8:	11 c0       	rjmp	.+34     	; 0x26ec <timer_set_manul+0x194>
		else if(mn<0){mn=0;}
		else if(mn>59){mn=59;}			
    26ca:	8d 81       	ldd	r24, Y+5	; 0x05
    26cc:	9e 81       	ldd	r25, Y+6	; 0x06
    26ce:	af 81       	ldd	r26, Y+7	; 0x07
    26d0:	b8 85       	ldd	r27, Y+8	; 0x08
    26d2:	8c 33       	cpi	r24, 0x3C	; 60
    26d4:	91 05       	cpc	r25, r1
    26d6:	a1 05       	cpc	r26, r1
    26d8:	b1 05       	cpc	r27, r1
    26da:	40 f0       	brcs	.+16     	; 0x26ec <timer_set_manul+0x194>
    26dc:	8b e3       	ldi	r24, 0x3B	; 59
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a0 e0       	ldi	r26, 0x00	; 0
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	8d 83       	std	Y+5, r24	; 0x05
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	af 83       	std	Y+7, r26	; 0x07
    26ea:	b8 87       	std	Y+8, r27	; 0x08
		if(PSB==0){ hr++;}
		else if(NTB==0){hr--;}
		else if(hr<0){hr=0;}
		else if(hr>59){hr=59;}
	}
	while(ACB!=0){
    26ec:	82 e0       	ldi	r24, 0x02	; 2
    26ee:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    26f2:	88 23       	and	r24, r24
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <timer_set_manul+0x1a0>
    26f6:	a4 cf       	rjmp	.-184    	; 0x2640 <timer_set_manul+0xe8>
		if(PSB==0){ mn++;}
		else if(NTB==0){mn--;}
		else if(mn<0){mn=0;}
		else if(mn>59){mn=59;}			
	}
	while(ACB!=0){
    26f8:	56 c0       	rjmp	.+172    	; 0x27a6 <timer_set_manul+0x24e>
		lcd("Set Secound#n:::%d      ",sc);
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <timer_set_manul+0x1a4>
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <timer_set_manul+0x1a6>
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <timer_set_manul+0x1a8>
    2700:	2d b7       	in	r18, 0x3d	; 61
    2702:	3e b7       	in	r19, 0x3e	; 62
    2704:	2f 5f       	subi	r18, 0xFF	; 255
    2706:	3f 4f       	sbci	r19, 0xFF	; 255
    2708:	86 eb       	ldi	r24, 0xB6	; 182
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	f9 01       	movw	r30, r18
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	80 83       	st	Z, r24
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	ab 85       	ldd	r26, Y+11	; 0x0b
    2718:	bc 85       	ldd	r27, Y+12	; 0x0c
    271a:	f9 01       	movw	r30, r18
    271c:	82 83       	std	Z+2, r24	; 0x02
    271e:	93 83       	std	Z+3, r25	; 0x03
    2720:	a4 83       	std	Z+4, r26	; 0x04
    2722:	b5 83       	std	Z+5, r27	; 0x05
    2724:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2728:	8d b7       	in	r24, 0x3d	; 61
    272a:	9e b7       	in	r25, 0x3e	; 62
    272c:	06 96       	adiw	r24, 0x06	; 6
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	f8 94       	cli
    2732:	9e bf       	out	0x3e, r25	; 62
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	8d bf       	out	0x3d, r24	; 61
		sleep(100);
    2738:	84 e6       	ldi	r24, 0x64	; 100
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
		if(PSB==0){ sc++;}
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    2746:	88 23       	and	r24, r24
    2748:	61 f4       	brne	.+24     	; 0x2762 <timer_set_manul+0x20a>
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2750:	bc 85       	ldd	r27, Y+12	; 0x0c
    2752:	01 96       	adiw	r24, 0x01	; 1
    2754:	a1 1d       	adc	r26, r1
    2756:	b1 1d       	adc	r27, r1
    2758:	89 87       	std	Y+9, r24	; 0x09
    275a:	9a 87       	std	Y+10, r25	; 0x0a
    275c:	ab 87       	std	Y+11, r26	; 0x0b
    275e:	bc 87       	std	Y+12, r27	; 0x0c
    2760:	22 c0       	rjmp	.+68     	; 0x27a6 <timer_set_manul+0x24e>
		else if(NTB==0){sc--;}
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    2768:	88 23       	and	r24, r24
    276a:	61 f4       	brne	.+24     	; 0x2784 <timer_set_manul+0x22c>
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	ab 85       	ldd	r26, Y+11	; 0x0b
    2772:	bc 85       	ldd	r27, Y+12	; 0x0c
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	a1 09       	sbc	r26, r1
    2778:	b1 09       	sbc	r27, r1
    277a:	89 87       	std	Y+9, r24	; 0x09
    277c:	9a 87       	std	Y+10, r25	; 0x0a
    277e:	ab 87       	std	Y+11, r26	; 0x0b
    2780:	bc 87       	std	Y+12, r27	; 0x0c
    2782:	11 c0       	rjmp	.+34     	; 0x27a6 <timer_set_manul+0x24e>
		else if(sc<0){sc=0;}
		else if(sc>59){sc=59;}			
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	ab 85       	ldd	r26, Y+11	; 0x0b
    278a:	bc 85       	ldd	r27, Y+12	; 0x0c
    278c:	8c 33       	cpi	r24, 0x3C	; 60
    278e:	91 05       	cpc	r25, r1
    2790:	a1 05       	cpc	r26, r1
    2792:	b1 05       	cpc	r27, r1
    2794:	40 f0       	brcs	.+16     	; 0x27a6 <timer_set_manul+0x24e>
    2796:	8b e3       	ldi	r24, 0x3B	; 59
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a0 e0       	ldi	r26, 0x00	; 0
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	89 87       	std	Y+9, r24	; 0x09
    27a0:	9a 87       	std	Y+10, r25	; 0x0a
    27a2:	ab 87       	std	Y+11, r26	; 0x0b
    27a4:	bc 87       	std	Y+12, r27	; 0x0c
		if(PSB==0){ mn++;}
		else if(NTB==0){mn--;}
		else if(mn<0){mn=0;}
		else if(mn>59){mn=59;}			
	}
	while(ACB!=0){
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    27ac:	88 23       	and	r24, r24
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <timer_set_manul+0x25a>
    27b0:	a4 cf       	rjmp	.-184    	; 0x26fa <timer_set_manul+0x1a2>
		if(PSB==0){ sc++;}
		else if(NTB==0){sc--;}
		else if(sc<0){sc=0;}
		else if(sc>59){sc=59;}			
	}
	while(ACB!=0){
    27b2:	3a c0       	rjmp	.+116    	; 0x2828 <timer_set_manul+0x2d0>
		lcd("___Sumery___#nH:%d    ;M:%d  ;S:%d  ",hr,mn,sc);
    27b4:	ed b7       	in	r30, 0x3d	; 61
    27b6:	fe b7       	in	r31, 0x3e	; 62
    27b8:	3e 97       	sbiw	r30, 0x0e	; 14
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	fe bf       	out	0x3e, r31	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	ed bf       	out	0x3d, r30	; 61
    27c4:	2d b7       	in	r18, 0x3d	; 61
    27c6:	3e b7       	in	r19, 0x3e	; 62
    27c8:	2f 5f       	subi	r18, 0xFF	; 255
    27ca:	3f 4f       	sbci	r19, 0xFF	; 255
    27cc:	8f ec       	ldi	r24, 0xCF	; 207
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	f9 01       	movw	r30, r18
    27d2:	91 83       	std	Z+1, r25	; 0x01
    27d4:	80 83       	st	Z, r24
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	9a 81       	ldd	r25, Y+2	; 0x02
    27da:	ab 81       	ldd	r26, Y+3	; 0x03
    27dc:	bc 81       	ldd	r27, Y+4	; 0x04
    27de:	f9 01       	movw	r30, r18
    27e0:	82 83       	std	Z+2, r24	; 0x02
    27e2:	93 83       	std	Z+3, r25	; 0x03
    27e4:	a4 83       	std	Z+4, r26	; 0x04
    27e6:	b5 83       	std	Z+5, r27	; 0x05
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	af 81       	ldd	r26, Y+7	; 0x07
    27ee:	b8 85       	ldd	r27, Y+8	; 0x08
    27f0:	f9 01       	movw	r30, r18
    27f2:	86 83       	std	Z+6, r24	; 0x06
    27f4:	97 83       	std	Z+7, r25	; 0x07
    27f6:	a0 87       	std	Z+8, r26	; 0x08
    27f8:	b1 87       	std	Z+9, r27	; 0x09
    27fa:	89 85       	ldd	r24, Y+9	; 0x09
    27fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fe:	ab 85       	ldd	r26, Y+11	; 0x0b
    2800:	bc 85       	ldd	r27, Y+12	; 0x0c
    2802:	f9 01       	movw	r30, r18
    2804:	82 87       	std	Z+10, r24	; 0x0a
    2806:	93 87       	std	Z+11, r25	; 0x0b
    2808:	a4 87       	std	Z+12, r26	; 0x0c
    280a:	b5 87       	std	Z+13, r27	; 0x0d
    280c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2810:	8d b7       	in	r24, 0x3d	; 61
    2812:	9e b7       	in	r25, 0x3e	; 62
    2814:	0e 96       	adiw	r24, 0x0e	; 14
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	9e bf       	out	0x3e, r25	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	8d bf       	out	0x3d, r24	; 61
		sleep(200);
    2820:	88 ec       	ldi	r24, 0xC8	; 200
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
		if(PSB==0){ sc++;}
		else if(NTB==0){sc--;}
		else if(sc<0){sc=0;}
		else if(sc>59){sc=59;}			
	}
	while(ACB!=0){
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    282e:	88 23       	and	r24, r24
    2830:	09 f6       	brne	.-126    	; 0x27b4 <timer_set_manul+0x25c>
		lcd("___Sumery___#nH:%d    ;M:%d  ;S:%d  ",hr,mn,sc);
		sleep(200);
	}
	if(hr==0){return (long)(mn*60)+(sc);}
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	9a 81       	ldd	r25, Y+2	; 0x02
    2836:	ab 81       	ldd	r26, Y+3	; 0x03
    2838:	bc 81       	ldd	r27, Y+4	; 0x04
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	a1 05       	cpc	r26, r1
    283e:	b1 05       	cpc	r27, r1
    2840:	81 f4       	brne	.+32     	; 0x2862 <timer_set_manul+0x30a>
    2842:	4d 81       	ldd	r20, Y+5	; 0x05
    2844:	5e 81       	ldd	r21, Y+6	; 0x06
    2846:	8c e3       	ldi	r24, 0x3C	; 60
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	48 9f       	mul	r20, r24
    284c:	90 01       	movw	r18, r0
    284e:	49 9f       	mul	r20, r25
    2850:	30 0d       	add	r19, r0
    2852:	58 9f       	mul	r21, r24
    2854:	30 0d       	add	r19, r0
    2856:	11 24       	eor	r1, r1
    2858:	89 85       	ldd	r24, Y+9	; 0x09
    285a:	9a 85       	ldd	r25, Y+10	; 0x0a
    285c:	82 0f       	add	r24, r18
    285e:	93 1f       	adc	r25, r19
    2860:	31 c0       	rjmp	.+98     	; 0x28c4 <timer_set_manul+0x36c>
	else if(hr>168&&hr<540){return (unsigned long)hr*3600;}
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	ab 81       	ldd	r26, Y+3	; 0x03
    2868:	bc 81       	ldd	r27, Y+4	; 0x04
    286a:	89 3a       	cpi	r24, 0xA9	; 169
    286c:	91 05       	cpc	r25, r1
    286e:	a1 05       	cpc	r26, r1
    2870:	b1 05       	cpc	r27, r1
    2872:	c0 f0       	brcs	.+48     	; 0x28a4 <timer_set_manul+0x34c>
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	ab 81       	ldd	r26, Y+3	; 0x03
    287a:	bc 81       	ldd	r27, Y+4	; 0x04
    287c:	8c 31       	cpi	r24, 0x1C	; 28
    287e:	e2 e0       	ldi	r30, 0x02	; 2
    2880:	9e 07       	cpc	r25, r30
    2882:	e0 e0       	ldi	r30, 0x00	; 0
    2884:	ae 07       	cpc	r26, r30
    2886:	e0 e0       	ldi	r30, 0x00	; 0
    2888:	be 07       	cpc	r27, r30
    288a:	60 f4       	brcc	.+24     	; 0x28a4 <timer_set_manul+0x34c>
    288c:	49 81       	ldd	r20, Y+1	; 0x01
    288e:	5a 81       	ldd	r21, Y+2	; 0x02
    2890:	20 e1       	ldi	r18, 0x10	; 16
    2892:	3e e0       	ldi	r19, 0x0E	; 14
    2894:	42 9f       	mul	r20, r18
    2896:	c0 01       	movw	r24, r0
    2898:	43 9f       	mul	r20, r19
    289a:	90 0d       	add	r25, r0
    289c:	52 9f       	mul	r21, r18
    289e:	90 0d       	add	r25, r0
    28a0:	11 24       	eor	r1, r1
    28a2:	10 c0       	rjmp	.+32     	; 0x28c4 <timer_set_manul+0x36c>
	else if(hr>=540){return -1;}
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	9a 81       	ldd	r25, Y+2	; 0x02
    28a8:	ab 81       	ldd	r26, Y+3	; 0x03
    28aa:	bc 81       	ldd	r27, Y+4	; 0x04
    28ac:	8c 31       	cpi	r24, 0x1C	; 28
    28ae:	f2 e0       	ldi	r31, 0x02	; 2
    28b0:	9f 07       	cpc	r25, r31
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	af 07       	cpc	r26, r31
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	bf 07       	cpc	r27, r31
    28ba:	18 f0       	brcs	.+6      	; 0x28c2 <timer_set_manul+0x36a>
    28bc:	8f ef       	ldi	r24, 0xFF	; 255
    28be:	9f ef       	ldi	r25, 0xFF	; 255
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <timer_set_manul+0x36c>
    28c2:	00 c0       	rjmp	.+0      	; 0x28c4 <timer_set_manul+0x36c>
		
}
    28c4:	2c 96       	adiw	r28, 0x0c	; 12
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	cd bf       	out	0x3d, r28	; 61
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <welcome>:

/*------- Step function ----------*/
void welcome(){
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
	lcd(" l__l l__l   #n l  l l  l5CH00l ");
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <welcome+0xa>
    28e0:	8d b7       	in	r24, 0x3d	; 61
    28e2:	9e b7       	in	r25, 0x3e	; 62
    28e4:	01 96       	adiw	r24, 0x01	; 1
    28e6:	24 ef       	ldi	r18, 0xF4	; 244
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	fc 01       	movw	r30, r24
    28ec:	31 83       	std	Z+1, r19	; 0x01
    28ee:	20 83       	st	Z, r18
    28f0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
	sleep(2000);
    28f8:	80 ed       	ldi	r24, 0xD0	; 208
    28fa:	97 e0       	ldi	r25, 0x07	; 7
    28fc:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
	lcd("   Welcome to #n      MCT       ");
    2900:	00 d0       	rcall	.+0      	; 0x2902 <welcome+0x2c>
    2902:	8d b7       	in	r24, 0x3d	; 61
    2904:	9e b7       	in	r25, 0x3e	; 62
    2906:	01 96       	adiw	r24, 0x01	; 1
    2908:	25 e1       	ldi	r18, 0x15	; 21
    290a:	31 e0       	ldi	r19, 0x01	; 1
    290c:	fc 01       	movw	r30, r24
    290e:	31 83       	std	Z+1, r19	; 0x01
    2910:	20 83       	st	Z, r18
    2912:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
	sleep("1000");
    291a:	86 e3       	ldi	r24, 0x36	; 54
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
	SIL;
    2922:	86 e0       	ldi	r24, 0x06	; 6
    2924:	60 ed       	ldi	r22, 0xD0	; 208
    2926:	77 e0       	ldi	r23, 0x07	; 7
    2928:	44 e6       	ldi	r20, 0x64	; 100
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <sound_d>
	lcd("#c");
    2930:	00 d0       	rcall	.+0      	; 0x2932 <welcome+0x5c>
    2932:	8d b7       	in	r24, 0x3d	; 61
    2934:	9e b7       	in	r25, 0x3e	; 62
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	2b e3       	ldi	r18, 0x3B	; 59
    293a:	31 e0       	ldi	r19, 0x01	; 1
    293c:	fc 01       	movw	r30, r24
    293e:	31 83       	std	Z+1, r19	; 0x01
    2940:	20 83       	st	Z, r18
    2942:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
}//complated
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <recomended>:

void recomended(){
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	00 d0       	rcall	.+0      	; 0x2956 <recomended+0x6>
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
	SIL;
    295a:	86 e0       	ldi	r24, 0x06	; 6
    295c:	60 ed       	ldi	r22, 0xD0	; 208
    295e:	77 e0       	ldi	r23, 0x07	; 7
    2960:	44 e6       	ldi	r20, 0x64	; 100
    2962:	50 e0       	ldi	r21, 0x00	; 0
    2964:	0e 94 1d 05 	call	0xa3a	; 0xa3a <sound_d>
	lcd("#cHelp! Plz Red Buttom Now");
    2968:	00 d0       	rcall	.+0      	; 0x296a <recomended+0x1a>
    296a:	8d b7       	in	r24, 0x3d	; 61
    296c:	9e b7       	in	r25, 0x3e	; 62
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	2e e3       	ldi	r18, 0x3E	; 62
    2972:	31 e0       	ldi	r19, 0x01	; 1
    2974:	fc 01       	movw	r30, r24
    2976:	31 83       	std	Z+1, r19	; 0x01
    2978:	20 83       	st	Z, r18
    297a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
	sleep(3000);
    2982:	88 eb       	ldi	r24, 0xB8	; 184
    2984:	9b e0       	ldi	r25, 0x0B	; 11
    2986:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
	int i=0;
    298a:	1a 82       	std	Y+2, r1	; 0x02
    298c:	19 82       	std	Y+1, r1	; 0x01
	while(i<3){	
    298e:	4f c0       	rjmp	.+158    	; 0x2a2e <recomended+0xde>
		if(ACB==0){
    2990:	82 e0       	ldi	r24, 0x02	; 2
    2992:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <in_b>
    2996:	88 23       	and	r24, r24
    2998:	a1 f5       	brne	.+104    	; 0x2a02 <recomended+0xb2>
			lcd("+ is Posive Buttom");sleep(3000);
    299a:	00 d0       	rcall	.+0      	; 0x299c <recomended+0x4c>
    299c:	8d b7       	in	r24, 0x3d	; 61
    299e:	9e b7       	in	r25, 0x3e	; 62
    29a0:	01 96       	adiw	r24, 0x01	; 1
    29a2:	29 e5       	ldi	r18, 0x59	; 89
    29a4:	31 e0       	ldi	r19, 0x01	; 1
    29a6:	fc 01       	movw	r30, r24
    29a8:	31 83       	std	Z+1, r19	; 0x01
    29aa:	20 83       	st	Z, r18
    29ac:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	88 eb       	ldi	r24, 0xB8	; 184
    29b6:	9b e0       	ldi	r25, 0x0B	; 11
    29b8:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
			lcd("- is Netive Buttom");sleep(3000);
    29bc:	00 d0       	rcall	.+0      	; 0x29be <recomended+0x6e>
    29be:	8d b7       	in	r24, 0x3d	; 61
    29c0:	9e b7       	in	r25, 0x3e	; 62
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	2c e6       	ldi	r18, 0x6C	; 108
    29c6:	31 e0       	ldi	r19, 0x01	; 1
    29c8:	fc 01       	movw	r30, r24
    29ca:	31 83       	std	Z+1, r19	; 0x01
    29cc:	20 83       	st	Z, r18
    29ce:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	88 eb       	ldi	r24, 0xB8	; 184
    29d8:	9b e0       	ldi	r25, 0x0B	; 11
    29da:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
			lcd("Y is Active Buttom");sleep(3000);
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <recomended+0x90>
    29e0:	8d b7       	in	r24, 0x3d	; 61
    29e2:	9e b7       	in	r25, 0x3e	; 62
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	2f e7       	ldi	r18, 0x7F	; 127
    29e8:	31 e0       	ldi	r19, 0x01	; 1
    29ea:	fc 01       	movw	r30, r24
    29ec:	31 83       	std	Z+1, r19	; 0x01
    29ee:	20 83       	st	Z, r18
    29f0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	88 eb       	ldi	r24, 0xB8	; 184
    29fa:	9b e0       	ldi	r25, 0x0B	; 11
    29fc:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
			break;
    2a00:	1c c0       	rjmp	.+56     	; 0x2a3a <recomended+0xea>
		}
		for(i=0;i<3;i++){
    2a02:	1a 82       	std	Y+2, r1	; 0x02
    2a04:	19 82       	std	Y+1, r1	; 0x01
    2a06:	0e c0       	rjmp	.+28     	; 0x2a24 <recomended+0xd4>
			sleep(1000);
    2a08:	88 ee       	ldi	r24, 0xE8	; 232
    2a0a:	93 e0       	ldi	r25, 0x03	; 3
    2a0c:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
			i++;
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	01 96       	adiw	r24, 0x01	; 1
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
			lcd("+ is Posive Buttom");sleep(3000);
			lcd("- is Netive Buttom");sleep(3000);
			lcd("Y is Active Buttom");sleep(3000);
			break;
		}
		for(i=0;i<3;i++){
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	9a 83       	std	Y+2, r25	; 0x02
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	83 30       	cpi	r24, 0x03	; 3
    2a2a:	91 05       	cpc	r25, r1
    2a2c:	6c f3       	brlt	.-38     	; 0x2a08 <recomended+0xb8>
void recomended(){
	SIL;
	lcd("#cHelp! Plz Red Buttom Now");
	sleep(3000);
	int i=0;
	while(i<3){	
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	9a 81       	ldd	r25, Y+2	; 0x02
    2a32:	83 30       	cpi	r24, 0x03	; 3
    2a34:	91 05       	cpc	r25, r1
    2a36:	0c f4       	brge	.+2      	; 0x2a3a <recomended+0xea>
    2a38:	ab cf       	rjmp	.-170    	; 0x2990 <recomended+0x40>
		for(i=0;i<3;i++){
			sleep(1000);
			i++;
		}
	}
}//completed
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <resetblock>:

void resetblock()
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
	lcd("#cReset All#nPlaese Wait!");
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <resetblock+0xa>
    2a4e:	8d b7       	in	r24, 0x3d	; 61
    2a50:	9e b7       	in	r25, 0x3e	; 62
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	22 e9       	ldi	r18, 0x92	; 146
    2a56:	31 e0       	ldi	r19, 0x01	; 1
    2a58:	fc 01       	movw	r30, r24
    2a5a:	31 83       	std	Z+1, r19	; 0x01
    2a5c:	20 83       	st	Z, r18
    2a5e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
	DELAYFUNC(DELAYPORT,0);  //Port PD0 set Delay
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	0e 94 9d 03 	call	0x73a	; 0x73a <out_d>
	sleep(1000);
    2a6e:	88 ee       	ldi	r24, 0xE8	; 232
    2a70:	93 e0       	ldi	r25, 0x03	; 3
    2a72:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
	SOUNDFUNC(SOUNDPORT,3000,1000);
    2a76:	86 e0       	ldi	r24, 0x06	; 6
    2a78:	68 eb       	ldi	r22, 0xB8	; 184
    2a7a:	7b e0       	ldi	r23, 0x0B	; 11
    2a7c:	48 ee       	ldi	r20, 0xE8	; 232
    2a7e:	53 e0       	ldi	r21, 0x03	; 3
    2a80:	0e 94 1d 05 	call	0xa3a	; 0xa3a <sound_d>
	lcd("#cReset : #nComplated");
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <resetblock+0x42>
    2a86:	8d b7       	in	r24, 0x3d	; 61
    2a88:	9e b7       	in	r25, 0x3e	; 62
    2a8a:	01 96       	adiw	r24, 0x01	; 1
    2a8c:	2c ea       	ldi	r18, 0xAC	; 172
    2a8e:	31 e0       	ldi	r19, 0x01	; 1
    2a90:	fc 01       	movw	r30, r24
    2a92:	31 83       	std	Z+1, r19	; 0x01
    2a94:	20 83       	st	Z, r18
    2a96:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
	sleep(1000);
    2a9e:	88 ee       	ldi	r24, 0xE8	; 232
    2aa0:	93 e0       	ldi	r25, 0x03	; 3
    2aa2:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
	lcd("#c");
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <resetblock+0x64>
    2aa8:	8d b7       	in	r24, 0x3d	; 61
    2aaa:	9e b7       	in	r25, 0x3e	; 62
    2aac:	01 96       	adiw	r24, 0x01	; 1
    2aae:	2b e3       	ldi	r18, 0x3B	; 59
    2ab0:	31 e0       	ldi	r19, 0x01	; 1
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	31 83       	std	Z+1, r19	; 0x01
    2ab6:	20 83       	st	Z, r18
    2ab8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
}//completed
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <chkstickinsoil>:

void chkstickinsoil(){ //For Check Stick in Soil Only
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	00 d0       	rcall	.+0      	; 0x2acc <chkstickinsoil+0x6>
    2acc:	00 d0       	rcall	.+0      	; 0x2ace <chkstickinsoil+0x8>
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <chkstickinsoil+0xa>
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
	unsigned int k,a;
	a = ANALOG_REG;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	0e 94 bf 08 	call	0x117e	; 0x117e <analog>
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
	lcd("--Install BiStick to soil--");
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <chkstickinsoil+0x1a>
    2ae0:	8d b7       	in	r24, 0x3d	; 61
    2ae2:	9e b7       	in	r25, 0x3e	; 62
    2ae4:	01 96       	adiw	r24, 0x01	; 1
    2ae6:	22 ec       	ldi	r18, 0xC2	; 194
    2ae8:	31 e0       	ldi	r19, 0x01	; 1
    2aea:	fc 01       	movw	r30, r24
    2aec:	31 83       	std	Z+1, r19	; 0x01
    2aee:	20 83       	st	Z, r18
    2af0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
	SOUNDFUNC(SOUNDPORT,3500,50);
    2af8:	86 e0       	ldi	r24, 0x06	; 6
    2afa:	6c ea       	ldi	r22, 0xAC	; 172
    2afc:	7d e0       	ldi	r23, 0x0D	; 13
    2afe:	42 e3       	ldi	r20, 0x32	; 50
    2b00:	50 e0       	ldi	r21, 0x00	; 0
    2b02:	0e 94 1d 05 	call	0xa3a	; 0xa3a <sound_d>
	sleep(5000);
    2b06:	88 e8       	ldi	r24, 0x88	; 136
    2b08:	93 e1       	ldi	r25, 0x13	; 19
    2b0a:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
	
	lcd("#c");
    2b0e:	00 d0       	rcall	.+0      	; 0x2b10 <chkstickinsoil+0x4a>
    2b10:	8d b7       	in	r24, 0x3d	; 61
    2b12:	9e b7       	in	r25, 0x3e	; 62
    2b14:	01 96       	adiw	r24, 0x01	; 1
    2b16:	2b e3       	ldi	r18, 0x3B	; 59
    2b18:	31 e0       	ldi	r19, 0x01	; 1
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	31 83       	std	Z+1, r19	; 0x01
    2b1e:	20 83       	st	Z, r18
    2b20:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	03 c0       	rjmp	.+6      	; 0x2b30 <chkstickinsoil+0x6a>
			sleep(2000);
			int brka = cal_chk_insoil(ANALOG_VOL_PORT,5,200);
			if(brka == 0){
				lcd("#cOk!!#nStick In Soil");sleep(5000);lcd("#c"); break; }
		}
	}
    2b2a:	00 00       	nop
    2b2c:	01 c0       	rjmp	.+2      	; 0x2b30 <chkstickinsoil+0x6a>
    2b2e:	00 00       	nop
	sleep(5000);
	
	lcd("#c");
	/////////////NOOTTT
	while(1){
		int brk = cal_chk_insoil(ANALOG_REG_PORT,5,200);
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	65 e0       	ldi	r22, 0x05	; 5
    2b36:	70 e0       	ldi	r23, 0x00	; 0
    2b38:	48 ec       	ldi	r20, 0xC8	; 200
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <cal_chk_insoil>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__fixsfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	9c 83       	std	Y+4, r25	; 0x04
    2b52:	8b 83       	std	Y+3, r24	; 0x03
		sleep(500);
    2b54:	84 ef       	ldi	r24, 0xF4	; 244
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>

		if(brk == 0){
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	19 f7       	brne	.-58     	; 0x2b2a <chkstickinsoil+0x64>
			lcd("Still Scolling!!");  //Chack agin for sure
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <chkstickinsoil+0xa0>
    2b66:	8d b7       	in	r24, 0x3d	; 61
    2b68:	9e b7       	in	r25, 0x3e	; 62
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	2e ed       	ldi	r18, 0xDE	; 222
    2b6e:	31 e0       	ldi	r19, 0x01	; 1
    2b70:	fc 01       	movw	r30, r24
    2b72:	31 83       	std	Z+1, r19	; 0x01
    2b74:	20 83       	st	Z, r18
    2b76:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
			sleep(2000);
    2b7e:	80 ed       	ldi	r24, 0xD0	; 208
    2b80:	97 e0       	ldi	r25, 0x07	; 7
    2b82:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
			int brka = cal_chk_insoil(ANALOG_VOL_PORT,5,200);
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	65 e0       	ldi	r22, 0x05	; 5
    2b8c:	70 e0       	ldi	r23, 0x00	; 0
    2b8e:	48 ec       	ldi	r20, 0xC8	; 200
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	0e 94 d5 10 	call	0x21aa	; 0x21aa <cal_chk_insoil>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__fixsfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
			if(brka == 0){
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	9e 81       	ldd	r25, Y+6	; 0x06
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	09 f0       	breq	.+2      	; 0x2bb4 <chkstickinsoil+0xee>
    2bb2:	bd cf       	rjmp	.-134    	; 0x2b2e <chkstickinsoil+0x68>
				lcd("#cOk!!#nStick In Soil");sleep(5000);lcd("#c"); break; }
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <chkstickinsoil+0xf0>
    2bb6:	8d b7       	in	r24, 0x3d	; 61
    2bb8:	9e b7       	in	r25, 0x3e	; 62
    2bba:	01 96       	adiw	r24, 0x01	; 1
    2bbc:	2f ee       	ldi	r18, 0xEF	; 239
    2bbe:	31 e0       	ldi	r19, 0x01	; 1
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	31 83       	std	Z+1, r19	; 0x01
    2bc4:	20 83       	st	Z, r18
    2bc6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	88 e8       	ldi	r24, 0x88	; 136
    2bd0:	93 e1       	ldi	r25, 0x13	; 19
    2bd2:	0e 94 c6 00 	call	0x18c	; 0x18c <sleep>
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <chkstickinsoil+0x112>
    2bd8:	8d b7       	in	r24, 0x3d	; 61
    2bda:	9e b7       	in	r25, 0x3e	; 62
    2bdc:	01 96       	adiw	r24, 0x01	; 1
    2bde:	2b e3       	ldi	r18, 0x3B	; 59
    2be0:	31 e0       	ldi	r19, 0x01	; 1
    2be2:	fc 01       	movw	r30, r24
    2be4:	31 83       	std	Z+1, r19	; 0x01
    2be6:	20 83       	st	Z, r18
    2be8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <lcd>
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
		}
	}

}//UnComplete
    2bf0:	26 96       	adiw	r28, 0x06	; 6
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	cf 91       	pop	r28
    2bfe:	df 91       	pop	r29
    2c00:	08 95       	ret

00002c02 <__subsf3>:
    2c02:	50 58       	subi	r21, 0x80	; 128

00002c04 <__addsf3>:
    2c04:	bb 27       	eor	r27, r27
    2c06:	aa 27       	eor	r26, r26
    2c08:	0e d0       	rcall	.+28     	; 0x2c26 <__addsf3x>
    2c0a:	75 c1       	rjmp	.+746    	; 0x2ef6 <__fp_round>
    2c0c:	66 d1       	rcall	.+716    	; 0x2eda <__fp_pscA>
    2c0e:	30 f0       	brcs	.+12     	; 0x2c1c <__addsf3+0x18>
    2c10:	6b d1       	rcall	.+726    	; 0x2ee8 <__fp_pscB>
    2c12:	20 f0       	brcs	.+8      	; 0x2c1c <__addsf3+0x18>
    2c14:	31 f4       	brne	.+12     	; 0x2c22 <__addsf3+0x1e>
    2c16:	9f 3f       	cpi	r25, 0xFF	; 255
    2c18:	11 f4       	brne	.+4      	; 0x2c1e <__addsf3+0x1a>
    2c1a:	1e f4       	brtc	.+6      	; 0x2c22 <__addsf3+0x1e>
    2c1c:	5b c1       	rjmp	.+694    	; 0x2ed4 <__fp_nan>
    2c1e:	0e f4       	brtc	.+2      	; 0x2c22 <__addsf3+0x1e>
    2c20:	e0 95       	com	r30
    2c22:	e7 fb       	bst	r30, 7
    2c24:	51 c1       	rjmp	.+674    	; 0x2ec8 <__fp_inf>

00002c26 <__addsf3x>:
    2c26:	e9 2f       	mov	r30, r25
    2c28:	77 d1       	rcall	.+750    	; 0x2f18 <__fp_split3>
    2c2a:	80 f3       	brcs	.-32     	; 0x2c0c <__addsf3+0x8>
    2c2c:	ba 17       	cp	r27, r26
    2c2e:	62 07       	cpc	r22, r18
    2c30:	73 07       	cpc	r23, r19
    2c32:	84 07       	cpc	r24, r20
    2c34:	95 07       	cpc	r25, r21
    2c36:	18 f0       	brcs	.+6      	; 0x2c3e <__addsf3x+0x18>
    2c38:	71 f4       	brne	.+28     	; 0x2c56 <__addsf3x+0x30>
    2c3a:	9e f5       	brtc	.+102    	; 0x2ca2 <__addsf3x+0x7c>
    2c3c:	8f c1       	rjmp	.+798    	; 0x2f5c <__fp_zero>
    2c3e:	0e f4       	brtc	.+2      	; 0x2c42 <__addsf3x+0x1c>
    2c40:	e0 95       	com	r30
    2c42:	0b 2e       	mov	r0, r27
    2c44:	ba 2f       	mov	r27, r26
    2c46:	a0 2d       	mov	r26, r0
    2c48:	0b 01       	movw	r0, r22
    2c4a:	b9 01       	movw	r22, r18
    2c4c:	90 01       	movw	r18, r0
    2c4e:	0c 01       	movw	r0, r24
    2c50:	ca 01       	movw	r24, r20
    2c52:	a0 01       	movw	r20, r0
    2c54:	11 24       	eor	r1, r1
    2c56:	ff 27       	eor	r31, r31
    2c58:	59 1b       	sub	r21, r25
    2c5a:	99 f0       	breq	.+38     	; 0x2c82 <__addsf3x+0x5c>
    2c5c:	59 3f       	cpi	r21, 0xF9	; 249
    2c5e:	50 f4       	brcc	.+20     	; 0x2c74 <__addsf3x+0x4e>
    2c60:	50 3e       	cpi	r21, 0xE0	; 224
    2c62:	68 f1       	brcs	.+90     	; 0x2cbe <__addsf3x+0x98>
    2c64:	1a 16       	cp	r1, r26
    2c66:	f0 40       	sbci	r31, 0x00	; 0
    2c68:	a2 2f       	mov	r26, r18
    2c6a:	23 2f       	mov	r18, r19
    2c6c:	34 2f       	mov	r19, r20
    2c6e:	44 27       	eor	r20, r20
    2c70:	58 5f       	subi	r21, 0xF8	; 248
    2c72:	f3 cf       	rjmp	.-26     	; 0x2c5a <__addsf3x+0x34>
    2c74:	46 95       	lsr	r20
    2c76:	37 95       	ror	r19
    2c78:	27 95       	ror	r18
    2c7a:	a7 95       	ror	r26
    2c7c:	f0 40       	sbci	r31, 0x00	; 0
    2c7e:	53 95       	inc	r21
    2c80:	c9 f7       	brne	.-14     	; 0x2c74 <__addsf3x+0x4e>
    2c82:	7e f4       	brtc	.+30     	; 0x2ca2 <__addsf3x+0x7c>
    2c84:	1f 16       	cp	r1, r31
    2c86:	ba 0b       	sbc	r27, r26
    2c88:	62 0b       	sbc	r22, r18
    2c8a:	73 0b       	sbc	r23, r19
    2c8c:	84 0b       	sbc	r24, r20
    2c8e:	ba f0       	brmi	.+46     	; 0x2cbe <__addsf3x+0x98>
    2c90:	91 50       	subi	r25, 0x01	; 1
    2c92:	a1 f0       	breq	.+40     	; 0x2cbc <__addsf3x+0x96>
    2c94:	ff 0f       	add	r31, r31
    2c96:	bb 1f       	adc	r27, r27
    2c98:	66 1f       	adc	r22, r22
    2c9a:	77 1f       	adc	r23, r23
    2c9c:	88 1f       	adc	r24, r24
    2c9e:	c2 f7       	brpl	.-16     	; 0x2c90 <__addsf3x+0x6a>
    2ca0:	0e c0       	rjmp	.+28     	; 0x2cbe <__addsf3x+0x98>
    2ca2:	ba 0f       	add	r27, r26
    2ca4:	62 1f       	adc	r22, r18
    2ca6:	73 1f       	adc	r23, r19
    2ca8:	84 1f       	adc	r24, r20
    2caa:	48 f4       	brcc	.+18     	; 0x2cbe <__addsf3x+0x98>
    2cac:	87 95       	ror	r24
    2cae:	77 95       	ror	r23
    2cb0:	67 95       	ror	r22
    2cb2:	b7 95       	ror	r27
    2cb4:	f7 95       	ror	r31
    2cb6:	9e 3f       	cpi	r25, 0xFE	; 254
    2cb8:	08 f0       	brcs	.+2      	; 0x2cbc <__addsf3x+0x96>
    2cba:	b3 cf       	rjmp	.-154    	; 0x2c22 <__addsf3+0x1e>
    2cbc:	93 95       	inc	r25
    2cbe:	88 0f       	add	r24, r24
    2cc0:	08 f0       	brcs	.+2      	; 0x2cc4 <__addsf3x+0x9e>
    2cc2:	99 27       	eor	r25, r25
    2cc4:	ee 0f       	add	r30, r30
    2cc6:	97 95       	ror	r25
    2cc8:	87 95       	ror	r24
    2cca:	08 95       	ret

00002ccc <__cmpsf2>:
    2ccc:	d9 d0       	rcall	.+434    	; 0x2e80 <__fp_cmp>
    2cce:	08 f4       	brcc	.+2      	; 0x2cd2 <__cmpsf2+0x6>
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	08 95       	ret

00002cd4 <__divsf3>:
    2cd4:	0c d0       	rcall	.+24     	; 0x2cee <__divsf3x>
    2cd6:	0f c1       	rjmp	.+542    	; 0x2ef6 <__fp_round>
    2cd8:	07 d1       	rcall	.+526    	; 0x2ee8 <__fp_pscB>
    2cda:	40 f0       	brcs	.+16     	; 0x2cec <__divsf3+0x18>
    2cdc:	fe d0       	rcall	.+508    	; 0x2eda <__fp_pscA>
    2cde:	30 f0       	brcs	.+12     	; 0x2cec <__divsf3+0x18>
    2ce0:	21 f4       	brne	.+8      	; 0x2cea <__divsf3+0x16>
    2ce2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ce4:	19 f0       	breq	.+6      	; 0x2cec <__divsf3+0x18>
    2ce6:	f0 c0       	rjmp	.+480    	; 0x2ec8 <__fp_inf>
    2ce8:	51 11       	cpse	r21, r1
    2cea:	39 c1       	rjmp	.+626    	; 0x2f5e <__fp_szero>
    2cec:	f3 c0       	rjmp	.+486    	; 0x2ed4 <__fp_nan>

00002cee <__divsf3x>:
    2cee:	14 d1       	rcall	.+552    	; 0x2f18 <__fp_split3>
    2cf0:	98 f3       	brcs	.-26     	; 0x2cd8 <__divsf3+0x4>

00002cf2 <__divsf3_pse>:
    2cf2:	99 23       	and	r25, r25
    2cf4:	c9 f3       	breq	.-14     	; 0x2ce8 <__divsf3+0x14>
    2cf6:	55 23       	and	r21, r21
    2cf8:	b1 f3       	breq	.-20     	; 0x2ce6 <__divsf3+0x12>
    2cfa:	95 1b       	sub	r25, r21
    2cfc:	55 0b       	sbc	r21, r21
    2cfe:	bb 27       	eor	r27, r27
    2d00:	aa 27       	eor	r26, r26
    2d02:	62 17       	cp	r22, r18
    2d04:	73 07       	cpc	r23, r19
    2d06:	84 07       	cpc	r24, r20
    2d08:	38 f0       	brcs	.+14     	; 0x2d18 <__divsf3_pse+0x26>
    2d0a:	9f 5f       	subi	r25, 0xFF	; 255
    2d0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d0e:	22 0f       	add	r18, r18
    2d10:	33 1f       	adc	r19, r19
    2d12:	44 1f       	adc	r20, r20
    2d14:	aa 1f       	adc	r26, r26
    2d16:	a9 f3       	breq	.-22     	; 0x2d02 <__divsf3_pse+0x10>
    2d18:	33 d0       	rcall	.+102    	; 0x2d80 <__divsf3_pse+0x8e>
    2d1a:	0e 2e       	mov	r0, r30
    2d1c:	3a f0       	brmi	.+14     	; 0x2d2c <__divsf3_pse+0x3a>
    2d1e:	e0 e8       	ldi	r30, 0x80	; 128
    2d20:	30 d0       	rcall	.+96     	; 0x2d82 <__divsf3_pse+0x90>
    2d22:	91 50       	subi	r25, 0x01	; 1
    2d24:	50 40       	sbci	r21, 0x00	; 0
    2d26:	e6 95       	lsr	r30
    2d28:	00 1c       	adc	r0, r0
    2d2a:	ca f7       	brpl	.-14     	; 0x2d1e <__divsf3_pse+0x2c>
    2d2c:	29 d0       	rcall	.+82     	; 0x2d80 <__divsf3_pse+0x8e>
    2d2e:	fe 2f       	mov	r31, r30
    2d30:	27 d0       	rcall	.+78     	; 0x2d80 <__divsf3_pse+0x8e>
    2d32:	66 0f       	add	r22, r22
    2d34:	77 1f       	adc	r23, r23
    2d36:	88 1f       	adc	r24, r24
    2d38:	bb 1f       	adc	r27, r27
    2d3a:	26 17       	cp	r18, r22
    2d3c:	37 07       	cpc	r19, r23
    2d3e:	48 07       	cpc	r20, r24
    2d40:	ab 07       	cpc	r26, r27
    2d42:	b0 e8       	ldi	r27, 0x80	; 128
    2d44:	09 f0       	breq	.+2      	; 0x2d48 <__divsf3_pse+0x56>
    2d46:	bb 0b       	sbc	r27, r27
    2d48:	80 2d       	mov	r24, r0
    2d4a:	bf 01       	movw	r22, r30
    2d4c:	ff 27       	eor	r31, r31
    2d4e:	93 58       	subi	r25, 0x83	; 131
    2d50:	5f 4f       	sbci	r21, 0xFF	; 255
    2d52:	2a f0       	brmi	.+10     	; 0x2d5e <__divsf3_pse+0x6c>
    2d54:	9e 3f       	cpi	r25, 0xFE	; 254
    2d56:	51 05       	cpc	r21, r1
    2d58:	68 f0       	brcs	.+26     	; 0x2d74 <__divsf3_pse+0x82>
    2d5a:	b6 c0       	rjmp	.+364    	; 0x2ec8 <__fp_inf>
    2d5c:	00 c1       	rjmp	.+512    	; 0x2f5e <__fp_szero>
    2d5e:	5f 3f       	cpi	r21, 0xFF	; 255
    2d60:	ec f3       	brlt	.-6      	; 0x2d5c <__divsf3_pse+0x6a>
    2d62:	98 3e       	cpi	r25, 0xE8	; 232
    2d64:	dc f3       	brlt	.-10     	; 0x2d5c <__divsf3_pse+0x6a>
    2d66:	86 95       	lsr	r24
    2d68:	77 95       	ror	r23
    2d6a:	67 95       	ror	r22
    2d6c:	b7 95       	ror	r27
    2d6e:	f7 95       	ror	r31
    2d70:	9f 5f       	subi	r25, 0xFF	; 255
    2d72:	c9 f7       	brne	.-14     	; 0x2d66 <__divsf3_pse+0x74>
    2d74:	88 0f       	add	r24, r24
    2d76:	91 1d       	adc	r25, r1
    2d78:	96 95       	lsr	r25
    2d7a:	87 95       	ror	r24
    2d7c:	97 f9       	bld	r25, 7
    2d7e:	08 95       	ret
    2d80:	e1 e0       	ldi	r30, 0x01	; 1
    2d82:	66 0f       	add	r22, r22
    2d84:	77 1f       	adc	r23, r23
    2d86:	88 1f       	adc	r24, r24
    2d88:	bb 1f       	adc	r27, r27
    2d8a:	62 17       	cp	r22, r18
    2d8c:	73 07       	cpc	r23, r19
    2d8e:	84 07       	cpc	r24, r20
    2d90:	ba 07       	cpc	r27, r26
    2d92:	20 f0       	brcs	.+8      	; 0x2d9c <__divsf3_pse+0xaa>
    2d94:	62 1b       	sub	r22, r18
    2d96:	73 0b       	sbc	r23, r19
    2d98:	84 0b       	sbc	r24, r20
    2d9a:	ba 0b       	sbc	r27, r26
    2d9c:	ee 1f       	adc	r30, r30
    2d9e:	88 f7       	brcc	.-30     	; 0x2d82 <__divsf3_pse+0x90>
    2da0:	e0 95       	com	r30
    2da2:	08 95       	ret

00002da4 <__fixsfsi>:
    2da4:	04 d0       	rcall	.+8      	; 0x2dae <__fixunssfsi>
    2da6:	68 94       	set
    2da8:	b1 11       	cpse	r27, r1
    2daa:	d9 c0       	rjmp	.+434    	; 0x2f5e <__fp_szero>
    2dac:	08 95       	ret

00002dae <__fixunssfsi>:
    2dae:	bc d0       	rcall	.+376    	; 0x2f28 <__fp_splitA>
    2db0:	88 f0       	brcs	.+34     	; 0x2dd4 <__fixunssfsi+0x26>
    2db2:	9f 57       	subi	r25, 0x7F	; 127
    2db4:	90 f0       	brcs	.+36     	; 0x2dda <__fixunssfsi+0x2c>
    2db6:	b9 2f       	mov	r27, r25
    2db8:	99 27       	eor	r25, r25
    2dba:	b7 51       	subi	r27, 0x17	; 23
    2dbc:	a0 f0       	brcs	.+40     	; 0x2de6 <__fixunssfsi+0x38>
    2dbe:	d1 f0       	breq	.+52     	; 0x2df4 <__fixunssfsi+0x46>
    2dc0:	66 0f       	add	r22, r22
    2dc2:	77 1f       	adc	r23, r23
    2dc4:	88 1f       	adc	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	1a f0       	brmi	.+6      	; 0x2dd0 <__fixunssfsi+0x22>
    2dca:	ba 95       	dec	r27
    2dcc:	c9 f7       	brne	.-14     	; 0x2dc0 <__fixunssfsi+0x12>
    2dce:	12 c0       	rjmp	.+36     	; 0x2df4 <__fixunssfsi+0x46>
    2dd0:	b1 30       	cpi	r27, 0x01	; 1
    2dd2:	81 f0       	breq	.+32     	; 0x2df4 <__fixunssfsi+0x46>
    2dd4:	c3 d0       	rcall	.+390    	; 0x2f5c <__fp_zero>
    2dd6:	b1 e0       	ldi	r27, 0x01	; 1
    2dd8:	08 95       	ret
    2dda:	c0 c0       	rjmp	.+384    	; 0x2f5c <__fp_zero>
    2ddc:	67 2f       	mov	r22, r23
    2dde:	78 2f       	mov	r23, r24
    2de0:	88 27       	eor	r24, r24
    2de2:	b8 5f       	subi	r27, 0xF8	; 248
    2de4:	39 f0       	breq	.+14     	; 0x2df4 <__fixunssfsi+0x46>
    2de6:	b9 3f       	cpi	r27, 0xF9	; 249
    2de8:	cc f3       	brlt	.-14     	; 0x2ddc <__fixunssfsi+0x2e>
    2dea:	86 95       	lsr	r24
    2dec:	77 95       	ror	r23
    2dee:	67 95       	ror	r22
    2df0:	b3 95       	inc	r27
    2df2:	d9 f7       	brne	.-10     	; 0x2dea <__fixunssfsi+0x3c>
    2df4:	3e f4       	brtc	.+14     	; 0x2e04 <__fixunssfsi+0x56>
    2df6:	90 95       	com	r25
    2df8:	80 95       	com	r24
    2dfa:	70 95       	com	r23
    2dfc:	61 95       	neg	r22
    2dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2e00:	8f 4f       	sbci	r24, 0xFF	; 255
    2e02:	9f 4f       	sbci	r25, 0xFF	; 255
    2e04:	08 95       	ret

00002e06 <__floatunsisf>:
    2e06:	e8 94       	clt
    2e08:	09 c0       	rjmp	.+18     	; 0x2e1c <__floatsisf+0x12>

00002e0a <__floatsisf>:
    2e0a:	97 fb       	bst	r25, 7
    2e0c:	3e f4       	brtc	.+14     	; 0x2e1c <__floatsisf+0x12>
    2e0e:	90 95       	com	r25
    2e10:	80 95       	com	r24
    2e12:	70 95       	com	r23
    2e14:	61 95       	neg	r22
    2e16:	7f 4f       	sbci	r23, 0xFF	; 255
    2e18:	8f 4f       	sbci	r24, 0xFF	; 255
    2e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1c:	99 23       	and	r25, r25
    2e1e:	a9 f0       	breq	.+42     	; 0x2e4a <__floatsisf+0x40>
    2e20:	f9 2f       	mov	r31, r25
    2e22:	96 e9       	ldi	r25, 0x96	; 150
    2e24:	bb 27       	eor	r27, r27
    2e26:	93 95       	inc	r25
    2e28:	f6 95       	lsr	r31
    2e2a:	87 95       	ror	r24
    2e2c:	77 95       	ror	r23
    2e2e:	67 95       	ror	r22
    2e30:	b7 95       	ror	r27
    2e32:	f1 11       	cpse	r31, r1
    2e34:	f8 cf       	rjmp	.-16     	; 0x2e26 <__floatsisf+0x1c>
    2e36:	fa f4       	brpl	.+62     	; 0x2e76 <__floatsisf+0x6c>
    2e38:	bb 0f       	add	r27, r27
    2e3a:	11 f4       	brne	.+4      	; 0x2e40 <__floatsisf+0x36>
    2e3c:	60 ff       	sbrs	r22, 0
    2e3e:	1b c0       	rjmp	.+54     	; 0x2e76 <__floatsisf+0x6c>
    2e40:	6f 5f       	subi	r22, 0xFF	; 255
    2e42:	7f 4f       	sbci	r23, 0xFF	; 255
    2e44:	8f 4f       	sbci	r24, 0xFF	; 255
    2e46:	9f 4f       	sbci	r25, 0xFF	; 255
    2e48:	16 c0       	rjmp	.+44     	; 0x2e76 <__floatsisf+0x6c>
    2e4a:	88 23       	and	r24, r24
    2e4c:	11 f0       	breq	.+4      	; 0x2e52 <__floatsisf+0x48>
    2e4e:	96 e9       	ldi	r25, 0x96	; 150
    2e50:	11 c0       	rjmp	.+34     	; 0x2e74 <__floatsisf+0x6a>
    2e52:	77 23       	and	r23, r23
    2e54:	21 f0       	breq	.+8      	; 0x2e5e <__floatsisf+0x54>
    2e56:	9e e8       	ldi	r25, 0x8E	; 142
    2e58:	87 2f       	mov	r24, r23
    2e5a:	76 2f       	mov	r23, r22
    2e5c:	05 c0       	rjmp	.+10     	; 0x2e68 <__floatsisf+0x5e>
    2e5e:	66 23       	and	r22, r22
    2e60:	71 f0       	breq	.+28     	; 0x2e7e <__floatsisf+0x74>
    2e62:	96 e8       	ldi	r25, 0x86	; 134
    2e64:	86 2f       	mov	r24, r22
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	60 e0       	ldi	r22, 0x00	; 0
    2e6a:	2a f0       	brmi	.+10     	; 0x2e76 <__floatsisf+0x6c>
    2e6c:	9a 95       	dec	r25
    2e6e:	66 0f       	add	r22, r22
    2e70:	77 1f       	adc	r23, r23
    2e72:	88 1f       	adc	r24, r24
    2e74:	da f7       	brpl	.-10     	; 0x2e6c <__floatsisf+0x62>
    2e76:	88 0f       	add	r24, r24
    2e78:	96 95       	lsr	r25
    2e7a:	87 95       	ror	r24
    2e7c:	97 f9       	bld	r25, 7
    2e7e:	08 95       	ret

00002e80 <__fp_cmp>:
    2e80:	99 0f       	add	r25, r25
    2e82:	00 08       	sbc	r0, r0
    2e84:	55 0f       	add	r21, r21
    2e86:	aa 0b       	sbc	r26, r26
    2e88:	e0 e8       	ldi	r30, 0x80	; 128
    2e8a:	fe ef       	ldi	r31, 0xFE	; 254
    2e8c:	16 16       	cp	r1, r22
    2e8e:	17 06       	cpc	r1, r23
    2e90:	e8 07       	cpc	r30, r24
    2e92:	f9 07       	cpc	r31, r25
    2e94:	c0 f0       	brcs	.+48     	; 0x2ec6 <__fp_cmp+0x46>
    2e96:	12 16       	cp	r1, r18
    2e98:	13 06       	cpc	r1, r19
    2e9a:	e4 07       	cpc	r30, r20
    2e9c:	f5 07       	cpc	r31, r21
    2e9e:	98 f0       	brcs	.+38     	; 0x2ec6 <__fp_cmp+0x46>
    2ea0:	62 1b       	sub	r22, r18
    2ea2:	73 0b       	sbc	r23, r19
    2ea4:	84 0b       	sbc	r24, r20
    2ea6:	95 0b       	sbc	r25, r21
    2ea8:	39 f4       	brne	.+14     	; 0x2eb8 <__fp_cmp+0x38>
    2eaa:	0a 26       	eor	r0, r26
    2eac:	61 f0       	breq	.+24     	; 0x2ec6 <__fp_cmp+0x46>
    2eae:	23 2b       	or	r18, r19
    2eb0:	24 2b       	or	r18, r20
    2eb2:	25 2b       	or	r18, r21
    2eb4:	21 f4       	brne	.+8      	; 0x2ebe <__fp_cmp+0x3e>
    2eb6:	08 95       	ret
    2eb8:	0a 26       	eor	r0, r26
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <__fp_cmp+0x3e>
    2ebc:	a1 40       	sbci	r26, 0x01	; 1
    2ebe:	a6 95       	lsr	r26
    2ec0:	8f ef       	ldi	r24, 0xFF	; 255
    2ec2:	81 1d       	adc	r24, r1
    2ec4:	81 1d       	adc	r24, r1
    2ec6:	08 95       	ret

00002ec8 <__fp_inf>:
    2ec8:	97 f9       	bld	r25, 7
    2eca:	9f 67       	ori	r25, 0x7F	; 127
    2ecc:	80 e8       	ldi	r24, 0x80	; 128
    2ece:	70 e0       	ldi	r23, 0x00	; 0
    2ed0:	60 e0       	ldi	r22, 0x00	; 0
    2ed2:	08 95       	ret

00002ed4 <__fp_nan>:
    2ed4:	9f ef       	ldi	r25, 0xFF	; 255
    2ed6:	80 ec       	ldi	r24, 0xC0	; 192
    2ed8:	08 95       	ret

00002eda <__fp_pscA>:
    2eda:	00 24       	eor	r0, r0
    2edc:	0a 94       	dec	r0
    2ede:	16 16       	cp	r1, r22
    2ee0:	17 06       	cpc	r1, r23
    2ee2:	18 06       	cpc	r1, r24
    2ee4:	09 06       	cpc	r0, r25
    2ee6:	08 95       	ret

00002ee8 <__fp_pscB>:
    2ee8:	00 24       	eor	r0, r0
    2eea:	0a 94       	dec	r0
    2eec:	12 16       	cp	r1, r18
    2eee:	13 06       	cpc	r1, r19
    2ef0:	14 06       	cpc	r1, r20
    2ef2:	05 06       	cpc	r0, r21
    2ef4:	08 95       	ret

00002ef6 <__fp_round>:
    2ef6:	09 2e       	mov	r0, r25
    2ef8:	03 94       	inc	r0
    2efa:	00 0c       	add	r0, r0
    2efc:	11 f4       	brne	.+4      	; 0x2f02 <__fp_round+0xc>
    2efe:	88 23       	and	r24, r24
    2f00:	52 f0       	brmi	.+20     	; 0x2f16 <__fp_round+0x20>
    2f02:	bb 0f       	add	r27, r27
    2f04:	40 f4       	brcc	.+16     	; 0x2f16 <__fp_round+0x20>
    2f06:	bf 2b       	or	r27, r31
    2f08:	11 f4       	brne	.+4      	; 0x2f0e <__fp_round+0x18>
    2f0a:	60 ff       	sbrs	r22, 0
    2f0c:	04 c0       	rjmp	.+8      	; 0x2f16 <__fp_round+0x20>
    2f0e:	6f 5f       	subi	r22, 0xFF	; 255
    2f10:	7f 4f       	sbci	r23, 0xFF	; 255
    2f12:	8f 4f       	sbci	r24, 0xFF	; 255
    2f14:	9f 4f       	sbci	r25, 0xFF	; 255
    2f16:	08 95       	ret

00002f18 <__fp_split3>:
    2f18:	57 fd       	sbrc	r21, 7
    2f1a:	90 58       	subi	r25, 0x80	; 128
    2f1c:	44 0f       	add	r20, r20
    2f1e:	55 1f       	adc	r21, r21
    2f20:	59 f0       	breq	.+22     	; 0x2f38 <__fp_splitA+0x10>
    2f22:	5f 3f       	cpi	r21, 0xFF	; 255
    2f24:	71 f0       	breq	.+28     	; 0x2f42 <__fp_splitA+0x1a>
    2f26:	47 95       	ror	r20

00002f28 <__fp_splitA>:
    2f28:	88 0f       	add	r24, r24
    2f2a:	97 fb       	bst	r25, 7
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	61 f0       	breq	.+24     	; 0x2f48 <__fp_splitA+0x20>
    2f30:	9f 3f       	cpi	r25, 0xFF	; 255
    2f32:	79 f0       	breq	.+30     	; 0x2f52 <__fp_splitA+0x2a>
    2f34:	87 95       	ror	r24
    2f36:	08 95       	ret
    2f38:	12 16       	cp	r1, r18
    2f3a:	13 06       	cpc	r1, r19
    2f3c:	14 06       	cpc	r1, r20
    2f3e:	55 1f       	adc	r21, r21
    2f40:	f2 cf       	rjmp	.-28     	; 0x2f26 <__fp_split3+0xe>
    2f42:	46 95       	lsr	r20
    2f44:	f1 df       	rcall	.-30     	; 0x2f28 <__fp_splitA>
    2f46:	08 c0       	rjmp	.+16     	; 0x2f58 <__fp_splitA+0x30>
    2f48:	16 16       	cp	r1, r22
    2f4a:	17 06       	cpc	r1, r23
    2f4c:	18 06       	cpc	r1, r24
    2f4e:	99 1f       	adc	r25, r25
    2f50:	f1 cf       	rjmp	.-30     	; 0x2f34 <__fp_splitA+0xc>
    2f52:	86 95       	lsr	r24
    2f54:	71 05       	cpc	r23, r1
    2f56:	61 05       	cpc	r22, r1
    2f58:	08 94       	sec
    2f5a:	08 95       	ret

00002f5c <__fp_zero>:
    2f5c:	e8 94       	clt

00002f5e <__fp_szero>:
    2f5e:	bb 27       	eor	r27, r27
    2f60:	66 27       	eor	r22, r22
    2f62:	77 27       	eor	r23, r23
    2f64:	cb 01       	movw	r24, r22
    2f66:	97 f9       	bld	r25, 7
    2f68:	08 95       	ret

00002f6a <__gesf2>:
    2f6a:	8a df       	rcall	.-236    	; 0x2e80 <__fp_cmp>
    2f6c:	08 f4       	brcc	.+2      	; 0x2f70 <__gesf2+0x6>
    2f6e:	8f ef       	ldi	r24, 0xFF	; 255
    2f70:	08 95       	ret

00002f72 <__mulsf3>:
    2f72:	0b d0       	rcall	.+22     	; 0x2f8a <__mulsf3x>
    2f74:	c0 cf       	rjmp	.-128    	; 0x2ef6 <__fp_round>
    2f76:	b1 df       	rcall	.-158    	; 0x2eda <__fp_pscA>
    2f78:	28 f0       	brcs	.+10     	; 0x2f84 <__mulsf3+0x12>
    2f7a:	b6 df       	rcall	.-148    	; 0x2ee8 <__fp_pscB>
    2f7c:	18 f0       	brcs	.+6      	; 0x2f84 <__mulsf3+0x12>
    2f7e:	95 23       	and	r25, r21
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <__mulsf3+0x12>
    2f82:	a2 cf       	rjmp	.-188    	; 0x2ec8 <__fp_inf>
    2f84:	a7 cf       	rjmp	.-178    	; 0x2ed4 <__fp_nan>
    2f86:	11 24       	eor	r1, r1
    2f88:	ea cf       	rjmp	.-44     	; 0x2f5e <__fp_szero>

00002f8a <__mulsf3x>:
    2f8a:	c6 df       	rcall	.-116    	; 0x2f18 <__fp_split3>
    2f8c:	a0 f3       	brcs	.-24     	; 0x2f76 <__mulsf3+0x4>

00002f8e <__mulsf3_pse>:
    2f8e:	95 9f       	mul	r25, r21
    2f90:	d1 f3       	breq	.-12     	; 0x2f86 <__mulsf3+0x14>
    2f92:	95 0f       	add	r25, r21
    2f94:	50 e0       	ldi	r21, 0x00	; 0
    2f96:	55 1f       	adc	r21, r21
    2f98:	62 9f       	mul	r22, r18
    2f9a:	f0 01       	movw	r30, r0
    2f9c:	72 9f       	mul	r23, r18
    2f9e:	bb 27       	eor	r27, r27
    2fa0:	f0 0d       	add	r31, r0
    2fa2:	b1 1d       	adc	r27, r1
    2fa4:	63 9f       	mul	r22, r19
    2fa6:	aa 27       	eor	r26, r26
    2fa8:	f0 0d       	add	r31, r0
    2faa:	b1 1d       	adc	r27, r1
    2fac:	aa 1f       	adc	r26, r26
    2fae:	64 9f       	mul	r22, r20
    2fb0:	66 27       	eor	r22, r22
    2fb2:	b0 0d       	add	r27, r0
    2fb4:	a1 1d       	adc	r26, r1
    2fb6:	66 1f       	adc	r22, r22
    2fb8:	82 9f       	mul	r24, r18
    2fba:	22 27       	eor	r18, r18
    2fbc:	b0 0d       	add	r27, r0
    2fbe:	a1 1d       	adc	r26, r1
    2fc0:	62 1f       	adc	r22, r18
    2fc2:	73 9f       	mul	r23, r19
    2fc4:	b0 0d       	add	r27, r0
    2fc6:	a1 1d       	adc	r26, r1
    2fc8:	62 1f       	adc	r22, r18
    2fca:	83 9f       	mul	r24, r19
    2fcc:	a0 0d       	add	r26, r0
    2fce:	61 1d       	adc	r22, r1
    2fd0:	22 1f       	adc	r18, r18
    2fd2:	74 9f       	mul	r23, r20
    2fd4:	33 27       	eor	r19, r19
    2fd6:	a0 0d       	add	r26, r0
    2fd8:	61 1d       	adc	r22, r1
    2fda:	23 1f       	adc	r18, r19
    2fdc:	84 9f       	mul	r24, r20
    2fde:	60 0d       	add	r22, r0
    2fe0:	21 1d       	adc	r18, r1
    2fe2:	82 2f       	mov	r24, r18
    2fe4:	76 2f       	mov	r23, r22
    2fe6:	6a 2f       	mov	r22, r26
    2fe8:	11 24       	eor	r1, r1
    2fea:	9f 57       	subi	r25, 0x7F	; 127
    2fec:	50 40       	sbci	r21, 0x00	; 0
    2fee:	8a f0       	brmi	.+34     	; 0x3012 <__mulsf3_pse+0x84>
    2ff0:	e1 f0       	breq	.+56     	; 0x302a <__mulsf3_pse+0x9c>
    2ff2:	88 23       	and	r24, r24
    2ff4:	4a f0       	brmi	.+18     	; 0x3008 <__mulsf3_pse+0x7a>
    2ff6:	ee 0f       	add	r30, r30
    2ff8:	ff 1f       	adc	r31, r31
    2ffa:	bb 1f       	adc	r27, r27
    2ffc:	66 1f       	adc	r22, r22
    2ffe:	77 1f       	adc	r23, r23
    3000:	88 1f       	adc	r24, r24
    3002:	91 50       	subi	r25, 0x01	; 1
    3004:	50 40       	sbci	r21, 0x00	; 0
    3006:	a9 f7       	brne	.-22     	; 0x2ff2 <__mulsf3_pse+0x64>
    3008:	9e 3f       	cpi	r25, 0xFE	; 254
    300a:	51 05       	cpc	r21, r1
    300c:	70 f0       	brcs	.+28     	; 0x302a <__mulsf3_pse+0x9c>
    300e:	5c cf       	rjmp	.-328    	; 0x2ec8 <__fp_inf>
    3010:	a6 cf       	rjmp	.-180    	; 0x2f5e <__fp_szero>
    3012:	5f 3f       	cpi	r21, 0xFF	; 255
    3014:	ec f3       	brlt	.-6      	; 0x3010 <__mulsf3_pse+0x82>
    3016:	98 3e       	cpi	r25, 0xE8	; 232
    3018:	dc f3       	brlt	.-10     	; 0x3010 <__mulsf3_pse+0x82>
    301a:	86 95       	lsr	r24
    301c:	77 95       	ror	r23
    301e:	67 95       	ror	r22
    3020:	b7 95       	ror	r27
    3022:	f7 95       	ror	r31
    3024:	e7 95       	ror	r30
    3026:	9f 5f       	subi	r25, 0xFF	; 255
    3028:	c1 f7       	brne	.-16     	; 0x301a <__mulsf3_pse+0x8c>
    302a:	fe 2b       	or	r31, r30
    302c:	88 0f       	add	r24, r24
    302e:	91 1d       	adc	r25, r1
    3030:	96 95       	lsr	r25
    3032:	87 95       	ror	r24
    3034:	97 f9       	bld	r25, 7
    3036:	08 95       	ret

00003038 <__udivmodhi4>:
    3038:	aa 1b       	sub	r26, r26
    303a:	bb 1b       	sub	r27, r27
    303c:	51 e1       	ldi	r21, 0x11	; 17
    303e:	07 c0       	rjmp	.+14     	; 0x304e <__udivmodhi4_ep>

00003040 <__udivmodhi4_loop>:
    3040:	aa 1f       	adc	r26, r26
    3042:	bb 1f       	adc	r27, r27
    3044:	a6 17       	cp	r26, r22
    3046:	b7 07       	cpc	r27, r23
    3048:	10 f0       	brcs	.+4      	; 0x304e <__udivmodhi4_ep>
    304a:	a6 1b       	sub	r26, r22
    304c:	b7 0b       	sbc	r27, r23

0000304e <__udivmodhi4_ep>:
    304e:	88 1f       	adc	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	5a 95       	dec	r21
    3054:	a9 f7       	brne	.-22     	; 0x3040 <__udivmodhi4_loop>
    3056:	80 95       	com	r24
    3058:	90 95       	com	r25
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	08 95       	ret

00003060 <__divmodhi4>:
    3060:	97 fb       	bst	r25, 7
    3062:	09 2e       	mov	r0, r25
    3064:	07 26       	eor	r0, r23
    3066:	0a d0       	rcall	.+20     	; 0x307c <__divmodhi4_neg1>
    3068:	77 fd       	sbrc	r23, 7
    306a:	04 d0       	rcall	.+8      	; 0x3074 <__divmodhi4_neg2>
    306c:	e5 df       	rcall	.-54     	; 0x3038 <__udivmodhi4>
    306e:	06 d0       	rcall	.+12     	; 0x307c <__divmodhi4_neg1>
    3070:	00 20       	and	r0, r0
    3072:	1a f4       	brpl	.+6      	; 0x307a <__divmodhi4_exit>

00003074 <__divmodhi4_neg2>:
    3074:	70 95       	com	r23
    3076:	61 95       	neg	r22
    3078:	7f 4f       	sbci	r23, 0xFF	; 255

0000307a <__divmodhi4_exit>:
    307a:	08 95       	ret

0000307c <__divmodhi4_neg1>:
    307c:	f6 f7       	brtc	.-4      	; 0x307a <__divmodhi4_exit>
    307e:	90 95       	com	r25
    3080:	81 95       	neg	r24
    3082:	9f 4f       	sbci	r25, 0xFF	; 255
    3084:	08 95       	ret

00003086 <__udivmodsi4>:
    3086:	a1 e2       	ldi	r26, 0x21	; 33
    3088:	1a 2e       	mov	r1, r26
    308a:	aa 1b       	sub	r26, r26
    308c:	bb 1b       	sub	r27, r27
    308e:	fd 01       	movw	r30, r26
    3090:	0d c0       	rjmp	.+26     	; 0x30ac <__udivmodsi4_ep>

00003092 <__udivmodsi4_loop>:
    3092:	aa 1f       	adc	r26, r26
    3094:	bb 1f       	adc	r27, r27
    3096:	ee 1f       	adc	r30, r30
    3098:	ff 1f       	adc	r31, r31
    309a:	a2 17       	cp	r26, r18
    309c:	b3 07       	cpc	r27, r19
    309e:	e4 07       	cpc	r30, r20
    30a0:	f5 07       	cpc	r31, r21
    30a2:	20 f0       	brcs	.+8      	; 0x30ac <__udivmodsi4_ep>
    30a4:	a2 1b       	sub	r26, r18
    30a6:	b3 0b       	sbc	r27, r19
    30a8:	e4 0b       	sbc	r30, r20
    30aa:	f5 0b       	sbc	r31, r21

000030ac <__udivmodsi4_ep>:
    30ac:	66 1f       	adc	r22, r22
    30ae:	77 1f       	adc	r23, r23
    30b0:	88 1f       	adc	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	1a 94       	dec	r1
    30b6:	69 f7       	brne	.-38     	; 0x3092 <__udivmodsi4_loop>
    30b8:	60 95       	com	r22
    30ba:	70 95       	com	r23
    30bc:	80 95       	com	r24
    30be:	90 95       	com	r25
    30c0:	9b 01       	movw	r18, r22
    30c2:	ac 01       	movw	r20, r24
    30c4:	bd 01       	movw	r22, r26
    30c6:	cf 01       	movw	r24, r30
    30c8:	08 95       	ret

000030ca <__divmodsi4>:
    30ca:	97 fb       	bst	r25, 7
    30cc:	09 2e       	mov	r0, r25
    30ce:	05 26       	eor	r0, r21
    30d0:	0e d0       	rcall	.+28     	; 0x30ee <__divmodsi4_neg1>
    30d2:	57 fd       	sbrc	r21, 7
    30d4:	04 d0       	rcall	.+8      	; 0x30de <__divmodsi4_neg2>
    30d6:	d7 df       	rcall	.-82     	; 0x3086 <__udivmodsi4>
    30d8:	0a d0       	rcall	.+20     	; 0x30ee <__divmodsi4_neg1>
    30da:	00 1c       	adc	r0, r0
    30dc:	38 f4       	brcc	.+14     	; 0x30ec <__divmodsi4_exit>

000030de <__divmodsi4_neg2>:
    30de:	50 95       	com	r21
    30e0:	40 95       	com	r20
    30e2:	30 95       	com	r19
    30e4:	21 95       	neg	r18
    30e6:	3f 4f       	sbci	r19, 0xFF	; 255
    30e8:	4f 4f       	sbci	r20, 0xFF	; 255
    30ea:	5f 4f       	sbci	r21, 0xFF	; 255

000030ec <__divmodsi4_exit>:
    30ec:	08 95       	ret

000030ee <__divmodsi4_neg1>:
    30ee:	f6 f7       	brtc	.-4      	; 0x30ec <__divmodsi4_exit>
    30f0:	90 95       	com	r25
    30f2:	80 95       	com	r24
    30f4:	70 95       	com	r23
    30f6:	61 95       	neg	r22
    30f8:	7f 4f       	sbci	r23, 0xFF	; 255
    30fa:	8f 4f       	sbci	r24, 0xFF	; 255
    30fc:	9f 4f       	sbci	r25, 0xFF	; 255
    30fe:	08 95       	ret

00003100 <dtostrf>:
    3100:	ef 92       	push	r14
    3102:	ff 92       	push	r15
    3104:	0f 93       	push	r16
    3106:	1f 93       	push	r17
    3108:	32 2f       	mov	r19, r18
    310a:	f0 2e       	mov	r15, r16
    310c:	47 ff       	sbrs	r20, 7
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <dtostrf+0x14>
    3110:	a4 e1       	ldi	r26, 0x14	; 20
    3112:	01 c0       	rjmp	.+2      	; 0x3116 <dtostrf+0x16>
    3114:	a4 e0       	ldi	r26, 0x04	; 4
    3116:	e4 2f       	mov	r30, r20
    3118:	ff 27       	eor	r31, r31
    311a:	e7 fd       	sbrc	r30, 7
    311c:	f0 95       	com	r31
    311e:	f7 ff       	sbrs	r31, 7
    3120:	03 c0       	rjmp	.+6      	; 0x3128 <dtostrf+0x28>
    3122:	f0 95       	com	r31
    3124:	e1 95       	neg	r30
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	4f 2d       	mov	r20, r15
    312a:	51 2f       	mov	r21, r17
    312c:	2e 2f       	mov	r18, r30
    312e:	03 2f       	mov	r16, r19
    3130:	ea 2e       	mov	r14, r26
    3132:	0e 94 d6 18 	call	0x31ac	; 0x31ac <dtoa_prf>
    3136:	8f 2d       	mov	r24, r15
    3138:	91 2f       	mov	r25, r17
    313a:	1f 91       	pop	r17
    313c:	0f 91       	pop	r16
    313e:	ff 90       	pop	r15
    3140:	ef 90       	pop	r14
    3142:	08 95       	ret

00003144 <ltoa>:
    3144:	fa 01       	movw	r30, r20
    3146:	cf 93       	push	r28
    3148:	ff 93       	push	r31
    314a:	ef 93       	push	r30
    314c:	22 30       	cpi	r18, 0x02	; 2
    314e:	44 f1       	brlt	.+80     	; 0x31a0 <ltoa+0x5c>
    3150:	25 32       	cpi	r18, 0x25	; 37
    3152:	34 f5       	brge	.+76     	; 0x31a0 <ltoa+0x5c>
    3154:	c2 2f       	mov	r28, r18
    3156:	e8 94       	clt
    3158:	ca 30       	cpi	r28, 0x0A	; 10
    315a:	49 f4       	brne	.+18     	; 0x316e <ltoa+0x2a>
    315c:	97 fb       	bst	r25, 7
    315e:	3e f4       	brtc	.+14     	; 0x316e <ltoa+0x2a>
    3160:	90 95       	com	r25
    3162:	80 95       	com	r24
    3164:	70 95       	com	r23
    3166:	61 95       	neg	r22
    3168:	7f 4f       	sbci	r23, 0xFF	; 255
    316a:	8f 4f       	sbci	r24, 0xFF	; 255
    316c:	9f 4f       	sbci	r25, 0xFF	; 255
    316e:	2c 2f       	mov	r18, r28
    3170:	33 27       	eor	r19, r19
    3172:	44 27       	eor	r20, r20
    3174:	55 27       	eor	r21, r21
    3176:	ff 93       	push	r31
    3178:	ef 93       	push	r30
    317a:	0e 94 43 18 	call	0x3086	; 0x3086 <__udivmodsi4>
    317e:	ef 91       	pop	r30
    3180:	ff 91       	pop	r31
    3182:	60 5d       	subi	r22, 0xD0	; 208
    3184:	6a 33       	cpi	r22, 0x3A	; 58
    3186:	0c f0       	brlt	.+2      	; 0x318a <ltoa+0x46>
    3188:	69 5d       	subi	r22, 0xD9	; 217
    318a:	61 93       	st	Z+, r22
    318c:	b9 01       	movw	r22, r18
    318e:	ca 01       	movw	r24, r20
    3190:	60 50       	subi	r22, 0x00	; 0
    3192:	70 40       	sbci	r23, 0x00	; 0
    3194:	80 40       	sbci	r24, 0x00	; 0
    3196:	90 40       	sbci	r25, 0x00	; 0
    3198:	51 f7       	brne	.-44     	; 0x316e <ltoa+0x2a>
    319a:	16 f4       	brtc	.+4      	; 0x31a0 <ltoa+0x5c>
    319c:	cd e2       	ldi	r28, 0x2D	; 45
    319e:	c1 93       	st	Z+, r28
    31a0:	10 82       	st	Z, r1
    31a2:	8f 91       	pop	r24
    31a4:	9f 91       	pop	r25
    31a6:	cf 91       	pop	r28
    31a8:	0c 94 05 1b 	jmp	0x360a	; 0x360a <strrev>

000031ac <dtoa_prf>:
    31ac:	a9 e0       	ldi	r26, 0x09	; 9
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	ec ed       	ldi	r30, 0xDC	; 220
    31b2:	f8 e1       	ldi	r31, 0x18	; 24
    31b4:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__prologue_saves__+0x10>
    31b8:	6a 01       	movw	r12, r20
    31ba:	f2 2e       	mov	r15, r18
    31bc:	10 2f       	mov	r17, r16
    31be:	0c 33       	cpi	r16, 0x3C	; 60
    31c0:	18 f4       	brcc	.+6      	; 0x31c8 <dtoa_prf+0x1c>
    31c2:	b0 2e       	mov	r11, r16
    31c4:	b3 94       	inc	r11
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <dtoa_prf+0x20>
    31c8:	ec e3       	ldi	r30, 0x3C	; 60
    31ca:	be 2e       	mov	r11, r30
    31cc:	ae 01       	movw	r20, r28
    31ce:	4f 5f       	subi	r20, 0xFF	; 255
    31d0:	5f 4f       	sbci	r21, 0xFF	; 255
    31d2:	27 e0       	ldi	r18, 0x07	; 7
    31d4:	0b 2d       	mov	r16, r11
    31d6:	0e 94 2d 1a 	call	0x345a	; 0x345a <__ftoa_engine>
    31da:	29 81       	ldd	r18, Y+1	; 0x01
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	a9 01       	movw	r20, r18
    31e0:	49 70       	andi	r20, 0x09	; 9
    31e2:	50 70       	andi	r21, 0x00	; 0
    31e4:	41 30       	cpi	r20, 0x01	; 1
    31e6:	51 05       	cpc	r21, r1
    31e8:	31 f0       	breq	.+12     	; 0x31f6 <dtoa_prf+0x4a>
    31ea:	e1 fc       	sbrc	r14, 1
    31ec:	06 c0       	rjmp	.+12     	; 0x31fa <dtoa_prf+0x4e>
    31ee:	e0 fe       	sbrs	r14, 0
    31f0:	06 c0       	rjmp	.+12     	; 0x31fe <dtoa_prf+0x52>
    31f2:	e0 e2       	ldi	r30, 0x20	; 32
    31f4:	05 c0       	rjmp	.+10     	; 0x3200 <dtoa_prf+0x54>
    31f6:	ed e2       	ldi	r30, 0x2D	; 45
    31f8:	03 c0       	rjmp	.+6      	; 0x3200 <dtoa_prf+0x54>
    31fa:	eb e2       	ldi	r30, 0x2B	; 43
    31fc:	01 c0       	rjmp	.+2      	; 0x3200 <dtoa_prf+0x54>
    31fe:	e0 e0       	ldi	r30, 0x00	; 0
    3200:	23 ff       	sbrs	r18, 3
    3202:	37 c0       	rjmp	.+110    	; 0x3272 <dtoa_prf+0xc6>
    3204:	ee 23       	and	r30, r30
    3206:	11 f0       	breq	.+4      	; 0x320c <dtoa_prf+0x60>
    3208:	84 e0       	ldi	r24, 0x04	; 4
    320a:	01 c0       	rjmp	.+2      	; 0x320e <dtoa_prf+0x62>
    320c:	83 e0       	ldi	r24, 0x03	; 3
    320e:	8f 15       	cp	r24, r15
    3210:	18 f4       	brcc	.+6      	; 0x3218 <dtoa_prf+0x6c>
    3212:	f8 1a       	sub	r15, r24
    3214:	8f 2d       	mov	r24, r15
    3216:	01 c0       	rjmp	.+2      	; 0x321a <dtoa_prf+0x6e>
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	e4 fc       	sbrc	r14, 4
    321c:	0b c0       	rjmp	.+22     	; 0x3234 <dtoa_prf+0x88>
    321e:	98 2f       	mov	r25, r24
    3220:	d6 01       	movw	r26, r12
    3222:	20 e2       	ldi	r18, 0x20	; 32
    3224:	02 c0       	rjmp	.+4      	; 0x322a <dtoa_prf+0x7e>
    3226:	2d 93       	st	X+, r18
    3228:	91 50       	subi	r25, 0x01	; 1
    322a:	99 23       	and	r25, r25
    322c:	e1 f7       	brne	.-8      	; 0x3226 <dtoa_prf+0x7a>
    322e:	c8 0e       	add	r12, r24
    3230:	d1 1c       	adc	r13, r1
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	ee 23       	and	r30, r30
    3236:	19 f0       	breq	.+6      	; 0x323e <dtoa_prf+0x92>
    3238:	d6 01       	movw	r26, r12
    323a:	ed 93       	st	X+, r30
    323c:	6d 01       	movw	r12, r26
    323e:	f6 01       	movw	r30, r12
    3240:	31 96       	adiw	r30, 0x01	; 1
    3242:	e2 fe       	sbrs	r14, 2
    3244:	05 c0       	rjmp	.+10     	; 0x3250 <dtoa_prf+0xa4>
    3246:	9e e4       	ldi	r25, 0x4E	; 78
    3248:	d6 01       	movw	r26, r12
    324a:	9c 93       	st	X, r25
    324c:	21 e4       	ldi	r18, 0x41	; 65
    324e:	04 c0       	rjmp	.+8      	; 0x3258 <dtoa_prf+0xac>
    3250:	9e e6       	ldi	r25, 0x6E	; 110
    3252:	d6 01       	movw	r26, r12
    3254:	9c 93       	st	X, r25
    3256:	21 e6       	ldi	r18, 0x61	; 97
    3258:	11 96       	adiw	r26, 0x01	; 1
    325a:	2c 93       	st	X, r18
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	32 96       	adiw	r30, 0x02	; 2
    3260:	98 2f       	mov	r25, r24
    3262:	df 01       	movw	r26, r30
    3264:	20 e2       	ldi	r18, 0x20	; 32
    3266:	02 c0       	rjmp	.+4      	; 0x326c <dtoa_prf+0xc0>
    3268:	2d 93       	st	X+, r18
    326a:	91 50       	subi	r25, 0x01	; 1
    326c:	99 23       	and	r25, r25
    326e:	e1 f7       	brne	.-8      	; 0x3268 <dtoa_prf+0xbc>
    3270:	3d c0       	rjmp	.+122    	; 0x32ec <dtoa_prf+0x140>
    3272:	22 ff       	sbrs	r18, 2
    3274:	41 c0       	rjmp	.+130    	; 0x32f8 <dtoa_prf+0x14c>
    3276:	ee 23       	and	r30, r30
    3278:	11 f0       	breq	.+4      	; 0x327e <dtoa_prf+0xd2>
    327a:	84 e0       	ldi	r24, 0x04	; 4
    327c:	01 c0       	rjmp	.+2      	; 0x3280 <dtoa_prf+0xd4>
    327e:	83 e0       	ldi	r24, 0x03	; 3
    3280:	8f 15       	cp	r24, r15
    3282:	18 f4       	brcc	.+6      	; 0x328a <dtoa_prf+0xde>
    3284:	f8 1a       	sub	r15, r24
    3286:	8f 2d       	mov	r24, r15
    3288:	01 c0       	rjmp	.+2      	; 0x328c <dtoa_prf+0xe0>
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	e4 fc       	sbrc	r14, 4
    328e:	0b c0       	rjmp	.+22     	; 0x32a6 <dtoa_prf+0xfa>
    3290:	98 2f       	mov	r25, r24
    3292:	d6 01       	movw	r26, r12
    3294:	20 e2       	ldi	r18, 0x20	; 32
    3296:	02 c0       	rjmp	.+4      	; 0x329c <dtoa_prf+0xf0>
    3298:	2d 93       	st	X+, r18
    329a:	91 50       	subi	r25, 0x01	; 1
    329c:	99 23       	and	r25, r25
    329e:	e1 f7       	brne	.-8      	; 0x3298 <dtoa_prf+0xec>
    32a0:	c8 0e       	add	r12, r24
    32a2:	d1 1c       	adc	r13, r1
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	ee 23       	and	r30, r30
    32a8:	19 f0       	breq	.+6      	; 0x32b0 <dtoa_prf+0x104>
    32aa:	d6 01       	movw	r26, r12
    32ac:	ed 93       	st	X+, r30
    32ae:	6d 01       	movw	r12, r26
    32b0:	f6 01       	movw	r30, r12
    32b2:	31 96       	adiw	r30, 0x01	; 1
    32b4:	e2 fe       	sbrs	r14, 2
    32b6:	09 c0       	rjmp	.+18     	; 0x32ca <dtoa_prf+0x11e>
    32b8:	99 e4       	ldi	r25, 0x49	; 73
    32ba:	d6 01       	movw	r26, r12
    32bc:	9c 93       	st	X, r25
    32be:	9e e4       	ldi	r25, 0x4E	; 78
    32c0:	11 96       	adiw	r26, 0x01	; 1
    32c2:	9c 93       	st	X, r25
    32c4:	11 97       	sbiw	r26, 0x01	; 1
    32c6:	96 e4       	ldi	r25, 0x46	; 70
    32c8:	07 c0       	rjmp	.+14     	; 0x32d8 <dtoa_prf+0x12c>
    32ca:	99 e6       	ldi	r25, 0x69	; 105
    32cc:	d6 01       	movw	r26, r12
    32ce:	9c 93       	st	X, r25
    32d0:	9e e6       	ldi	r25, 0x6E	; 110
    32d2:	11 96       	adiw	r26, 0x01	; 1
    32d4:	9c 93       	st	X, r25
    32d6:	96 e6       	ldi	r25, 0x66	; 102
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	32 96       	adiw	r30, 0x02	; 2
    32dc:	98 2f       	mov	r25, r24
    32de:	df 01       	movw	r26, r30
    32e0:	20 e2       	ldi	r18, 0x20	; 32
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <dtoa_prf+0x13c>
    32e4:	2d 93       	st	X+, r18
    32e6:	91 50       	subi	r25, 0x01	; 1
    32e8:	99 23       	and	r25, r25
    32ea:	e1 f7       	brne	.-8      	; 0x32e4 <dtoa_prf+0x138>
    32ec:	e8 0f       	add	r30, r24
    32ee:	f1 1d       	adc	r31, r1
    32f0:	10 82       	st	Z, r1
    32f2:	2e ef       	ldi	r18, 0xFE	; 254
    32f4:	3f ef       	ldi	r19, 0xFF	; 255
    32f6:	ac c0       	rjmp	.+344    	; 0x3450 <dtoa_prf+0x2a4>
    32f8:	41 e0       	ldi	r20, 0x01	; 1
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	ee 23       	and	r30, r30
    32fe:	11 f4       	brne	.+4      	; 0x3304 <dtoa_prf+0x158>
    3300:	40 e0       	ldi	r20, 0x00	; 0
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	18 16       	cp	r1, r24
    3306:	19 06       	cpc	r1, r25
    3308:	24 f4       	brge	.+8      	; 0x3312 <dtoa_prf+0x166>
    330a:	bc 01       	movw	r22, r24
    330c:	6f 5f       	subi	r22, 0xFF	; 255
    330e:	7f 4f       	sbci	r23, 0xFF	; 255
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <dtoa_prf+0x16a>
    3312:	61 e0       	ldi	r22, 0x01	; 1
    3314:	70 e0       	ldi	r23, 0x00	; 0
    3316:	64 0f       	add	r22, r20
    3318:	75 1f       	adc	r23, r21
    331a:	11 23       	and	r17, r17
    331c:	29 f0       	breq	.+10     	; 0x3328 <dtoa_prf+0x17c>
    331e:	41 2f       	mov	r20, r17
    3320:	50 e0       	ldi	r21, 0x00	; 0
    3322:	4f 5f       	subi	r20, 0xFF	; 255
    3324:	5f 4f       	sbci	r21, 0xFF	; 255
    3326:	02 c0       	rjmp	.+4      	; 0x332c <dtoa_prf+0x180>
    3328:	40 e0       	ldi	r20, 0x00	; 0
    332a:	50 e0       	ldi	r21, 0x00	; 0
    332c:	46 0f       	add	r20, r22
    332e:	57 1f       	adc	r21, r23
    3330:	6f 2d       	mov	r22, r15
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	46 17       	cp	r20, r22
    3336:	57 07       	cpc	r21, r23
    3338:	1c f4       	brge	.+6      	; 0x3340 <dtoa_prf+0x194>
    333a:	0f 2d       	mov	r16, r15
    333c:	04 1b       	sub	r16, r20
    333e:	01 c0       	rjmp	.+2      	; 0x3342 <dtoa_prf+0x196>
    3340:	00 e0       	ldi	r16, 0x00	; 0
    3342:	ff 24       	eor	r15, r15
    3344:	a7 01       	movw	r20, r14
    3346:	40 71       	andi	r20, 0x10	; 16
    3348:	50 70       	andi	r21, 0x00	; 0
    334a:	e4 fc       	sbrc	r14, 4
    334c:	0d c0       	rjmp	.+26     	; 0x3368 <dtoa_prf+0x1bc>
    334e:	e3 fc       	sbrc	r14, 3
    3350:	0b c0       	rjmp	.+22     	; 0x3368 <dtoa_prf+0x1bc>
    3352:	60 2f       	mov	r22, r16
    3354:	d6 01       	movw	r26, r12
    3356:	70 e2       	ldi	r23, 0x20	; 32
    3358:	02 c0       	rjmp	.+4      	; 0x335e <dtoa_prf+0x1b2>
    335a:	7d 93       	st	X+, r23
    335c:	61 50       	subi	r22, 0x01	; 1
    335e:	66 23       	and	r22, r22
    3360:	e1 f7       	brne	.-8      	; 0x335a <dtoa_prf+0x1ae>
    3362:	c0 0e       	add	r12, r16
    3364:	d1 1c       	adc	r13, r1
    3366:	00 e0       	ldi	r16, 0x00	; 0
    3368:	ee 23       	and	r30, r30
    336a:	19 f0       	breq	.+6      	; 0x3372 <dtoa_prf+0x1c6>
    336c:	d6 01       	movw	r26, r12
    336e:	ed 93       	st	X+, r30
    3370:	6d 01       	movw	r12, r26
    3372:	41 15       	cp	r20, r1
    3374:	51 05       	cpc	r21, r1
    3376:	59 f4       	brne	.+22     	; 0x338e <dtoa_prf+0x1e2>
    3378:	40 2f       	mov	r20, r16
    337a:	f6 01       	movw	r30, r12
    337c:	50 e3       	ldi	r21, 0x30	; 48
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <dtoa_prf+0x1d8>
    3380:	51 93       	st	Z+, r21
    3382:	41 50       	subi	r20, 0x01	; 1
    3384:	44 23       	and	r20, r20
    3386:	e1 f7       	brne	.-8      	; 0x3380 <dtoa_prf+0x1d4>
    3388:	c0 0e       	add	r12, r16
    338a:	d1 1c       	adc	r13, r1
    338c:	00 e0       	ldi	r16, 0x00	; 0
    338e:	b8 0e       	add	r11, r24
    3390:	fa 80       	ldd	r15, Y+2	; 0x02
    3392:	a9 01       	movw	r20, r18
    3394:	40 71       	andi	r20, 0x10	; 16
    3396:	50 70       	andi	r21, 0x00	; 0
    3398:	24 ff       	sbrs	r18, 4
    339a:	04 c0       	rjmp	.+8      	; 0x33a4 <dtoa_prf+0x1f8>
    339c:	bf 2d       	mov	r27, r15
    339e:	b1 33       	cpi	r27, 0x31	; 49
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <dtoa_prf+0x1f8>
    33a2:	ba 94       	dec	r11
    33a4:	1b 14       	cp	r1, r11
    33a6:	2c f4       	brge	.+10     	; 0x33b2 <dtoa_prf+0x206>
    33a8:	ab 2d       	mov	r26, r11
    33aa:	a9 30       	cpi	r26, 0x09	; 9
    33ac:	18 f0       	brcs	.+6      	; 0x33b4 <dtoa_prf+0x208>
    33ae:	a8 e0       	ldi	r26, 0x08	; 8
    33b0:	01 c0       	rjmp	.+2      	; 0x33b4 <dtoa_prf+0x208>
    33b2:	a1 e0       	ldi	r26, 0x01	; 1
    33b4:	9c 01       	movw	r18, r24
    33b6:	97 ff       	sbrs	r25, 7
    33b8:	02 c0       	rjmp	.+4      	; 0x33be <dtoa_prf+0x212>
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	bc 01       	movw	r22, r24
    33c0:	6f 5f       	subi	r22, 0xFF	; 255
    33c2:	7f 4f       	sbci	r23, 0xFF	; 255
    33c4:	62 1b       	sub	r22, r18
    33c6:	73 0b       	sbc	r23, r19
    33c8:	fe 01       	movw	r30, r28
    33ca:	31 96       	adiw	r30, 0x01	; 1
    33cc:	e6 0f       	add	r30, r22
    33ce:	f7 1f       	adc	r31, r23
    33d0:	6e e2       	ldi	r22, 0x2E	; 46
    33d2:	e6 2e       	mov	r14, r22
    33d4:	bc 01       	movw	r22, r24
    33d6:	6a 1b       	sub	r22, r26
    33d8:	71 09       	sbc	r23, r1
    33da:	a1 2f       	mov	r26, r17
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	aa 24       	eor	r10, r10
    33e0:	bb 24       	eor	r11, r11
    33e2:	aa 1a       	sub	r10, r26
    33e4:	bb 0a       	sbc	r11, r27
    33e6:	1f ef       	ldi	r17, 0xFF	; 255
    33e8:	2f 3f       	cpi	r18, 0xFF	; 255
    33ea:	31 07       	cpc	r19, r17
    33ec:	19 f4       	brne	.+6      	; 0x33f4 <dtoa_prf+0x248>
    33ee:	d6 01       	movw	r26, r12
    33f0:	ed 92       	st	X+, r14
    33f2:	6d 01       	movw	r12, r26
    33f4:	82 17       	cp	r24, r18
    33f6:	93 07       	cpc	r25, r19
    33f8:	2c f0       	brlt	.+10     	; 0x3404 <dtoa_prf+0x258>
    33fa:	62 17       	cp	r22, r18
    33fc:	73 07       	cpc	r23, r19
    33fe:	14 f4       	brge	.+4      	; 0x3404 <dtoa_prf+0x258>
    3400:	10 81       	ld	r17, Z
    3402:	01 c0       	rjmp	.+2      	; 0x3406 <dtoa_prf+0x25a>
    3404:	10 e3       	ldi	r17, 0x30	; 48
    3406:	21 50       	subi	r18, 0x01	; 1
    3408:	30 40       	sbci	r19, 0x00	; 0
    340a:	31 96       	adiw	r30, 0x01	; 1
    340c:	2a 15       	cp	r18, r10
    340e:	3b 05       	cpc	r19, r11
    3410:	24 f0       	brlt	.+8      	; 0x341a <dtoa_prf+0x26e>
    3412:	d6 01       	movw	r26, r12
    3414:	1d 93       	st	X+, r17
    3416:	6d 01       	movw	r12, r26
    3418:	e6 cf       	rjmp	.-52     	; 0x33e6 <dtoa_prf+0x23a>
    341a:	28 17       	cp	r18, r24
    341c:	39 07       	cpc	r19, r25
    341e:	49 f4       	brne	.+18     	; 0x3432 <dtoa_prf+0x286>
    3420:	bf 2d       	mov	r27, r15
    3422:	b6 33       	cpi	r27, 0x36	; 54
    3424:	28 f4       	brcc	.+10     	; 0x3430 <dtoa_prf+0x284>
    3426:	b5 33       	cpi	r27, 0x35	; 53
    3428:	21 f4       	brne	.+8      	; 0x3432 <dtoa_prf+0x286>
    342a:	41 15       	cp	r20, r1
    342c:	51 05       	cpc	r21, r1
    342e:	09 f4       	brne	.+2      	; 0x3432 <dtoa_prf+0x286>
    3430:	11 e3       	ldi	r17, 0x31	; 49
    3432:	f6 01       	movw	r30, r12
    3434:	11 93       	st	Z+, r17
    3436:	80 2f       	mov	r24, r16
    3438:	df 01       	movw	r26, r30
    343a:	90 e2       	ldi	r25, 0x20	; 32
    343c:	02 c0       	rjmp	.+4      	; 0x3442 <dtoa_prf+0x296>
    343e:	9d 93       	st	X+, r25
    3440:	81 50       	subi	r24, 0x01	; 1
    3442:	88 23       	and	r24, r24
    3444:	e1 f7       	brne	.-8      	; 0x343e <dtoa_prf+0x292>
    3446:	e0 0f       	add	r30, r16
    3448:	f1 1d       	adc	r31, r1
    344a:	10 82       	st	Z, r1
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	c9 01       	movw	r24, r18
    3452:	29 96       	adiw	r28, 0x09	; 9
    3454:	ea e0       	ldi	r30, 0x0A	; 10
    3456:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__epilogue_restores__+0x10>

0000345a <__ftoa_engine>:
    345a:	28 30       	cpi	r18, 0x08	; 8
    345c:	08 f0       	brcs	.+2      	; 0x3460 <__ftoa_engine+0x6>
    345e:	27 e0       	ldi	r18, 0x07	; 7
    3460:	33 27       	eor	r19, r19
    3462:	da 01       	movw	r26, r20
    3464:	99 0f       	add	r25, r25
    3466:	31 1d       	adc	r19, r1
    3468:	87 fd       	sbrc	r24, 7
    346a:	91 60       	ori	r25, 0x01	; 1
    346c:	00 96       	adiw	r24, 0x00	; 0
    346e:	61 05       	cpc	r22, r1
    3470:	71 05       	cpc	r23, r1
    3472:	39 f4       	brne	.+14     	; 0x3482 <__ftoa_engine+0x28>
    3474:	32 60       	ori	r19, 0x02	; 2
    3476:	2e 5f       	subi	r18, 0xFE	; 254
    3478:	3d 93       	st	X+, r19
    347a:	30 e3       	ldi	r19, 0x30	; 48
    347c:	2a 95       	dec	r18
    347e:	e1 f7       	brne	.-8      	; 0x3478 <__ftoa_engine+0x1e>
    3480:	08 95       	ret
    3482:	9f 3f       	cpi	r25, 0xFF	; 255
    3484:	30 f0       	brcs	.+12     	; 0x3492 <__ftoa_engine+0x38>
    3486:	80 38       	cpi	r24, 0x80	; 128
    3488:	71 05       	cpc	r23, r1
    348a:	61 05       	cpc	r22, r1
    348c:	09 f0       	breq	.+2      	; 0x3490 <__ftoa_engine+0x36>
    348e:	3c 5f       	subi	r19, 0xFC	; 252
    3490:	3c 5f       	subi	r19, 0xFC	; 252
    3492:	3d 93       	st	X+, r19
    3494:	91 30       	cpi	r25, 0x01	; 1
    3496:	08 f0       	brcs	.+2      	; 0x349a <__ftoa_engine+0x40>
    3498:	80 68       	ori	r24, 0x80	; 128
    349a:	91 1d       	adc	r25, r1
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	1f 93       	push	r17
    34a2:	0f 93       	push	r16
    34a4:	ff 92       	push	r15
    34a6:	ef 92       	push	r14
    34a8:	19 2f       	mov	r17, r25
    34aa:	98 7f       	andi	r25, 0xF8	; 248
    34ac:	96 95       	lsr	r25
    34ae:	e9 2f       	mov	r30, r25
    34b0:	96 95       	lsr	r25
    34b2:	96 95       	lsr	r25
    34b4:	e9 0f       	add	r30, r25
    34b6:	ff 27       	eor	r31, r31
    34b8:	e2 55       	subi	r30, 0x52	; 82
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	99 27       	eor	r25, r25
    34be:	33 27       	eor	r19, r19
    34c0:	ee 24       	eor	r14, r14
    34c2:	ff 24       	eor	r15, r15
    34c4:	a7 01       	movw	r20, r14
    34c6:	e7 01       	movw	r28, r14
    34c8:	05 90       	lpm	r0, Z+
    34ca:	08 94       	sec
    34cc:	07 94       	ror	r0
    34ce:	28 f4       	brcc	.+10     	; 0x34da <__ftoa_engine+0x80>
    34d0:	36 0f       	add	r19, r22
    34d2:	e7 1e       	adc	r14, r23
    34d4:	f8 1e       	adc	r15, r24
    34d6:	49 1f       	adc	r20, r25
    34d8:	51 1d       	adc	r21, r1
    34da:	66 0f       	add	r22, r22
    34dc:	77 1f       	adc	r23, r23
    34de:	88 1f       	adc	r24, r24
    34e0:	99 1f       	adc	r25, r25
    34e2:	06 94       	lsr	r0
    34e4:	a1 f7       	brne	.-24     	; 0x34ce <__ftoa_engine+0x74>
    34e6:	05 90       	lpm	r0, Z+
    34e8:	07 94       	ror	r0
    34ea:	28 f4       	brcc	.+10     	; 0x34f6 <__ftoa_engine+0x9c>
    34ec:	e7 0e       	add	r14, r23
    34ee:	f8 1e       	adc	r15, r24
    34f0:	49 1f       	adc	r20, r25
    34f2:	56 1f       	adc	r21, r22
    34f4:	c1 1d       	adc	r28, r1
    34f6:	77 0f       	add	r23, r23
    34f8:	88 1f       	adc	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	66 1f       	adc	r22, r22
    34fe:	06 94       	lsr	r0
    3500:	a1 f7       	brne	.-24     	; 0x34ea <__ftoa_engine+0x90>
    3502:	05 90       	lpm	r0, Z+
    3504:	07 94       	ror	r0
    3506:	28 f4       	brcc	.+10     	; 0x3512 <__ftoa_engine+0xb8>
    3508:	f8 0e       	add	r15, r24
    350a:	49 1f       	adc	r20, r25
    350c:	56 1f       	adc	r21, r22
    350e:	c7 1f       	adc	r28, r23
    3510:	d1 1d       	adc	r29, r1
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	66 1f       	adc	r22, r22
    3518:	77 1f       	adc	r23, r23
    351a:	06 94       	lsr	r0
    351c:	a1 f7       	brne	.-24     	; 0x3506 <__ftoa_engine+0xac>
    351e:	05 90       	lpm	r0, Z+
    3520:	07 94       	ror	r0
    3522:	20 f4       	brcc	.+8      	; 0x352c <__ftoa_engine+0xd2>
    3524:	49 0f       	add	r20, r25
    3526:	56 1f       	adc	r21, r22
    3528:	c7 1f       	adc	r28, r23
    352a:	d8 1f       	adc	r29, r24
    352c:	99 0f       	add	r25, r25
    352e:	66 1f       	adc	r22, r22
    3530:	77 1f       	adc	r23, r23
    3532:	88 1f       	adc	r24, r24
    3534:	06 94       	lsr	r0
    3536:	a9 f7       	brne	.-22     	; 0x3522 <__ftoa_engine+0xc8>
    3538:	84 91       	lpm	r24, Z+
    353a:	10 95       	com	r17
    353c:	17 70       	andi	r17, 0x07	; 7
    353e:	41 f0       	breq	.+16     	; 0x3550 <__ftoa_engine+0xf6>
    3540:	d6 95       	lsr	r29
    3542:	c7 95       	ror	r28
    3544:	57 95       	ror	r21
    3546:	47 95       	ror	r20
    3548:	f7 94       	ror	r15
    354a:	e7 94       	ror	r14
    354c:	1a 95       	dec	r17
    354e:	c1 f7       	brne	.-16     	; 0x3540 <__ftoa_engine+0xe6>
    3550:	e4 e5       	ldi	r30, 0x54	; 84
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	68 94       	set
    3556:	15 90       	lpm	r1, Z+
    3558:	15 91       	lpm	r17, Z+
    355a:	35 91       	lpm	r19, Z+
    355c:	65 91       	lpm	r22, Z+
    355e:	95 91       	lpm	r25, Z+
    3560:	05 90       	lpm	r0, Z+
    3562:	7f e2       	ldi	r23, 0x2F	; 47
    3564:	73 95       	inc	r23
    3566:	e1 18       	sub	r14, r1
    3568:	f1 0a       	sbc	r15, r17
    356a:	43 0b       	sbc	r20, r19
    356c:	56 0b       	sbc	r21, r22
    356e:	c9 0b       	sbc	r28, r25
    3570:	d0 09       	sbc	r29, r0
    3572:	c0 f7       	brcc	.-16     	; 0x3564 <__ftoa_engine+0x10a>
    3574:	e1 0c       	add	r14, r1
    3576:	f1 1e       	adc	r15, r17
    3578:	43 1f       	adc	r20, r19
    357a:	56 1f       	adc	r21, r22
    357c:	c9 1f       	adc	r28, r25
    357e:	d0 1d       	adc	r29, r0
    3580:	7e f4       	brtc	.+30     	; 0x35a0 <__ftoa_engine+0x146>
    3582:	70 33       	cpi	r23, 0x30	; 48
    3584:	11 f4       	brne	.+4      	; 0x358a <__ftoa_engine+0x130>
    3586:	8a 95       	dec	r24
    3588:	e6 cf       	rjmp	.-52     	; 0x3556 <__ftoa_engine+0xfc>
    358a:	e8 94       	clt
    358c:	01 50       	subi	r16, 0x01	; 1
    358e:	30 f0       	brcs	.+12     	; 0x359c <__ftoa_engine+0x142>
    3590:	08 0f       	add	r16, r24
    3592:	0a f4       	brpl	.+2      	; 0x3596 <__ftoa_engine+0x13c>
    3594:	00 27       	eor	r16, r16
    3596:	02 17       	cp	r16, r18
    3598:	08 f4       	brcc	.+2      	; 0x359c <__ftoa_engine+0x142>
    359a:	20 2f       	mov	r18, r16
    359c:	23 95       	inc	r18
    359e:	02 2f       	mov	r16, r18
    35a0:	7a 33       	cpi	r23, 0x3A	; 58
    35a2:	28 f0       	brcs	.+10     	; 0x35ae <__ftoa_engine+0x154>
    35a4:	79 e3       	ldi	r23, 0x39	; 57
    35a6:	7d 93       	st	X+, r23
    35a8:	2a 95       	dec	r18
    35aa:	e9 f7       	brne	.-6      	; 0x35a6 <__ftoa_engine+0x14c>
    35ac:	10 c0       	rjmp	.+32     	; 0x35ce <__ftoa_engine+0x174>
    35ae:	7d 93       	st	X+, r23
    35b0:	2a 95       	dec	r18
    35b2:	89 f6       	brne	.-94     	; 0x3556 <__ftoa_engine+0xfc>
    35b4:	06 94       	lsr	r0
    35b6:	97 95       	ror	r25
    35b8:	67 95       	ror	r22
    35ba:	37 95       	ror	r19
    35bc:	17 95       	ror	r17
    35be:	17 94       	ror	r1
    35c0:	e1 18       	sub	r14, r1
    35c2:	f1 0a       	sbc	r15, r17
    35c4:	43 0b       	sbc	r20, r19
    35c6:	56 0b       	sbc	r21, r22
    35c8:	c9 0b       	sbc	r28, r25
    35ca:	d0 09       	sbc	r29, r0
    35cc:	98 f0       	brcs	.+38     	; 0x35f4 <__ftoa_engine+0x19a>
    35ce:	23 95       	inc	r18
    35d0:	7e 91       	ld	r23, -X
    35d2:	73 95       	inc	r23
    35d4:	7a 33       	cpi	r23, 0x3A	; 58
    35d6:	08 f0       	brcs	.+2      	; 0x35da <__ftoa_engine+0x180>
    35d8:	70 e3       	ldi	r23, 0x30	; 48
    35da:	7c 93       	st	X, r23
    35dc:	20 13       	cpse	r18, r16
    35de:	b8 f7       	brcc	.-18     	; 0x35ce <__ftoa_engine+0x174>
    35e0:	7e 91       	ld	r23, -X
    35e2:	70 61       	ori	r23, 0x10	; 16
    35e4:	7d 93       	st	X+, r23
    35e6:	30 f0       	brcs	.+12     	; 0x35f4 <__ftoa_engine+0x19a>
    35e8:	83 95       	inc	r24
    35ea:	71 e3       	ldi	r23, 0x31	; 49
    35ec:	7d 93       	st	X+, r23
    35ee:	70 e3       	ldi	r23, 0x30	; 48
    35f0:	2a 95       	dec	r18
    35f2:	e1 f7       	brne	.-8      	; 0x35ec <__ftoa_engine+0x192>
    35f4:	11 24       	eor	r1, r1
    35f6:	ef 90       	pop	r14
    35f8:	ff 90       	pop	r15
    35fa:	0f 91       	pop	r16
    35fc:	1f 91       	pop	r17
    35fe:	cf 91       	pop	r28
    3600:	df 91       	pop	r29
    3602:	99 27       	eor	r25, r25
    3604:	87 fd       	sbrc	r24, 7
    3606:	90 95       	com	r25
    3608:	08 95       	ret

0000360a <strrev>:
    360a:	dc 01       	movw	r26, r24
    360c:	fc 01       	movw	r30, r24
    360e:	67 2f       	mov	r22, r23
    3610:	71 91       	ld	r23, Z+
    3612:	77 23       	and	r23, r23
    3614:	e1 f7       	brne	.-8      	; 0x360e <strrev+0x4>
    3616:	32 97       	sbiw	r30, 0x02	; 2
    3618:	04 c0       	rjmp	.+8      	; 0x3622 <strrev+0x18>
    361a:	7c 91       	ld	r23, X
    361c:	6d 93       	st	X+, r22
    361e:	70 83       	st	Z, r23
    3620:	62 91       	ld	r22, -Z
    3622:	ae 17       	cp	r26, r30
    3624:	bf 07       	cpc	r27, r31
    3626:	c8 f3       	brcs	.-14     	; 0x361a <strrev+0x10>
    3628:	08 95       	ret

0000362a <__prologue_saves__>:
    362a:	2f 92       	push	r2
    362c:	3f 92       	push	r3
    362e:	4f 92       	push	r4
    3630:	5f 92       	push	r5
    3632:	6f 92       	push	r6
    3634:	7f 92       	push	r7
    3636:	8f 92       	push	r8
    3638:	9f 92       	push	r9
    363a:	af 92       	push	r10
    363c:	bf 92       	push	r11
    363e:	cf 92       	push	r12
    3640:	df 92       	push	r13
    3642:	ef 92       	push	r14
    3644:	ff 92       	push	r15
    3646:	0f 93       	push	r16
    3648:	1f 93       	push	r17
    364a:	cf 93       	push	r28
    364c:	df 93       	push	r29
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
    3652:	ca 1b       	sub	r28, r26
    3654:	db 0b       	sbc	r29, r27
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	09 94       	ijmp

00003662 <__epilogue_restores__>:
    3662:	2a 88       	ldd	r2, Y+18	; 0x12
    3664:	39 88       	ldd	r3, Y+17	; 0x11
    3666:	48 88       	ldd	r4, Y+16	; 0x10
    3668:	5f 84       	ldd	r5, Y+15	; 0x0f
    366a:	6e 84       	ldd	r6, Y+14	; 0x0e
    366c:	7d 84       	ldd	r7, Y+13	; 0x0d
    366e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3670:	9b 84       	ldd	r9, Y+11	; 0x0b
    3672:	aa 84       	ldd	r10, Y+10	; 0x0a
    3674:	b9 84       	ldd	r11, Y+9	; 0x09
    3676:	c8 84       	ldd	r12, Y+8	; 0x08
    3678:	df 80       	ldd	r13, Y+7	; 0x07
    367a:	ee 80       	ldd	r14, Y+6	; 0x06
    367c:	fd 80       	ldd	r15, Y+5	; 0x05
    367e:	0c 81       	ldd	r16, Y+4	; 0x04
    3680:	1b 81       	ldd	r17, Y+3	; 0x03
    3682:	aa 81       	ldd	r26, Y+2	; 0x02
    3684:	b9 81       	ldd	r27, Y+1	; 0x01
    3686:	ce 0f       	add	r28, r30
    3688:	d1 1d       	adc	r29, r1
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	ed 01       	movw	r28, r26
    3696:	08 95       	ret

00003698 <_exit>:
    3698:	f8 94       	cli

0000369a <__stop_program>:
    369a:	ff cf       	rjmp	.-2      	; 0x369a <__stop_program>
