
04_tt_rr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000355c  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028e  00800060  0000355c  000035f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008002ee  008002ee  0000387e  2**0
                  ALLOC
  3 .noinit       00000000  00800300  00800300  0000387e  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000387e  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00003880  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00003c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000463  00000000  00000000  00003c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000011b7  00000000  00000000  000040e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000001c0  00000000  00000000  0000529e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000010a3  00000000  00000000  0000545e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000025  00000000  00000000  00006501  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 00 	jmp	0xa4 <__init>
       4:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
       c:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      10:	0c 94 a5 08 	jmp	0x114a <__vector_4>
      14:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      1c:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      20:	0c 94 bb 0d 	jmp	0x1b76 <__vector_8>
      24:	0c 94 14 0b 	jmp	0x1628 <__vector_9>
      28:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      2c:	0c 94 b9 0b 	jmp	0x1772 <__vector_11>
      30:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      34:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      38:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      3c:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      4c:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>
      50:	0c 94 6d 00 	jmp	0xda <__bad_interrupt>

00000054 <__ctors_end>:
      54:	06 39       	cpi	r16, 0x96	; 150
      56:	65 2c       	mov	r6, r5
      58:	03 3a       	cpi	r16, 0xA3	; 163
      5a:	a2 3b       	cpi	r26, 0xB2	; 178
      5c:	59 3c       	cpi	r21, 0xC9	; 201
      5e:	1e ba       	out	0x1e, r1	; 30
      60:	e0 3d       	cpi	r30, 0xD0	; 208
      62:	63 3b       	cpi	r22, 0xB3	; 179
      64:	f4 3e       	cpi	r31, 0xE4	; 228
      66:	75 ff       	sbrs	r23, 5
      68:	4e 3f       	cpi	r20, 0xFE	; 254
      6a:	31 72       	andi	r19, 0x21	; 33
      6c:	11 3f       	cpi	r17, 0xF1	; 241
      6e:	80 00       	.word	0x0080	; ????
	...

00000072 <table_log>:
      72:	05 40       	sbci	r16, 0x05	; 5
      74:	b5 04       	cpc	r11, r5
      76:	f4 41       	sbci	r31, 0x14	; 20
      78:	a0 00       	.word	0x00a0	; ????
      7a:	01 41       	sbci	r16, 0x11	; 17
      7c:	e2 46       	sbci	r30, 0x62	; 98
      7e:	32 41       	sbci	r19, 0x12	; 18
      80:	a0 00       	.word	0x00a0	; ????
      82:	00 40       	sbci	r16, 0x00	; 0
      84:	e2 46       	sbci	r30, 0x62	; 98
      86:	30 3f       	cpi	r19, 0xF0	; 240
      88:	80 00       	.word	0x0080	; ????
      8a:	00 05       	cpc	r16, r0
      8c:	41 77       	andi	r20, 0x71	; 113
      8e:	8c 4f       	sbci	r24, 0xFC	; 252
      90:	40 c3       	rjmp	.+1664   	; 0x712 <delay_sound+0x8>
      92:	2c e2       	ldi	r18, 0x2C	; 44
      94:	41 17       	cp	r20, r17
      96:	bf 24       	eor	r11, r15
      98:	c1 a4       	ldd	r12, Z+41	; 0x29
      9a:	8d d9       	rcall	.-3302   	; 0xfffff3b6 <__eeprom_end+0xff7ef3b6>
      9c:	c0 e1       	ldi	r28, 0x10	; 16
      9e:	d8 a1       	ldd	r29, Y+32	; 0x20
      a0:	c0 5b       	subi	r28, 0xB0	; 176
      a2:	67 82       	std	Z+7, r6	; 0x07

000000a4 <__init>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf e5       	ldi	r28, 0x5F	; 95
      aa:	d4 e0       	ldi	r29, 0x04	; 4
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	12 e0       	ldi	r17, 0x02	; 2
      b2:	a0 e6       	ldi	r26, 0x60	; 96
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	ec e5       	ldi	r30, 0x5C	; 92
      b8:	f5 e3       	ldi	r31, 0x35	; 53
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <.do_copy_data_start>

000000bc <.do_copy_data_loop>:
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0

000000c0 <.do_copy_data_start>:
      c0:	ae 3e       	cpi	r26, 0xEE	; 238
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <.do_copy_data_loop>

000000c6 <__do_clear_bss>:
      c6:	13 e0       	ldi	r17, 0x03	; 3
      c8:	ae ee       	ldi	r26, 0xEE	; 238
      ca:	b2 e0       	ldi	r27, 0x02	; 2
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 30       	cpi	r26, 0x00	; 0
      d2:	b1 07       	cpc	r27, r17
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0c 94 5e 16 	jmp	0x2cbc <main>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0x0 <__vectors>

000000de <sleep>:
#ifndef _SLEEP_H_
#define _SLEEP_H_

void sleep(unsigned int ms)
{
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	26 97       	sbiw	r28, 0x06	; 6
      e8:	0f b6       	in	r0, 0x3f	; 63
      ea:	f8 94       	cli
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	0f be       	out	0x3f, r0	; 63
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	9a 83       	std	Y+2, r25	; 0x02
      f4:	89 83       	std	Y+1, r24	; 0x01
	unsigned int i,j;
	for(i=0;i<ms;i++)
      f6:	1c 82       	std	Y+4, r1	; 0x04
      f8:	1b 82       	std	Y+3, r1	; 0x03
      fa:	2b 81       	ldd	r18, Y+3	; 0x03
      fc:	3c 81       	ldd	r19, Y+4	; 0x04
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	9a 81       	ldd	r25, Y+2	; 0x02
     102:	28 17       	cp	r18, r24
     104:	39 07       	cpc	r19, r25
     106:	a0 f4       	brcc	.+40     	; 0x130 <sleep+0x52>
		for(j=0;j<795;j++);
     108:	1e 82       	std	Y+6, r1	; 0x06
     10a:	1d 82       	std	Y+5, r1	; 0x05
     10c:	8d 81       	ldd	r24, Y+5	; 0x05
     10e:	9e 81       	ldd	r25, Y+6	; 0x06
     110:	23 e0       	ldi	r18, 0x03	; 3
     112:	8b 31       	cpi	r24, 0x1B	; 27
     114:	92 07       	cpc	r25, r18
     116:	30 f4       	brcc	.+12     	; 0x124 <sleep+0x46>
     118:	8d 81       	ldd	r24, Y+5	; 0x05
     11a:	9e 81       	ldd	r25, Y+6	; 0x06
     11c:	01 96       	adiw	r24, 0x01	; 1
     11e:	9e 83       	std	Y+6, r25	; 0x06
     120:	8d 83       	std	Y+5, r24	; 0x05
     122:	f4 cf       	rjmp	.-24     	; 0x10c <sleep+0x2e>
     124:	8b 81       	ldd	r24, Y+3	; 0x03
     126:	9c 81       	ldd	r25, Y+4	; 0x04
     128:	01 96       	adiw	r24, 0x01	; 1
     12a:	9c 83       	std	Y+4, r25	; 0x04
     12c:	8b 83       	std	Y+3, r24	; 0x03
     12e:	e5 cf       	rjmp	.-54     	; 0xfa <sleep+0x1c>
     130:	26 96       	adiw	r28, 0x06	; 6
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	08 95       	ret

00000142 <toggle_a>:
#define set_d(x)  		DDRD |= _BV(x);	PORTD |= _BV(x)		
#define clear_d(x)   	DDRD |= _BV(x);	PORTD &= ~_BV(x);		

void toggle_a(char x)
{
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	21 97       	sbiw	r28, 0x01	; 1
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
     156:	89 83       	std	Y+1, r24	; 0x01
	DDRA |= _BV(x); 
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	28 2f       	mov	r18, r24
     15c:	33 27       	eor	r19, r19
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	02 c0       	rjmp	.+4      	; 0x168 <toggle_a+0x26>
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	2a 95       	dec	r18
     16a:	e2 f7       	brpl	.-8      	; 0x164 <toggle_a+0x22>
     16c:	20 91 3a 00 	lds	r18, 0x003A
     170:	82 2b       	or	r24, r18
     172:	80 93 3a 00 	sts	0x003A, r24
	PORTA ^= _BV(x);
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	28 2f       	mov	r18, r24
     17a:	33 27       	eor	r19, r19
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	02 c0       	rjmp	.+4      	; 0x186 <toggle_a+0x44>
     182:	88 0f       	add	r24, r24
     184:	99 1f       	adc	r25, r25
     186:	2a 95       	dec	r18
     188:	e2 f7       	brpl	.-8      	; 0x182 <toggle_a+0x40>
     18a:	20 91 3b 00 	lds	r18, 0x003B
     18e:	82 27       	eor	r24, r18
     190:	80 93 3b 00 	sts	0x003B, r24
     194:	21 96       	adiw	r28, 0x01	; 1
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	cd bf       	out	0x3d, r28	; 61
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <toggle_b>:
}
void toggle_b(char x)
{
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	21 97       	sbiw	r28, 0x01	; 1
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	cd bf       	out	0x3d, r28	; 61
     1ba:	89 83       	std	Y+1, r24	; 0x01
	DDRB |= _BV(x); 
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	28 2f       	mov	r18, r24
     1c0:	33 27       	eor	r19, r19
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <toggle_b+0x26>
     1c8:	88 0f       	add	r24, r24
     1ca:	99 1f       	adc	r25, r25
     1cc:	2a 95       	dec	r18
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <toggle_b+0x22>
     1d0:	20 91 37 00 	lds	r18, 0x0037
     1d4:	82 2b       	or	r24, r18
     1d6:	80 93 37 00 	sts	0x0037, r24
	PORTB ^= _BV(x);
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	28 2f       	mov	r18, r24
     1de:	33 27       	eor	r19, r19
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <toggle_b+0x44>
     1e6:	88 0f       	add	r24, r24
     1e8:	99 1f       	adc	r25, r25
     1ea:	2a 95       	dec	r18
     1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <toggle_b+0x40>
     1ee:	20 91 38 00 	lds	r18, 0x0038
     1f2:	82 27       	eor	r24, r18
     1f4:	80 93 38 00 	sts	0x0038, r24
     1f8:	21 96       	adiw	r28, 0x01	; 1
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	f8 94       	cli
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	0f be       	out	0x3f, r0	; 63
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <toggle_c>:
}
void toggle_c(char x)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	21 97       	sbiw	r28, 0x01	; 1
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	89 83       	std	Y+1, r24	; 0x01
	DDRC |= _BV(x); 
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	28 2f       	mov	r18, r24
     224:	33 27       	eor	r19, r19
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	02 c0       	rjmp	.+4      	; 0x230 <toggle_c+0x26>
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	2a 95       	dec	r18
     232:	e2 f7       	brpl	.-8      	; 0x22c <toggle_c+0x22>
     234:	20 91 34 00 	lds	r18, 0x0034
     238:	82 2b       	or	r24, r18
     23a:	80 93 34 00 	sts	0x0034, r24
	PORTC ^= _BV(x);
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	28 2f       	mov	r18, r24
     242:	33 27       	eor	r19, r19
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <toggle_c+0x44>
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	2a 95       	dec	r18
     250:	e2 f7       	brpl	.-8      	; 0x24a <toggle_c+0x40>
     252:	20 91 35 00 	lds	r18, 0x0035
     256:	82 27       	eor	r24, r18
     258:	80 93 35 00 	sts	0x0035, r24
     25c:	21 96       	adiw	r28, 0x01	; 1
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	de bf       	out	0x3e, r29	; 62
     264:	0f be       	out	0x3f, r0	; 63
     266:	cd bf       	out	0x3d, r28	; 61
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <toggle_d>:
}
void toggle_d(char x)
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	21 97       	sbiw	r28, 0x01	; 1
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	89 83       	std	Y+1, r24	; 0x01
	DDRD |= _BV(x); 
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	28 2f       	mov	r18, r24
     288:	33 27       	eor	r19, r19
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	02 c0       	rjmp	.+4      	; 0x294 <toggle_d+0x26>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	2a 95       	dec	r18
     296:	e2 f7       	brpl	.-8      	; 0x290 <toggle_d+0x22>
     298:	20 91 31 00 	lds	r18, 0x0031
     29c:	82 2b       	or	r24, r18
     29e:	80 93 31 00 	sts	0x0031, r24
	PORTD ^= _BV(x);
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	28 2f       	mov	r18, r24
     2a6:	33 27       	eor	r19, r19
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <toggle_d+0x44>
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	2a 95       	dec	r18
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <toggle_d+0x40>
     2b6:	20 91 32 00 	lds	r18, 0x0032
     2ba:	82 27       	eor	r24, r18
     2bc:	80 93 32 00 	sts	0x0032, r24
     2c0:	21 96       	adiw	r28, 0x01	; 1
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <in_a>:
}
char in_a(char _bit)
{
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	21 97       	sbiw	r28, 0x01	; 1
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	89 83       	std	Y+1, r24	; 0x01
	DDRA &= ~(1<<_bit);
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	28 2f       	mov	r18, r24
     2ec:	33 27       	eor	r19, r19
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <in_a+0x26>
     2f4:	88 0f       	add	r24, r24
     2f6:	99 1f       	adc	r25, r25
     2f8:	2a 95       	dec	r18
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <in_a+0x22>
     2fc:	98 2f       	mov	r25, r24
     2fe:	90 95       	com	r25
     300:	80 91 3a 00 	lds	r24, 0x003A
     304:	89 23       	and	r24, r25
     306:	80 93 3a 00 	sts	0x003A, r24
	return((PINA & _BV(_bit))>>_bit);	
     30a:	80 91 39 00 	lds	r24, 0x0039
     30e:	48 2f       	mov	r20, r24
     310:	55 27       	eor	r21, r21
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	28 2f       	mov	r18, r24
     316:	33 27       	eor	r19, r19
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	02 c0       	rjmp	.+4      	; 0x322 <in_a+0x50>
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	2a 95       	dec	r18
     324:	e2 f7       	brpl	.-8      	; 0x31e <in_a+0x4c>
     326:	9a 01       	movw	r18, r20
     328:	28 23       	and	r18, r24
     32a:	39 23       	and	r19, r25
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	99 27       	eor	r25, r25
     330:	02 c0       	rjmp	.+4      	; 0x336 <in_a+0x64>
     332:	35 95       	asr	r19
     334:	27 95       	ror	r18
     336:	8a 95       	dec	r24
     338:	e2 f7       	brpl	.-8      	; 0x332 <in_a+0x60>
     33a:	c9 01       	movw	r24, r18
     33c:	99 27       	eor	r25, r25
     33e:	21 96       	adiw	r28, 0x01	; 1
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <in_b>:
}
char in_b(char _bit)
{
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	21 97       	sbiw	r28, 0x01	; 1
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	89 83       	std	Y+1, r24	; 0x01
	DDRB &= ~(1<<_bit);
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	28 2f       	mov	r18, r24
     36a:	33 27       	eor	r19, r19
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <in_b+0x26>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	2a 95       	dec	r18
     378:	e2 f7       	brpl	.-8      	; 0x372 <in_b+0x22>
     37a:	98 2f       	mov	r25, r24
     37c:	90 95       	com	r25
     37e:	80 91 37 00 	lds	r24, 0x0037
     382:	89 23       	and	r24, r25
     384:	80 93 37 00 	sts	0x0037, r24
	return((PINB & _BV(_bit))>>_bit);	
     388:	80 91 36 00 	lds	r24, 0x0036
     38c:	48 2f       	mov	r20, r24
     38e:	55 27       	eor	r21, r21
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	28 2f       	mov	r18, r24
     394:	33 27       	eor	r19, r19
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <in_b+0x50>
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	2a 95       	dec	r18
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <in_b+0x4c>
     3a4:	9a 01       	movw	r18, r20
     3a6:	28 23       	and	r18, r24
     3a8:	39 23       	and	r19, r25
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	99 27       	eor	r25, r25
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <in_b+0x64>
     3b0:	35 95       	asr	r19
     3b2:	27 95       	ror	r18
     3b4:	8a 95       	dec	r24
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <in_b+0x60>
     3b8:	c9 01       	movw	r24, r18
     3ba:	99 27       	eor	r25, r25
     3bc:	21 96       	adiw	r28, 0x01	; 1
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <in_c>:
}
char in_c(char _bit)
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	21 97       	sbiw	r28, 0x01	; 1
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
     3e2:	89 83       	std	Y+1, r24	; 0x01
	DDRC &= ~(1<<_bit);
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	28 2f       	mov	r18, r24
     3e8:	33 27       	eor	r19, r19
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <in_c+0x26>
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	2a 95       	dec	r18
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <in_c+0x22>
     3f8:	98 2f       	mov	r25, r24
     3fa:	90 95       	com	r25
     3fc:	80 91 34 00 	lds	r24, 0x0034
     400:	89 23       	and	r24, r25
     402:	80 93 34 00 	sts	0x0034, r24
	return((PINC & _BV(_bit))>>_bit);	
     406:	80 91 33 00 	lds	r24, 0x0033
     40a:	48 2f       	mov	r20, r24
     40c:	55 27       	eor	r21, r21
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	28 2f       	mov	r18, r24
     412:	33 27       	eor	r19, r19
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	02 c0       	rjmp	.+4      	; 0x41e <in_c+0x50>
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	2a 95       	dec	r18
     420:	e2 f7       	brpl	.-8      	; 0x41a <in_c+0x4c>
     422:	9a 01       	movw	r18, r20
     424:	28 23       	and	r18, r24
     426:	39 23       	and	r19, r25
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	99 27       	eor	r25, r25
     42c:	02 c0       	rjmp	.+4      	; 0x432 <in_c+0x64>
     42e:	35 95       	asr	r19
     430:	27 95       	ror	r18
     432:	8a 95       	dec	r24
     434:	e2 f7       	brpl	.-8      	; 0x42e <in_c+0x60>
     436:	c9 01       	movw	r24, r18
     438:	99 27       	eor	r25, r25
     43a:	21 96       	adiw	r28, 0x01	; 1
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <in_d>:
}
char in_d(char _bit)
{
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	21 97       	sbiw	r28, 0x01	; 1
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= ~(1<<_bit);
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	28 2f       	mov	r18, r24
     466:	33 27       	eor	r19, r19
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	02 c0       	rjmp	.+4      	; 0x472 <__stack+0x13>
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	2a 95       	dec	r18
     474:	e2 f7       	brpl	.-8      	; 0x46e <__stack+0xf>
     476:	98 2f       	mov	r25, r24
     478:	90 95       	com	r25
     47a:	80 91 31 00 	lds	r24, 0x0031
     47e:	89 23       	and	r24, r25
     480:	80 93 31 00 	sts	0x0031, r24
	return((PIND & _BV(_bit))>>_bit);	
     484:	80 91 30 00 	lds	r24, 0x0030
     488:	48 2f       	mov	r20, r24
     48a:	55 27       	eor	r21, r21
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	28 2f       	mov	r18, r24
     490:	33 27       	eor	r19, r19
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	02 c0       	rjmp	.+4      	; 0x49c <__stack+0x3d>
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	2a 95       	dec	r18
     49e:	e2 f7       	brpl	.-8      	; 0x498 <__stack+0x39>
     4a0:	9a 01       	movw	r18, r20
     4a2:	28 23       	and	r18, r24
     4a4:	39 23       	and	r19, r25
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	99 27       	eor	r25, r25
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__stack+0x51>
     4ac:	35 95       	asr	r19
     4ae:	27 95       	ror	r18
     4b0:	8a 95       	dec	r24
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__stack+0x4d>
     4b4:	c9 01       	movw	r24, r18
     4b6:	99 27       	eor	r25, r25
     4b8:	21 96       	adiw	r28, 0x01	; 1
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <out_a>:
}


void out_a(char _bit,char _dat)
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	22 97       	sbiw	r28, 0x02	; 2
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	89 83       	std	Y+1, r24	; 0x01
     4e0:	6a 83       	std	Y+2, r22	; 0x02
	DDRA |= _BV(_bit);
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	28 2f       	mov	r18, r24
     4e6:	33 27       	eor	r19, r19
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <out_a+0x28>
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	2a 95       	dec	r18
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <out_a+0x24>
     4f6:	20 91 3a 00 	lds	r18, 0x003A
     4fa:	82 2b       	or	r24, r18
     4fc:	80 93 3a 00 	sts	0x003A, r24
	if(_dat)
     500:	8a 81       	ldd	r24, Y+2	; 0x02
     502:	88 23       	and	r24, r24
     504:	81 f0       	breq	.+32     	; 0x526 <out_a+0x5c>
		PORTA |= _BV(_bit);
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	28 2f       	mov	r18, r24
     50a:	33 27       	eor	r19, r19
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <out_a+0x4c>
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	2a 95       	dec	r18
     518:	e2 f7       	brpl	.-8      	; 0x512 <out_a+0x48>
     51a:	20 91 3b 00 	lds	r18, 0x003B
     51e:	82 2b       	or	r24, r18
     520:	80 93 3b 00 	sts	0x003B, r24
     524:	11 c0       	rjmp	.+34     	; 0x548 <out_a+0x7e>
	else
		PORTA &= ~_BV(_bit);
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	28 2f       	mov	r18, r24
     52a:	33 27       	eor	r19, r19
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <out_a+0x6c>
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	2a 95       	dec	r18
     538:	e2 f7       	brpl	.-8      	; 0x532 <out_a+0x68>
     53a:	98 2f       	mov	r25, r24
     53c:	90 95       	com	r25
     53e:	80 91 3b 00 	lds	r24, 0x003B
     542:	89 23       	and	r24, r25
     544:	80 93 3b 00 	sts	0x003B, r24
     548:	22 96       	adiw	r28, 0x02	; 2
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <out_b>:

}
void out_b(char _bit,char _dat)
{
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	22 97       	sbiw	r28, 0x02	; 2
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	89 83       	std	Y+1, r24	; 0x01
     570:	6a 83       	std	Y+2, r22	; 0x02
	DDRB |= _BV(_bit);
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	28 2f       	mov	r18, r24
     576:	33 27       	eor	r19, r19
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	02 c0       	rjmp	.+4      	; 0x582 <out_b+0x28>
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	2a 95       	dec	r18
     584:	e2 f7       	brpl	.-8      	; 0x57e <out_b+0x24>
     586:	20 91 37 00 	lds	r18, 0x0037
     58a:	82 2b       	or	r24, r18
     58c:	80 93 37 00 	sts	0x0037, r24
	if(_dat)
     590:	8a 81       	ldd	r24, Y+2	; 0x02
     592:	88 23       	and	r24, r24
     594:	81 f0       	breq	.+32     	; 0x5b6 <out_b+0x5c>
		PORTB |= _BV(_bit);
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	28 2f       	mov	r18, r24
     59a:	33 27       	eor	r19, r19
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <out_b+0x4c>
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	2a 95       	dec	r18
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <out_b+0x48>
     5aa:	20 91 38 00 	lds	r18, 0x0038
     5ae:	82 2b       	or	r24, r18
     5b0:	80 93 38 00 	sts	0x0038, r24
     5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <out_b+0x7e>
	else
		PORTB &= ~_BV(_bit);
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	28 2f       	mov	r18, r24
     5ba:	33 27       	eor	r19, r19
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <out_b+0x6c>
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	2a 95       	dec	r18
     5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <out_b+0x68>
     5ca:	98 2f       	mov	r25, r24
     5cc:	90 95       	com	r25
     5ce:	80 91 38 00 	lds	r24, 0x0038
     5d2:	89 23       	and	r24, r25
     5d4:	80 93 38 00 	sts	0x0038, r24
     5d8:	22 96       	adiw	r28, 0x02	; 2
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <out_c>:

}
void out_c(char _bit,char _dat)
{
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	22 97       	sbiw	r28, 0x02	; 2
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	89 83       	std	Y+1, r24	; 0x01
     600:	6a 83       	std	Y+2, r22	; 0x02
	DDRC |= _BV(_bit);
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	28 2f       	mov	r18, r24
     606:	33 27       	eor	r19, r19
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	02 c0       	rjmp	.+4      	; 0x612 <out_c+0x28>
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	2a 95       	dec	r18
     614:	e2 f7       	brpl	.-8      	; 0x60e <out_c+0x24>
     616:	20 91 34 00 	lds	r18, 0x0034
     61a:	82 2b       	or	r24, r18
     61c:	80 93 34 00 	sts	0x0034, r24
	if(_dat)
     620:	8a 81       	ldd	r24, Y+2	; 0x02
     622:	88 23       	and	r24, r24
     624:	81 f0       	breq	.+32     	; 0x646 <out_c+0x5c>
		PORTC |= _BV(_bit);
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	28 2f       	mov	r18, r24
     62a:	33 27       	eor	r19, r19
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <out_c+0x4c>
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	2a 95       	dec	r18
     638:	e2 f7       	brpl	.-8      	; 0x632 <out_c+0x48>
     63a:	20 91 35 00 	lds	r18, 0x0035
     63e:	82 2b       	or	r24, r18
     640:	80 93 35 00 	sts	0x0035, r24
     644:	11 c0       	rjmp	.+34     	; 0x668 <out_c+0x7e>
	else
		PORTC &= ~_BV(_bit);
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	28 2f       	mov	r18, r24
     64a:	33 27       	eor	r19, r19
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	02 c0       	rjmp	.+4      	; 0x656 <out_c+0x6c>
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	2a 95       	dec	r18
     658:	e2 f7       	brpl	.-8      	; 0x652 <out_c+0x68>
     65a:	98 2f       	mov	r25, r24
     65c:	90 95       	com	r25
     65e:	80 91 35 00 	lds	r24, 0x0035
     662:	89 23       	and	r24, r25
     664:	80 93 35 00 	sts	0x0035, r24
     668:	22 96       	adiw	r28, 0x02	; 2
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <out_d>:

}
void out_d(char _bit,char _dat) 
{
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	22 97       	sbiw	r28, 0x02	; 2
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	89 83       	std	Y+1, r24	; 0x01
     690:	6a 83       	std	Y+2, r22	; 0x02
	DDRD |= _BV(_bit);
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	28 2f       	mov	r18, r24
     696:	33 27       	eor	r19, r19
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <out_d+0x28>
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	2a 95       	dec	r18
     6a4:	e2 f7       	brpl	.-8      	; 0x69e <out_d+0x24>
     6a6:	20 91 31 00 	lds	r18, 0x0031
     6aa:	82 2b       	or	r24, r18
     6ac:	80 93 31 00 	sts	0x0031, r24
	if(_dat)
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	88 23       	and	r24, r24
     6b4:	81 f0       	breq	.+32     	; 0x6d6 <out_d+0x5c>
		PORTD |= _BV(_bit);
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	28 2f       	mov	r18, r24
     6ba:	33 27       	eor	r19, r19
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <out_d+0x4c>
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	2a 95       	dec	r18
     6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <out_d+0x48>
     6ca:	20 91 32 00 	lds	r18, 0x0032
     6ce:	82 2b       	or	r24, r18
     6d0:	80 93 32 00 	sts	0x0032, r24
     6d4:	11 c0       	rjmp	.+34     	; 0x6f8 <out_d+0x7e>
	else
		PORTD &= ~_BV(_bit);
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	28 2f       	mov	r18, r24
     6da:	33 27       	eor	r19, r19
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <out_d+0x6c>
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	2a 95       	dec	r18
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <out_d+0x68>
     6ea:	98 2f       	mov	r25, r24
     6ec:	90 95       	com	r25
     6ee:	80 91 32 00 	lds	r24, 0x0032
     6f2:	89 23       	and	r24, r25
     6f4:	80 93 32 00 	sts	0x0032, r24
     6f8:	22 96       	adiw	r28, 0x02	; 2
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <delay_sound>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function delay 100 us per count -----------------------------------//
//------------------------------------------------------------------------------------------------//
void delay_sound(unsigned int ms)
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	26 97       	sbiw	r28, 0x06	; 6
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	9a 83       	std	Y+2, r25	; 0x02
     720:	89 83       	std	Y+1, r24	; 0x01
	unsigned int i,j;
	for(i=0;i<ms;i++)
     722:	1c 82       	std	Y+4, r1	; 0x04
     724:	1b 82       	std	Y+3, r1	; 0x03
     726:	2b 81       	ldd	r18, Y+3	; 0x03
     728:	3c 81       	ldd	r19, Y+4	; 0x04
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	9a 81       	ldd	r25, Y+2	; 0x02
     72e:	28 17       	cp	r18, r24
     730:	39 07       	cpc	r19, r25
     732:	98 f4       	brcc	.+38     	; 0x75a <delay_sound+0x50>
		for(j=0;j<80;j++);
     734:	1e 82       	std	Y+6, r1	; 0x06
     736:	1d 82       	std	Y+5, r1	; 0x05
     738:	8d 81       	ldd	r24, Y+5	; 0x05
     73a:	9e 81       	ldd	r25, Y+6	; 0x06
     73c:	80 35       	cpi	r24, 0x50	; 80
     73e:	91 05       	cpc	r25, r1
     740:	30 f4       	brcc	.+12     	; 0x74e <delay_sound+0x44>
     742:	8d 81       	ldd	r24, Y+5	; 0x05
     744:	9e 81       	ldd	r25, Y+6	; 0x06
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	9e 83       	std	Y+6, r25	; 0x06
     74a:	8d 83       	std	Y+5, r24	; 0x05
     74c:	f5 cf       	rjmp	.-22     	; 0x738 <delay_sound+0x2e>
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	9c 81       	ldd	r25, Y+4	; 0x04
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	e6 cf       	rjmp	.-52     	; 0x726 <delay_sound+0x1c>
     75a:	26 96       	adiw	r28, 0x06	; 6
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <sound_a>:
}
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_a(char ch,int freq,int time)
{
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	29 97       	sbiw	r28, 0x09	; 9
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	89 83       	std	Y+1, r24	; 0x01
     782:	7b 83       	std	Y+3, r23	; 0x03
     784:	6a 83       	std	Y+2, r22	; 0x02
     786:	5d 83       	std	Y+5, r21	; 0x05
     788:	4c 83       	std	Y+4, r20	; 0x04
	int dt=0,m=0;	// Keep value and 
     78a:	1f 82       	std	Y+7, r1	; 0x07
     78c:	1e 82       	std	Y+6, r1	; 0x06
     78e:	19 86       	std	Y+9, r1	; 0x09
     790:	18 86       	std	Y+8, r1	; 0x08
    dt = 5000/freq;   	// Keep active logic delay
     792:	88 e8       	ldi	r24, 0x88	; 136
     794:	93 e1       	ldi	r25, 0x13	; 19
     796:	2a 81       	ldd	r18, Y+2	; 0x02
     798:	3b 81       	ldd	r19, Y+3	; 0x03
     79a:	b9 01       	movw	r22, r18
     79c:	0e 94 5b 1a 	call	0x34b6 <__divmodhi4>
     7a0:	cb 01       	movw	r24, r22
     7a2:	9f 83       	std	Y+7, r25	; 0x07
     7a4:	8e 83       	std	Y+6, r24	; 0x06
	time = (5*time)/dt;	// Keep counter for generate sound
     7a6:	2c 81       	ldd	r18, Y+4	; 0x04
     7a8:	3d 81       	ldd	r19, Y+5	; 0x05
     7aa:	c9 01       	movw	r24, r18
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	88 0f       	add	r24, r24
     7b2:	99 1f       	adc	r25, r25
     7b4:	82 0f       	add	r24, r18
     7b6:	93 1f       	adc	r25, r19
     7b8:	2e 81       	ldd	r18, Y+6	; 0x06
     7ba:	3f 81       	ldd	r19, Y+7	; 0x07
     7bc:	b9 01       	movw	r22, r18
     7be:	0e 94 5b 1a 	call	0x34b6 <__divmodhi4>
     7c2:	cb 01       	movw	r24, r22
     7c4:	9d 83       	std	Y+5, r25	; 0x05
     7c6:	8c 83       	std	Y+4, r24	; 0x04
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     7c8:	19 86       	std	Y+9, r1	; 0x09
     7ca:	18 86       	std	Y+8, r1	; 0x08
     7cc:	28 85       	ldd	r18, Y+8	; 0x08
     7ce:	39 85       	ldd	r19, Y+9	; 0x09
     7d0:	8c 81       	ldd	r24, Y+4	; 0x04
     7d2:	9d 81       	ldd	r25, Y+5	; 0x05
     7d4:	28 17       	cp	r18, r24
     7d6:	39 07       	cpc	r19, r25
     7d8:	b4 f4       	brge	.+44     	; 0x806 <sound_a+0x9a>
	{
        out_a(ch,1);
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	0e 94 65 02 	call	0x4ca <out_a>
		delay_sound(dt);	// Delay for sound	
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	9f 81       	ldd	r25, Y+7	; 0x07
     7e6:	0e 94 85 03 	call	0x70a <delay_sound>
        out_a(ch,0);
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	0e 94 65 02 	call	0x4ca <out_a>
		delay_sound(dt);	// Delay for sound
     7f2:	8e 81       	ldd	r24, Y+6	; 0x06
     7f4:	9f 81       	ldd	r25, Y+7	; 0x07
     7f6:	0e 94 85 03 	call	0x70a <delay_sound>
     7fa:	88 85       	ldd	r24, Y+8	; 0x08
     7fc:	99 85       	ldd	r25, Y+9	; 0x09
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	99 87       	std	Y+9, r25	; 0x09
     802:	88 87       	std	Y+8, r24	; 0x08
     804:	e3 cf       	rjmp	.-58     	; 0x7cc <sound_a+0x60>
     806:	29 96       	adiw	r28, 0x09	; 9
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <sound_b>:
	}		
}
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_b(char ch,int freq,int time)
{
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	29 97       	sbiw	r28, 0x09	; 9
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	89 83       	std	Y+1, r24	; 0x01
     82e:	7b 83       	std	Y+3, r23	; 0x03
     830:	6a 83       	std	Y+2, r22	; 0x02
     832:	5d 83       	std	Y+5, r21	; 0x05
     834:	4c 83       	std	Y+4, r20	; 0x04
	int dt=0,m=0;	// Keep value and 
     836:	1f 82       	std	Y+7, r1	; 0x07
     838:	1e 82       	std	Y+6, r1	; 0x06
     83a:	19 86       	std	Y+9, r1	; 0x09
     83c:	18 86       	std	Y+8, r1	; 0x08
    dt = 5000/freq;   	// Keep active logic delay
     83e:	88 e8       	ldi	r24, 0x88	; 136
     840:	93 e1       	ldi	r25, 0x13	; 19
     842:	2a 81       	ldd	r18, Y+2	; 0x02
     844:	3b 81       	ldd	r19, Y+3	; 0x03
     846:	b9 01       	movw	r22, r18
     848:	0e 94 5b 1a 	call	0x34b6 <__divmodhi4>
     84c:	cb 01       	movw	r24, r22
     84e:	9f 83       	std	Y+7, r25	; 0x07
     850:	8e 83       	std	Y+6, r24	; 0x06
	time = (5*time)/dt;	// Keep counter for generate sound
     852:	2c 81       	ldd	r18, Y+4	; 0x04
     854:	3d 81       	ldd	r19, Y+5	; 0x05
     856:	c9 01       	movw	r24, r18
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	82 0f       	add	r24, r18
     862:	93 1f       	adc	r25, r19
     864:	2e 81       	ldd	r18, Y+6	; 0x06
     866:	3f 81       	ldd	r19, Y+7	; 0x07
     868:	b9 01       	movw	r22, r18
     86a:	0e 94 5b 1a 	call	0x34b6 <__divmodhi4>
     86e:	cb 01       	movw	r24, r22
     870:	9d 83       	std	Y+5, r25	; 0x05
     872:	8c 83       	std	Y+4, r24	; 0x04
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     874:	19 86       	std	Y+9, r1	; 0x09
     876:	18 86       	std	Y+8, r1	; 0x08
     878:	28 85       	ldd	r18, Y+8	; 0x08
     87a:	39 85       	ldd	r19, Y+9	; 0x09
     87c:	8c 81       	ldd	r24, Y+4	; 0x04
     87e:	9d 81       	ldd	r25, Y+5	; 0x05
     880:	28 17       	cp	r18, r24
     882:	39 07       	cpc	r19, r25
     884:	b4 f4       	brge	.+44     	; 0x8b2 <sound_b+0x9a>
	{
        out_b(ch,1);
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	0e 94 ad 02 	call	0x55a <out_b>
		delay_sound(dt);	// Delay for sound	
     88e:	8e 81       	ldd	r24, Y+6	; 0x06
     890:	9f 81       	ldd	r25, Y+7	; 0x07
     892:	0e 94 85 03 	call	0x70a <delay_sound>
        out_b(ch,0);
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	0e 94 ad 02 	call	0x55a <out_b>
		delay_sound(dt);	// Delay for sound
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	9f 81       	ldd	r25, Y+7	; 0x07
     8a2:	0e 94 85 03 	call	0x70a <delay_sound>
     8a6:	88 85       	ldd	r24, Y+8	; 0x08
     8a8:	99 85       	ldd	r25, Y+9	; 0x09
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	99 87       	std	Y+9, r25	; 0x09
     8ae:	88 87       	std	Y+8, r24	; 0x08
     8b0:	e3 cf       	rjmp	.-58     	; 0x878 <sound_b+0x60>
     8b2:	29 96       	adiw	r28, 0x09	; 9
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <sound_c>:
	}		
}
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_c(char ch,int freq,int time)
{
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	29 97       	sbiw	r28, 0x09	; 9
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	7b 83       	std	Y+3, r23	; 0x03
     8dc:	6a 83       	std	Y+2, r22	; 0x02
     8de:	5d 83       	std	Y+5, r21	; 0x05
     8e0:	4c 83       	std	Y+4, r20	; 0x04
	int dt=0,m=0;	// Keep value and 
     8e2:	1f 82       	std	Y+7, r1	; 0x07
     8e4:	1e 82       	std	Y+6, r1	; 0x06
     8e6:	19 86       	std	Y+9, r1	; 0x09
     8e8:	18 86       	std	Y+8, r1	; 0x08
    dt = 5000/freq;   	// Keep active logic delay
     8ea:	88 e8       	ldi	r24, 0x88	; 136
     8ec:	93 e1       	ldi	r25, 0x13	; 19
     8ee:	2a 81       	ldd	r18, Y+2	; 0x02
     8f0:	3b 81       	ldd	r19, Y+3	; 0x03
     8f2:	b9 01       	movw	r22, r18
     8f4:	0e 94 5b 1a 	call	0x34b6 <__divmodhi4>
     8f8:	cb 01       	movw	r24, r22
     8fa:	9f 83       	std	Y+7, r25	; 0x07
     8fc:	8e 83       	std	Y+6, r24	; 0x06
	time = (5*time)/dt;	// Keep counter for generate sound
     8fe:	2c 81       	ldd	r18, Y+4	; 0x04
     900:	3d 81       	ldd	r19, Y+5	; 0x05
     902:	c9 01       	movw	r24, r18
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	82 0f       	add	r24, r18
     90e:	93 1f       	adc	r25, r19
     910:	2e 81       	ldd	r18, Y+6	; 0x06
     912:	3f 81       	ldd	r19, Y+7	; 0x07
     914:	b9 01       	movw	r22, r18
     916:	0e 94 5b 1a 	call	0x34b6 <__divmodhi4>
     91a:	cb 01       	movw	r24, r22
     91c:	9d 83       	std	Y+5, r25	; 0x05
     91e:	8c 83       	std	Y+4, r24	; 0x04
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     920:	19 86       	std	Y+9, r1	; 0x09
     922:	18 86       	std	Y+8, r1	; 0x08
     924:	28 85       	ldd	r18, Y+8	; 0x08
     926:	39 85       	ldd	r19, Y+9	; 0x09
     928:	8c 81       	ldd	r24, Y+4	; 0x04
     92a:	9d 81       	ldd	r25, Y+5	; 0x05
     92c:	28 17       	cp	r18, r24
     92e:	39 07       	cpc	r19, r25
     930:	b4 f4       	brge	.+44     	; 0x95e <sound_c+0x9a>
	{
        out_c(ch,1);
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	0e 94 f5 02 	call	0x5ea <out_c>
		delay_sound(dt);	// Delay for sound	
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	9f 81       	ldd	r25, Y+7	; 0x07
     93e:	0e 94 85 03 	call	0x70a <delay_sound>
        out_c(ch,0);
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	0e 94 f5 02 	call	0x5ea <out_c>
		delay_sound(dt);	// Delay for sound
     94a:	8e 81       	ldd	r24, Y+6	; 0x06
     94c:	9f 81       	ldd	r25, Y+7	; 0x07
     94e:	0e 94 85 03 	call	0x70a <delay_sound>
     952:	88 85       	ldd	r24, Y+8	; 0x08
     954:	99 85       	ldd	r25, Y+9	; 0x09
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	99 87       	std	Y+9, r25	; 0x09
     95a:	88 87       	std	Y+8, r24	; 0x08
     95c:	e3 cf       	rjmp	.-58     	; 0x924 <sound_c+0x60>
     95e:	29 96       	adiw	r28, 0x09	; 9
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <sound_d>:
	}		
}
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_d(char ch,int freq,int time)
{
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	29 97       	sbiw	r28, 0x09	; 9
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	89 83       	std	Y+1, r24	; 0x01
     986:	7b 83       	std	Y+3, r23	; 0x03
     988:	6a 83       	std	Y+2, r22	; 0x02
     98a:	5d 83       	std	Y+5, r21	; 0x05
     98c:	4c 83       	std	Y+4, r20	; 0x04
	int dt=0,m=0;	// Keep value and 
     98e:	1f 82       	std	Y+7, r1	; 0x07
     990:	1e 82       	std	Y+6, r1	; 0x06
     992:	19 86       	std	Y+9, r1	; 0x09
     994:	18 86       	std	Y+8, r1	; 0x08
    dt = 5000/freq;   	// Keep active logic delay
     996:	88 e8       	ldi	r24, 0x88	; 136
     998:	93 e1       	ldi	r25, 0x13	; 19
     99a:	2a 81       	ldd	r18, Y+2	; 0x02
     99c:	3b 81       	ldd	r19, Y+3	; 0x03
     99e:	b9 01       	movw	r22, r18
     9a0:	0e 94 5b 1a 	call	0x34b6 <__divmodhi4>
     9a4:	cb 01       	movw	r24, r22
     9a6:	9f 83       	std	Y+7, r25	; 0x07
     9a8:	8e 83       	std	Y+6, r24	; 0x06
	time = (5*time)/dt;	// Keep counter for generate sound
     9aa:	2c 81       	ldd	r18, Y+4	; 0x04
     9ac:	3d 81       	ldd	r19, Y+5	; 0x05
     9ae:	c9 01       	movw	r24, r18
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	82 0f       	add	r24, r18
     9ba:	93 1f       	adc	r25, r19
     9bc:	2e 81       	ldd	r18, Y+6	; 0x06
     9be:	3f 81       	ldd	r19, Y+7	; 0x07
     9c0:	b9 01       	movw	r22, r18
     9c2:	0e 94 5b 1a 	call	0x34b6 <__divmodhi4>
     9c6:	cb 01       	movw	r24, r22
     9c8:	9d 83       	std	Y+5, r25	; 0x05
     9ca:	8c 83       	std	Y+4, r24	; 0x04
	for(m=0;m<time;m++) // Loop for generate sound(Toggle logic P0.12)   
     9cc:	19 86       	std	Y+9, r1	; 0x09
     9ce:	18 86       	std	Y+8, r1	; 0x08
     9d0:	28 85       	ldd	r18, Y+8	; 0x08
     9d2:	39 85       	ldd	r19, Y+9	; 0x09
     9d4:	8c 81       	ldd	r24, Y+4	; 0x04
     9d6:	9d 81       	ldd	r25, Y+5	; 0x05
     9d8:	28 17       	cp	r18, r24
     9da:	39 07       	cpc	r19, r25
     9dc:	b4 f4       	brge	.+44     	; 0xa0a <sound_d+0x9a>
	{
        out_d(ch,1);
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	0e 94 3d 03 	call	0x67a <out_d>
		delay_sound(dt);	// Delay for sound	
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	9f 81       	ldd	r25, Y+7	; 0x07
     9ea:	0e 94 85 03 	call	0x70a <delay_sound>
        out_d(ch,0);
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	0e 94 3d 03 	call	0x67a <out_d>
		delay_sound(dt);	// Delay for sound
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	9f 81       	ldd	r25, Y+7	; 0x07
     9fa:	0e 94 85 03 	call	0x70a <delay_sound>
     9fe:	88 85       	ldd	r24, Y+8	; 0x08
     a00:	99 85       	ldd	r25, Y+9	; 0x09
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	99 87       	std	Y+9, r25	; 0x09
     a06:	88 87       	std	Y+8, r24	; 0x08
     a08:	e3 cf       	rjmp	.-58     	; 0x9d0 <sound_d+0x60>
     a0a:	29 96       	adiw	r28, 0x09	; 9
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <beep_a>:
	}		
}

//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_a(char _ch)
{
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	21 97       	sbiw	r28, 0x01	; 1
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	89 83       	std	Y+1, r24	; 0x01
	sound_a(_ch,3000,100);	// Generate sound default frequency
     a32:	44 e6       	ldi	r20, 0x64	; 100
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	68 eb       	ldi	r22, 0xB8	; 184
     a38:	7b e0       	ldi	r23, 0x0B	; 11
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	0e 94 b6 03 	call	0x76c <sound_a>
     a40:	21 96       	adiw	r28, 0x01	; 1
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <beep_b>:
}
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_b(char _ch)
{
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	21 97       	sbiw	r28, 0x01	; 1
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	89 83       	std	Y+1, r24	; 0x01
	sound_b(_ch,3000,100);	// Generate sound default frequency
     a68:	44 e6       	ldi	r20, 0x64	; 100
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	68 eb       	ldi	r22, 0xB8	; 184
     a6e:	7b e0       	ldi	r23, 0x0B	; 11
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	0e 94 0c 04 	call	0x818 <sound_b>
     a76:	21 96       	adiw	r28, 0x01	; 1
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <beep_c>:
}
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_c(char _ch)
{
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	21 97       	sbiw	r28, 0x01	; 1
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	89 83       	std	Y+1, r24	; 0x01
	sound_c(_ch,3000,100);	// Generate sound default frequency
     a9e:	44 e6       	ldi	r20, 0x64	; 100
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	68 eb       	ldi	r22, 0xB8	; 184
     aa4:	7b e0       	ldi	r23, 0x0B	; 11
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	0e 94 62 04 	call	0x8c4 <sound_c>
     aac:	21 96       	adiw	r28, 0x01	; 1
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <beep_d>:
}
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_d(char _ch)
{
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	21 97       	sbiw	r28, 0x01	; 1
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	89 83       	std	Y+1, r24	; 0x01
	sound_d(_ch,3000,100);	// Generate sound default frequency
     ad4:	44 e6       	ldi	r20, 0x64	; 100
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	68 eb       	ldi	r22, 0xB8	; 184
     ada:	7b e0       	ldi	r23, 0x0B	; 11
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	0e 94 b8 04 	call	0x970 <sound_d>
     ae2:	21 96       	adiw	r28, 0x01	; 1
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <lcd_clk>:
void lcd_init(void);
char lcd_ini=0,_lcd_clear_display=0;

void lcd_clk(void)				/* Pulse LCD clock on EN*/
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
  EN(1);
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	0e 94 f5 02 	call	0x5ea <out_c>
  sleep(1);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 6f 00 	call	0xde <sleep>
  EN(0);
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	0e 94 f5 02 	call	0x5ea <out_c>
  sleep(1);
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 6f 00 	call	0xde <sleep>
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <lcd_command>:
}

void lcd_command(unsigned char outbyte)	/* Send command (4bit operation) */
{
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	21 97       	sbiw	r28, 0x01	; 1
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	89 83       	std	Y+1, r24	; 0x01
  if(lcd_ini==0)
     b38:	80 91 ee 02 	lds	r24, 0x02EE
     b3c:	88 23       	and	r24, r24
     b3e:	29 f4       	brne	.+10     	; 0xb4a <lcd_command+0x28>
  {
  	lcd_ini=1;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	80 93 ee 02 	sts	0x02EE, r24
	lcd_init();
     b46:	0e 94 66 06 	call	0xccc <lcd_init>
  }
  RS(0);		// Command
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	0e 94 f5 02 	call	0x5ea <out_c>
  PORTC=(PORTC&0x0f)|(outbyte&0xf0);
     b52:	80 91 35 00 	lds	r24, 0x0035
     b56:	28 2f       	mov	r18, r24
     b58:	2f 70       	andi	r18, 0x0F	; 15
     b5a:	90 ef       	ldi	r25, 0xF0	; 240
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	89 23       	and	r24, r25
     b60:	82 2b       	or	r24, r18
     b62:	80 93 35 00 	sts	0x0035, r24
  lcd_clk();
     b66:	0e 94 7a 05 	call	0xaf4 <lcd_clk>
  PORTC=(PORTC&0x0f)|((outbyte<<4)&0xf0);
     b6a:	80 91 35 00 	lds	r24, 0x0035
     b6e:	38 2f       	mov	r19, r24
     b70:	3f 70       	andi	r19, 0x0F	; 15
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	99 27       	eor	r25, r25
     b76:	82 95       	swap	r24
     b78:	92 95       	swap	r25
     b7a:	90 7f       	andi	r25, 0xF0	; 240
     b7c:	98 27       	eor	r25, r24
     b7e:	80 7f       	andi	r24, 0xF0	; 240
     b80:	98 27       	eor	r25, r24
     b82:	20 ef       	ldi	r18, 0xF0	; 240
     b84:	82 23       	and	r24, r18
     b86:	83 2b       	or	r24, r19
     b88:	80 93 35 00 	sts	0x0035, r24
  lcd_clk();
     b8c:	0e 94 7a 05 	call	0xaf4 <lcd_clk>
     b90:	21 96       	adiw	r28, 0x01	; 1
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <lcd_text>:
}

void lcd_text(unsigned char outbyte) /* Send Data (4bit operation) */
{
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	21 97       	sbiw	r28, 0x01	; 1
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	89 83       	std	Y+1, r24	; 0x01
  if(lcd_ini==0)
     bb8:	80 91 ee 02 	lds	r24, 0x02EE
     bbc:	88 23       	and	r24, r24
     bbe:	29 f4       	brne	.+10     	; 0xbca <lcd_text+0x28>
  {
  	lcd_ini=1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 ee 02 	sts	0x02EE, r24
	lcd_init();
     bc6:	0e 94 66 06 	call	0xccc <lcd_init>
  }
  RS(1);		// Display
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	0e 94 f5 02 	call	0x5ea <out_c>
  PORTC=(PORTC&0x0f)|(outbyte&0xf0);
     bd2:	80 91 35 00 	lds	r24, 0x0035
     bd6:	28 2f       	mov	r18, r24
     bd8:	2f 70       	andi	r18, 0x0F	; 15
     bda:	90 ef       	ldi	r25, 0xF0	; 240
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	89 23       	and	r24, r25
     be0:	82 2b       	or	r24, r18
     be2:	80 93 35 00 	sts	0x0035, r24
  lcd_clk();
     be6:	0e 94 7a 05 	call	0xaf4 <lcd_clk>
  PORTC=(PORTC&0x0f)|((outbyte<<4)&0xf0);
     bea:	80 91 35 00 	lds	r24, 0x0035
     bee:	38 2f       	mov	r19, r24
     bf0:	3f 70       	andi	r19, 0x0F	; 15
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	99 27       	eor	r25, r25
     bf6:	82 95       	swap	r24
     bf8:	92 95       	swap	r25
     bfa:	90 7f       	andi	r25, 0xF0	; 240
     bfc:	98 27       	eor	r25, r24
     bfe:	80 7f       	andi	r24, 0xF0	; 240
     c00:	98 27       	eor	r25, r24
     c02:	20 ef       	ldi	r18, 0xF0	; 240
     c04:	82 23       	and	r24, r18
     c06:	83 2b       	or	r24, r19
     c08:	80 93 35 00 	sts	0x0035, r24
  lcd_clk();
     c0c:	0e 94 7a 05 	call	0xaf4 <lcd_clk>
     c10:	21 96       	adiw	r28, 0x01	; 1
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <lcd_puts>:
}
//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------------------ Function show string message ----------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd_puts(unsigned char line,char *p)
{
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	23 97       	sbiw	r28, 0x03	; 3
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	89 83       	std	Y+1, r24	; 0x01
     c38:	7b 83       	std	Y+3, r23	; 0x03
     c3a:	6a 83       	std	Y+2, r22	; 0x02
	lcd_origin();         // Set origin address of LCD
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	0e 94 91 05 	call	0xb22 <lcd_command>
	lcd_command(line);			// Set address 00H of LCD
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	0e 94 91 05 	call	0xb22 <lcd_command>
	while(*p)                  // Check data pointer = 0?
     c48:	ea 81       	ldd	r30, Y+2	; 0x02
     c4a:	fb 81       	ldd	r31, Y+3	; 0x03
     c4c:	80 81       	ld	r24, Z
     c4e:	88 23       	and	r24, r24
     c50:	59 f0       	breq	.+22     	; 0xc68 <lcd_puts+0x46>
	{
	 lcd_text(*p);             // Send data to LCD
     c52:	ea 81       	ldd	r30, Y+2	; 0x02
     c54:	fb 81       	ldd	r31, Y+3	; 0x03
     c56:	80 81       	ld	r24, Z
     c58:	0e 94 d1 05 	call	0xba2 <lcd_text>
	 p++;                      // Increase address 1 time 
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	9b 83       	std	Y+3, r25	; 0x03
     c64:	8a 83       	std	Y+2, r24	; 0x02
     c66:	f0 cf       	rjmp	.-32     	; 0xc48 <lcd_puts+0x26>
     c68:	23 96       	adiw	r28, 0x03	; 3
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <inttolcd>:
	}
}

//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------- Convert integer to ascii for display on LCD ---------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void inttolcd(unsigned char posi, long value)
{
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	65 97       	sbiw	r28, 0x15	; 21
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	4a 83       	std	Y+2, r20	; 0x02
     c92:	5b 83       	std	Y+3, r21	; 0x03
     c94:	6c 83       	std	Y+4, r22	; 0x04
     c96:	7d 83       	std	Y+5, r23	; 0x05
	char buff[16];			// For keep string send to LCD 
	ltoa(value,&buff[0],10);
     c98:	ce 01       	movw	r24, r28
     c9a:	06 96       	adiw	r24, 0x06	; 6
     c9c:	2a e0       	ldi	r18, 0x0A	; 10
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	ac 01       	movw	r20, r24
     ca2:	6a 81       	ldd	r22, Y+2	; 0x02
     ca4:	7b 81       	ldd	r23, Y+3	; 0x03
     ca6:	8c 81       	ldd	r24, Y+4	; 0x04
     ca8:	9d 81       	ldd	r25, Y+5	; 0x05
     caa:	0e 94 ca 16 	call	0x2d94 <ltoa>
	lcd_puts(posi,buff);  	// Send integer to LCD
     cae:	ce 01       	movw	r24, r28
     cb0:	06 96       	adiw	r24, 0x06	; 6
     cb2:	bc 01       	movw	r22, r24
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	0e 94 11 06 	call	0xc22 <lcd_puts>
     cba:	65 96       	adiw	r28, 0x15	; 21
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <lcd_init>:
}
//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------- Convert integer to ascii for display on LCD ---------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
/*void floattolcd(unsigned char posi, float value)
{
	char buff[16];			// For keep string send to LCD 
	dtostrf(value,16,5,buff);
	lcd_puts(posi,buff);  	// Send integer to LCD
}*/

void lcd_init(void)
{
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
  PORTC = 0x00;
     cd4:	10 92 35 00 	sts	0x0035, r1
  DDRC = 0xFC;
     cd8:	8c ef       	ldi	r24, 0xFC	; 252
     cda:	80 93 34 00 	sts	0x0034, r24
  EN(0);						// Init. EN = 0
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	0e 94 f5 02 	call	0x5ea <out_c>
  RS(0);						// Init. RS = 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	0e 94 f5 02 	call	0x5ea <out_c>

  sleep(500);
     cee:	84 ef       	ldi	r24, 0xF4	; 244
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	0e 94 6f 00 	call	0xde <sleep>
  PORTC=(PORTC&0x0f)|0x30;	// Force LCD receive 1 times command per pulse
     cf6:	80 91 35 00 	lds	r24, 0x0035
     cfa:	8f 70       	andi	r24, 0x0F	; 15
     cfc:	80 63       	ori	r24, 0x30	; 48
     cfe:	80 93 35 00 	sts	0x0035, r24
  lcd_clk();
     d02:	0e 94 7a 05 	call	0xaf4 <lcd_clk>
  PORTC=(PORTC&0x0f)|0x30;	// (do 3 times for ensure LCD operation forced)
     d06:	80 91 35 00 	lds	r24, 0x0035
     d0a:	8f 70       	andi	r24, 0x0F	; 15
     d0c:	80 63       	ori	r24, 0x30	; 48
     d0e:	80 93 35 00 	sts	0x0035, r24
  lcd_clk();
     d12:	0e 94 7a 05 	call	0xaf4 <lcd_clk>
  PORTC=(PORTC&0x0f)|0x30;
     d16:	80 91 35 00 	lds	r24, 0x0035
     d1a:	8f 70       	andi	r24, 0x0F	; 15
     d1c:	80 63       	ori	r24, 0x30	; 48
     d1e:	80 93 35 00 	sts	0x0035, r24
  lcd_clk();
     d22:	0e 94 7a 05 	call	0xaf4 <lcd_clk>

  PORTC=(PORTC&0x0f)|0x20;	// Switch to real 4 bit transfer mode on first
     d26:	80 91 35 00 	lds	r24, 0x0035
     d2a:	8f 70       	andi	r24, 0x0F	; 15
     d2c:	80 62       	ori	r24, 0x20	; 32
     d2e:	80 93 35 00 	sts	0x0035, r24
  lcd_clk();
     d32:	0e 94 7a 05 	call	0xaf4 <lcd_clk>

  lcd_command(0x28);		// Send real command to 4 bit operation and set N=1, F=0
     d36:	88 e2       	ldi	r24, 0x28	; 40
     d38:	0e 94 91 05 	call	0xb22 <lcd_command>
  lcd_command(0x01);		// Clear all
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	0e 94 91 05 	call	0xb22 <lcd_command>
  lcd_command(0x06);		// Increase cursor automatic after byte
     d42:	86 e0       	ldi	r24, 0x06	; 6
     d44:	0e 94 91 05 	call	0xb22 <lcd_command>
  lcd_command(0x0C);		// Display on, no cursor, not blink
     d48:	8c e0       	ldi	r24, 0x0C	; 12
     d4a:	0e 94 91 05 	call	0xb22 <lcd_command>
  lcd_command(0x02);		// Home position
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	0e 94 91 05 	call	0xb22 <lcd_command>
  lcd_command(0x01);		// Clear all again
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	0e 94 91 05 	call	0xb22 <lcd_command>
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <lcd>:
}
//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------------------ Function LCD display and %d support(Beta version) ----------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd(char *p,...)
{
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	67 97       	sbiw	r28, 0x17	; 23
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
	char *arg,**pp;	// Poter of point
	char *ptr,char_count=0,buff[16];
     d78:	1f 82       	std	Y+7, r1	; 0x07
	pp = &p;
     d7a:	8e e1       	ldi	r24, 0x1E	; 30
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	8c 0f       	add	r24, r28
     d80:	9d 1f       	adc	r25, r29
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	8b 83       	std	Y+3, r24	; 0x03
	ptr = p;	// Copy address
     d86:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d88:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
	arg = pp;	// Copy address of p point	
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
	
	lcd_origin();       // Set origin address of LCD
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	0e 94 91 05 	call	0xb22 <lcd_command>
	lcd_command(0x80);	// Set address 00H of LCD
     d9c:	80 e8       	ldi	r24, 0x80	; 128
     d9e:	0e 94 91 05 	call	0xb22 <lcd_command>
	if(_lcd_clear_display)
     da2:	80 91 ef 02 	lds	r24, 0x02EF
     da6:	88 23       	and	r24, r24
     da8:	29 f0       	breq	.+10     	; 0xdb4 <lcd+0x54>
	{
		_lcd_clear_display = 0;
     daa:	10 92 ef 02 	sts	0x02EF, r1
		lcd_clear();
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	0e 94 91 05 	call	0xb22 <lcd_command>
	}
	arg += 2;	// Cross 2 time go to Origin of first parameter 
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	02 96       	adiw	r24, 0x02	; 2
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
	
	while(*ptr)                 // Check data pointer = 0?
     dbe:	ed 81       	ldd	r30, Y+5	; 0x05
     dc0:	fe 81       	ldd	r31, Y+6	; 0x06
     dc2:	80 81       	ld	r24, Z
     dc4:	88 23       	and	r24, r24
     dc6:	09 f4       	brne	.+2      	; 0xdca <lcd+0x6a>
     dc8:	72 c1       	rjmp	.+740    	; 0x10ae <lcd+0x34e>
	{
	 	if(TEST_CHAR_TYPE(ptr))
     dca:	ed 81       	ldd	r30, Y+5	; 0x05
     dcc:	fe 81       	ldd	r31, Y+6	; 0x06
     dce:	80 81       	ld	r24, Z
     dd0:	85 32       	cpi	r24, 0x25	; 37
     dd2:	91 f5       	brne	.+100    	; 0xe38 <lcd+0xd8>
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	9e 81       	ldd	r25, Y+6	; 0x06
     dd8:	fc 01       	movw	r30, r24
     dda:	31 96       	adiw	r30, 0x01	; 1
     ddc:	80 81       	ld	r24, Z
     dde:	83 36       	cpi	r24, 0x63	; 99
     de0:	41 f0       	breq	.+16     	; 0xdf2 <lcd+0x92>
     de2:	8d 81       	ldd	r24, Y+5	; 0x05
     de4:	9e 81       	ldd	r25, Y+6	; 0x06
     de6:	fc 01       	movw	r30, r24
     de8:	31 96       	adiw	r30, 0x01	; 1
     dea:	80 81       	ld	r24, Z
     dec:	83 34       	cpi	r24, 0x43	; 67
     dee:	09 f0       	breq	.+2      	; 0xdf2 <lcd+0x92>
     df0:	23 c0       	rjmp	.+70     	; 0xe38 <lcd+0xd8>
		{
			char_count++;
     df2:	8f 81       	ldd	r24, Y+7	; 0x07
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	8f 83       	std	Y+7, r24	; 0x07
			if(char_count==17)
     df8:	8f 81       	ldd	r24, Y+7	; 0x07
     dfa:	81 31       	cpi	r24, 0x11	; 17
     dfc:	31 f4       	brne	.+12     	; 0xe0a <lcd+0xaa>
			{
				lcd_origin();
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	0e 94 91 05 	call	0xb22 <lcd_command>
				lcd_command(0xC0);
     e04:	80 ec       	ldi	r24, 0xC0	; 192
     e06:	0e 94 91 05 	call	0xb22 <lcd_command>
			}
			if(char_count>32)
     e0a:	8f 81       	ldd	r24, Y+7	; 0x07
     e0c:	81 32       	cpi	r24, 0x21	; 33
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <lcd+0xb2>
			{
				char_count = 0;
     e10:	1f 82       	std	Y+7, r1	; 0x07
			}
			lcd_text(toascii(*arg));             // Send data to LCD
     e12:	e9 81       	ldd	r30, Y+1	; 0x01
     e14:	fa 81       	ldd	r31, Y+2	; 0x02
     e16:	80 81       	ld	r24, Z
     e18:	99 27       	eor	r25, r25
     e1a:	0e 94 ab 1a 	call	0x3556 <toascii>
     e1e:	0e 94 d1 05 	call	0xba2 <lcd_text>
	 	
			arg+=2;	// Cross address char type
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	02 96       	adiw	r24, 0x02	; 2
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	9e 81       	ldd	r25, Y+6	; 0x06
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	9e 83       	std	Y+6, r25	; 0x06
     e34:	8d 83       	std	Y+5, r24	; 0x05
     e36:	35 c1       	rjmp	.+618    	; 0x10a2 <lcd+0x342>
		}
		else if(TEST_INT_TYPE(ptr))
     e38:	ed 81       	ldd	r30, Y+5	; 0x05
     e3a:	fe 81       	ldd	r31, Y+6	; 0x06
     e3c:	80 81       	ld	r24, Z
     e3e:	85 32       	cpi	r24, 0x25	; 37
     e40:	09 f0       	breq	.+2      	; 0xe44 <lcd+0xe4>
     e42:	4d c0       	rjmp	.+154    	; 0xede <lcd+0x17e>
     e44:	8d 81       	ldd	r24, Y+5	; 0x05
     e46:	9e 81       	ldd	r25, Y+6	; 0x06
     e48:	fc 01       	movw	r30, r24
     e4a:	31 96       	adiw	r30, 0x01	; 1
     e4c:	80 81       	ld	r24, Z
     e4e:	84 36       	cpi	r24, 0x64	; 100
     e50:	41 f0       	breq	.+16     	; 0xe62 <lcd+0x102>
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	fc 01       	movw	r30, r24
     e58:	31 96       	adiw	r30, 0x01	; 1
     e5a:	80 81       	ld	r24, Z
     e5c:	84 34       	cpi	r24, 0x44	; 68
     e5e:	09 f0       	breq	.+2      	; 0xe62 <lcd+0x102>
     e60:	3e c0       	rjmp	.+124    	; 0xede <lcd+0x17e>
		{
			p = ltoa(*(int *)arg,&buff[0],10);
     e62:	ae 01       	movw	r20, r28
     e64:	48 5f       	subi	r20, 0xF8	; 248
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	aa 27       	eor	r26, r26
     e72:	97 fd       	sbrc	r25, 7
     e74:	a0 95       	com	r26
     e76:	ba 2f       	mov	r27, r26
     e78:	2a e0       	ldi	r18, 0x0A	; 10
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 ca 16 	call	0x2d94 <ltoa>
     e84:	9f 8f       	std	Y+31, r25	; 0x1f
     e86:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     e88:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e8a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e8c:	80 81       	ld	r24, Z
     e8e:	88 23       	and	r24, r24
     e90:	d9 f0       	breq	.+54     	; 0xec8 <lcd+0x168>
			{
	 			char_count++;
     e92:	8f 81       	ldd	r24, Y+7	; 0x07
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	8f 83       	std	Y+7, r24	; 0x07
				if(char_count==17)
     e98:	8f 81       	ldd	r24, Y+7	; 0x07
     e9a:	81 31       	cpi	r24, 0x11	; 17
     e9c:	31 f4       	brne	.+12     	; 0xeaa <lcd+0x14a>
				{
					lcd_origin();
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	0e 94 91 05 	call	0xb22 <lcd_command>
					lcd_command(0xC0);
     ea4:	80 ec       	ldi	r24, 0xC0	; 192
     ea6:	0e 94 91 05 	call	0xb22 <lcd_command>
				}
				if(char_count>32)
     eaa:	8f 81       	ldd	r24, Y+7	; 0x07
     eac:	81 32       	cpi	r24, 0x21	; 33
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <lcd+0x152>
				{
					char_count = 0;
     eb0:	1f 82       	std	Y+7, r1	; 0x07
				}
				lcd_text(*p);             // Send data to LCD
     eb2:	ee 8d       	ldd	r30, Y+30	; 0x1e
     eb4:	ff 8d       	ldd	r31, Y+31	; 0x1f
     eb6:	80 81       	ld	r24, Z
     eb8:	0e 94 d1 05 	call	0xba2 <lcd_text>
	 			p++;                     // Increase address 1 time 
     ebc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ebe:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	9f 8f       	std	Y+31, r25	; 0x1f
     ec4:	8e 8f       	std	Y+30, r24	; 0x1e
     ec6:	e0 cf       	rjmp	.-64     	; 0xe88 <lcd+0x128>
			}
			arg+=2;	// Cross address int type
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	02 96       	adiw	r24, 0x02	; 2
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	e2 c0       	rjmp	.+452    	; 0x10a2 <lcd+0x342>
		}
		else if(TEST_LONG_TYPE(ptr))
     ede:	ed 81       	ldd	r30, Y+5	; 0x05
     ee0:	fe 81       	ldd	r31, Y+6	; 0x06
     ee2:	80 81       	ld	r24, Z
     ee4:	85 32       	cpi	r24, 0x25	; 37
     ee6:	09 f0       	breq	.+2      	; 0xeea <lcd+0x18a>
     ee8:	49 c0       	rjmp	.+146    	; 0xf7c <lcd+0x21c>
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	fc 01       	movw	r30, r24
     ef0:	31 96       	adiw	r30, 0x01	; 1
     ef2:	80 81       	ld	r24, Z
     ef4:	8c 36       	cpi	r24, 0x6C	; 108
     ef6:	41 f0       	breq	.+16     	; 0xf08 <lcd+0x1a8>
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	9e 81       	ldd	r25, Y+6	; 0x06
     efc:	fc 01       	movw	r30, r24
     efe:	31 96       	adiw	r30, 0x01	; 1
     f00:	80 81       	ld	r24, Z
     f02:	8c 34       	cpi	r24, 0x4C	; 76
     f04:	09 f0       	breq	.+2      	; 0xf08 <lcd+0x1a8>
     f06:	3a c0       	rjmp	.+116    	; 0xf7c <lcd+0x21c>
		{
			p = ltoa(*(long *)arg,&buff[0],10);
     f08:	ce 01       	movw	r24, r28
     f0a:	08 96       	adiw	r24, 0x08	; 8
     f0c:	e9 81       	ldd	r30, Y+1	; 0x01
     f0e:	fa 81       	ldd	r31, Y+2	; 0x02
     f10:	2a e0       	ldi	r18, 0x0A	; 10
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	ac 01       	movw	r20, r24
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	0e 94 ca 16 	call	0x2d94 <ltoa>
     f22:	9f 8f       	std	Y+31, r25	; 0x1f
     f24:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     f26:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f28:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f2a:	80 81       	ld	r24, Z
     f2c:	88 23       	and	r24, r24
     f2e:	d9 f0       	breq	.+54     	; 0xf66 <lcd+0x206>
			{
	 			char_count++;
     f30:	8f 81       	ldd	r24, Y+7	; 0x07
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	8f 83       	std	Y+7, r24	; 0x07
				if(char_count==17)
     f36:	8f 81       	ldd	r24, Y+7	; 0x07
     f38:	81 31       	cpi	r24, 0x11	; 17
     f3a:	31 f4       	brne	.+12     	; 0xf48 <lcd+0x1e8>
				{
					lcd_origin();
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	0e 94 91 05 	call	0xb22 <lcd_command>
					lcd_command(0xC0);
     f42:	80 ec       	ldi	r24, 0xC0	; 192
     f44:	0e 94 91 05 	call	0xb22 <lcd_command>
				}
				if(char_count>32)
     f48:	8f 81       	ldd	r24, Y+7	; 0x07
     f4a:	81 32       	cpi	r24, 0x21	; 33
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <lcd+0x1f0>
				{
					char_count = 0;
     f4e:	1f 82       	std	Y+7, r1	; 0x07
				}
				lcd_text(*p);             // Send data to LCD
     f50:	ee 8d       	ldd	r30, Y+30	; 0x1e
     f52:	ff 8d       	ldd	r31, Y+31	; 0x1f
     f54:	80 81       	ld	r24, Z
     f56:	0e 94 d1 05 	call	0xba2 <lcd_text>
	 			p++;                     // Increase address 1 time 
     f5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f5c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	9f 8f       	std	Y+31, r25	; 0x1f
     f62:	8e 8f       	std	Y+30, r24	; 0x1e
     f64:	e0 cf       	rjmp	.-64     	; 0xf26 <lcd+0x1c6>
			}
			arg+=4;	// Cross address long type
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	04 96       	adiw	r24, 0x04	; 4
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	9e 83       	std	Y+6, r25	; 0x06
     f78:	8d 83       	std	Y+5, r24	; 0x05
     f7a:	93 c0       	rjmp	.+294    	; 0x10a2 <lcd+0x342>
		}
		else if(TEST_FLOAT_TYPE(ptr))
     f7c:	ed 81       	ldd	r30, Y+5	; 0x05
     f7e:	fe 81       	ldd	r31, Y+6	; 0x06
     f80:	80 81       	ld	r24, Z
     f82:	85 32       	cpi	r24, 0x25	; 37
     f84:	09 f0       	breq	.+2      	; 0xf88 <lcd+0x228>
     f86:	49 c0       	rjmp	.+146    	; 0x101a <lcd+0x2ba>
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	fc 01       	movw	r30, r24
     f8e:	31 96       	adiw	r30, 0x01	; 1
     f90:	80 81       	ld	r24, Z
     f92:	86 36       	cpi	r24, 0x66	; 102
     f94:	41 f0       	breq	.+16     	; 0xfa6 <lcd+0x246>
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	fc 01       	movw	r30, r24
     f9c:	31 96       	adiw	r30, 0x01	; 1
     f9e:	80 81       	ld	r24, Z
     fa0:	86 34       	cpi	r24, 0x46	; 70
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <lcd+0x246>
     fa4:	3a c0       	rjmp	.+116    	; 0x101a <lcd+0x2ba>
		{
			p = dtostrf(*(float *)arg,2,F_PREC,&buff[0]);	// Convert float to string(used libm.a)
     fa6:	ce 01       	movw	r24, r28
     fa8:	08 96       	adiw	r24, 0x08	; 8
     faa:	e9 81       	ldd	r30, Y+1	; 0x01
     fac:	fa 81       	ldd	r31, Y+2	; 0x02
     fae:	8c 01       	movw	r16, r24
     fb0:	23 e0       	ldi	r18, 0x03	; 3
     fb2:	42 e0       	ldi	r20, 0x02	; 2
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	0e 94 97 17 	call	0x2f2e <dtostrf>
     fc0:	9f 8f       	std	Y+31, r25	; 0x1f
     fc2:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     fc4:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fc6:	ff 8d       	ldd	r31, Y+31	; 0x1f
     fc8:	80 81       	ld	r24, Z
     fca:	88 23       	and	r24, r24
     fcc:	d9 f0       	breq	.+54     	; 0x1004 <lcd+0x2a4>
			{
	 			char_count++;
     fce:	8f 81       	ldd	r24, Y+7	; 0x07
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	8f 83       	std	Y+7, r24	; 0x07
				if(char_count==17)
     fd4:	8f 81       	ldd	r24, Y+7	; 0x07
     fd6:	81 31       	cpi	r24, 0x11	; 17
     fd8:	31 f4       	brne	.+12     	; 0xfe6 <lcd+0x286>
				{
					lcd_origin();
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	0e 94 91 05 	call	0xb22 <lcd_command>
					lcd_command(0xC0);
     fe0:	80 ec       	ldi	r24, 0xC0	; 192
     fe2:	0e 94 91 05 	call	0xb22 <lcd_command>
				}
				if(char_count>32)
     fe6:	8f 81       	ldd	r24, Y+7	; 0x07
     fe8:	81 32       	cpi	r24, 0x21	; 33
     fea:	08 f0       	brcs	.+2      	; 0xfee <lcd+0x28e>
				{
					char_count = 0;
     fec:	1f 82       	std	Y+7, r1	; 0x07
				}
				lcd_text(*p);             // Send data to LCD
     fee:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ff0:	ff 8d       	ldd	r31, Y+31	; 0x1f
     ff2:	80 81       	ld	r24, Z
     ff4:	0e 94 d1 05 	call	0xba2 <lcd_text>
	 			p++;                     // Increase address 1 time 
     ff8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	9f 8f       	std	Y+31, r25	; 0x1f
    1000:	8e 8f       	std	Y+30, r24	; 0x1e
    1002:	e0 cf       	rjmp	.-64     	; 0xfc4 <lcd+0x264>
			}
			arg+=4;	// Cross address long type
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	04 96       	adiw	r24, 0x04	; 4
    100a:	9a 83       	std	Y+2, r25	; 0x02
    100c:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	44 c0       	rjmp	.+136    	; 0x10a2 <lcd+0x342>
		}
		else if(TEST_CLEAR_NEXT_TYPE(ptr))
    101a:	ed 81       	ldd	r30, Y+5	; 0x05
    101c:	fe 81       	ldd	r31, Y+6	; 0x06
    101e:	80 81       	ld	r24, Z
    1020:	83 32       	cpi	r24, 0x23	; 35
    1022:	81 f4       	brne	.+32     	; 0x1044 <lcd+0x2e4>
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	fc 01       	movw	r30, r24
    102a:	31 96       	adiw	r30, 0x01	; 1
    102c:	80 81       	ld	r24, Z
    102e:	83 36       	cpi	r24, 0x63	; 99
    1030:	49 f4       	brne	.+18     	; 0x1044 <lcd+0x2e4>
		{
			_lcd_clear_display = 1;	// Clear display next time 
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 ef 02 	sts	0x02EF, r24
			
			ptr++;	// Cross %l parameter
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
    1042:	2f c0       	rjmp	.+94     	; 0x10a2 <lcd+0x342>
		}
		else if(TEST_NEW_LINE_TYPE(ptr))
    1044:	ed 81       	ldd	r30, Y+5	; 0x05
    1046:	fe 81       	ldd	r31, Y+6	; 0x06
    1048:	80 81       	ld	r24, Z
    104a:	83 32       	cpi	r24, 0x23	; 35
    104c:	a9 f4       	brne	.+42     	; 0x1078 <lcd+0x318>
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	fc 01       	movw	r30, r24
    1054:	31 96       	adiw	r30, 0x01	; 1
    1056:	80 81       	ld	r24, Z
    1058:	8e 36       	cpi	r24, 0x6E	; 110
    105a:	71 f4       	brne	.+28     	; 0x1078 <lcd+0x318>
		{
			
			char_count = 17;	// Character start line 2 
    105c:	81 e1       	ldi	r24, 0x11	; 17
    105e:	8f 83       	std	Y+7, r24	; 0x07
			lcd_origin();
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	0e 94 91 05 	call	0xb22 <lcd_command>
			lcd_command(0xC0);		
    1066:	80 ec       	ldi	r24, 0xC0	; 192
    1068:	0e 94 91 05 	call	0xb22 <lcd_command>
			ptr++;	// Cross %l parameter
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	15 c0       	rjmp	.+42     	; 0x10a2 <lcd+0x342>
		}
		else
		{
			char_count++;
    1078:	8f 81       	ldd	r24, Y+7	; 0x07
    107a:	8f 5f       	subi	r24, 0xFF	; 255
    107c:	8f 83       	std	Y+7, r24	; 0x07
			if(char_count==17)
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	81 31       	cpi	r24, 0x11	; 17
    1082:	31 f4       	brne	.+12     	; 0x1090 <lcd+0x330>
			{
				lcd_origin();
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	0e 94 91 05 	call	0xb22 <lcd_command>
				lcd_command(0xC0);
    108a:	80 ec       	ldi	r24, 0xC0	; 192
    108c:	0e 94 91 05 	call	0xb22 <lcd_command>
			}
			if(char_count>32)
    1090:	8f 81       	ldd	r24, Y+7	; 0x07
    1092:	81 32       	cpi	r24, 0x21	; 33
    1094:	08 f0       	brcs	.+2      	; 0x1098 <lcd+0x338>
			{
				char_count = 0;
    1096:	1f 82       	std	Y+7, r1	; 0x07
			}
			lcd_text(*ptr);             // Send data to LCD
    1098:	ed 81       	ldd	r30, Y+5	; 0x05
    109a:	fe 81       	ldd	r31, Y+6	; 0x06
    109c:	80 81       	ld	r24, Z
    109e:	0e 94 d1 05 	call	0xba2 <lcd_text>
	 	}
		
		ptr++;                      // Increase address 1 time 
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    10ac:	88 ce       	rjmp	.-752    	; 0xdbe <lcd+0x5e>
    10ae:	67 96       	adiw	r28, 0x17	; 23
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	08 95       	ret

000010c4 <analog>:
#include <avr/io.h>
#define knob() analog(7)
#define KNOB knob
unsigned int analog(unsigned char channel)
{
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	23 97       	sbiw	r28, 0x03	; 3
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	89 83       	std	Y+1, r24	; 0x01
	unsigned int adc_val;
	ADMUX = 0x40; 
    10da:	80 e4       	ldi	r24, 0x40	; 64
    10dc:	80 93 27 00 	sts	0x0027, r24
	ADMUX |= channel;	// Sigle end mode
    10e0:	90 91 27 00 	lds	r25, 0x0027
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	89 2b       	or	r24, r25
    10e8:	80 93 27 00 	sts	0x0027, r24
	ADCSRA = 0xC6;
    10ec:	86 ec       	ldi	r24, 0xC6	; 198
    10ee:	80 93 26 00 	sts	0x0026, r24
	while((ADCSRA & (1<<ADSC)));
    10f2:	80 91 26 00 	lds	r24, 0x0026
    10f6:	99 27       	eor	r25, r25
    10f8:	80 74       	andi	r24, 0x40	; 64
    10fa:	90 70       	andi	r25, 0x00	; 0
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	09 f0       	breq	.+2      	; 0x1102 <analog+0x3e>
    1100:	f8 cf       	rjmp	.-16     	; 0x10f2 <analog+0x2e>
	adc_val = ADCL; 
    1102:	80 91 24 00 	lds	r24, 0x0024
    1106:	99 27       	eor	r25, r25
    1108:	9b 83       	std	Y+3, r25	; 0x03
    110a:	8a 83       	std	Y+2, r24	; 0x02
	adc_val += (ADCH*256);
    110c:	80 91 25 00 	lds	r24, 0x0025
    1110:	28 2f       	mov	r18, r24
    1112:	33 27       	eor	r19, r19
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	28 9f       	mul	r18, r24
    111a:	a0 01       	movw	r20, r0
    111c:	29 9f       	mul	r18, r25
    111e:	50 0d       	add	r21, r0
    1120:	38 9f       	mul	r19, r24
    1122:	50 0d       	add	r21, r0
    1124:	11 24       	eor	r1, r1
    1126:	9a 01       	movw	r18, r20
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	9b 81       	ldd	r25, Y+3	; 0x03
    112c:	82 0f       	add	r24, r18
    112e:	93 1f       	adc	r25, r19
    1130:	9b 83       	std	Y+3, r25	; 0x03
    1132:	8a 83       	std	Y+2, r24	; 0x02
	return(adc_val);
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	9b 81       	ldd	r25, Y+3	; 0x03
    1138:	23 96       	adiw	r28, 0x03	; 3
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <__vector_4>:



SIGNAL (SIG_OVERFLOW2) // Interval 5 ms
{
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 178;	// Reload interval 5 ms(TCNT2 = 178)  
    1174:	82 eb       	ldi	r24, 0xB2	; 178
    1176:	80 93 44 00 	sts	0x0044, r24
	
		if(seg_i>round_count)	// Counter loop
    117a:	90 91 f0 02 	lds	r25, 0x02F0
    117e:	80 91 60 00 	lds	r24, 0x0060
    1182:	89 17       	cp	r24, r25
    1184:	10 f4       	brcc	.+4      	; 0x118a <__vector_4+0x40>
		{
			seg_i=0;
    1186:	10 92 f0 02 	sts	0x02F0, r1
		}
		
		if(segment_ini)
    118a:	80 91 f1 02 	lds	r24, 0x02F1
    118e:	88 23       	and	r24, r24
    1190:	09 f4       	brne	.+2      	; 0x1194 <__vector_4+0x4a>
    1192:	50 c1       	rjmp	.+672    	; 0x1434 <__vector_4+0x2ea>
		{
		
			if(led_ini==1)
    1194:	80 91 f2 02 	lds	r24, 0x02F2
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	21 f4       	brne	.+8      	; 0x11a4 <__vector_4+0x5a>
			{
				DIGIT5(0);	// Not arrow LED display on task SEGMENT
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0e 94 ad 02 	call	0x55a <out_b>
			}
			if(seg_i==0)		// Digit 1
    11a4:	80 91 f0 02 	lds	r24, 0x02F0
    11a8:	88 23       	and	r24, r24
    11aa:	09 f0       	breq	.+2      	; 0x11ae <__vector_4+0x64>
    11ac:	41 c0       	rjmp	.+130    	; 0x1230 <__vector_4+0xe6>
			{
				if(segment_dat>9999)
    11ae:	80 91 f3 02 	lds	r24, 0x02F3
    11b2:	90 91 f4 02 	lds	r25, 0x02F4
    11b6:	27 e2       	ldi	r18, 0x27	; 39
    11b8:	80 31       	cpi	r24, 0x10	; 16
    11ba:	92 07       	cpc	r25, r18
    11bc:	20 f0       	brcs	.+8      	; 0x11c6 <__vector_4+0x7c>
					PORTC = 0x02;	// Display "-" because overflow
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	80 93 35 00 	sts	0x0035, r24
    11c4:	24 c0       	rjmp	.+72     	; 0x120e <__vector_4+0xc4>
				else
				{
					if(_segment_dot==1)
    11c6:	80 91 f6 02 	lds	r24, 0x02F6
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	89 f4       	brne	.+34     	; 0x11f0 <__vector_4+0xa6>
						PORTC = num[segment_dat%10] | _DOT;
    11ce:	80 91 f3 02 	lds	r24, 0x02F3
    11d2:	90 91 f4 02 	lds	r25, 0x02F4
    11d6:	2a e0       	ldi	r18, 0x0A	; 10
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	b9 01       	movw	r22, r18
    11dc:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    11e0:	fc 01       	movw	r30, r24
    11e2:	ef 59       	subi	r30, 0x9F	; 159
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	80 81       	ld	r24, Z
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	80 93 35 00 	sts	0x0035, r24
    11ee:	0f c0       	rjmp	.+30     	; 0x120e <__vector_4+0xc4>
					else
						PORTC = num[segment_dat%10];
    11f0:	80 91 f3 02 	lds	r24, 0x02F3
    11f4:	90 91 f4 02 	lds	r25, 0x02F4
    11f8:	2a e0       	ldi	r18, 0x0A	; 10
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	b9 01       	movw	r22, r18
    11fe:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    1202:	fc 01       	movw	r30, r24
    1204:	ef 59       	subi	r30, 0x9F	; 159
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	80 93 35 00 	sts	0x0035, r24
				}
				DIGIT4(1);
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	84 e0       	ldi	r24, 0x04	; 4
    1212:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT3(0);
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT2(0);
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT1(0);
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	0e 94 ad 02 	call	0x55a <out_b>
    122e:	02 c1       	rjmp	.+516    	; 0x1434 <__vector_4+0x2ea>
			}
			else if(seg_i==1)	// Digit 2
    1230:	80 91 f0 02 	lds	r24, 0x02F0
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	09 f0       	breq	.+2      	; 0x123a <__vector_4+0xf0>
    1238:	4d c0       	rjmp	.+154    	; 0x12d4 <__vector_4+0x18a>
			{
				if(segment_dat>9999)
    123a:	80 91 f3 02 	lds	r24, 0x02F3
    123e:	90 91 f4 02 	lds	r25, 0x02F4
    1242:	27 e2       	ldi	r18, 0x27	; 39
    1244:	80 31       	cpi	r24, 0x10	; 16
    1246:	92 07       	cpc	r25, r18
    1248:	20 f0       	brcs	.+8      	; 0x1252 <__vector_4+0x108>
					PORTC = 0x02;	// Display "-" because overflow
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	80 93 35 00 	sts	0x0035, r24
    1250:	30 c0       	rjmp	.+96     	; 0x12b2 <__vector_4+0x168>
				else
				{
					if(_segment_dot==2)
    1252:	80 91 f6 02 	lds	r24, 0x02F6
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	b9 f4       	brne	.+46     	; 0x1288 <__vector_4+0x13e>
						PORTC = num[(segment_dat%100)/10] | _DOT;
    125a:	80 91 f3 02 	lds	r24, 0x02F3
    125e:	90 91 f4 02 	lds	r25, 0x02F4
    1262:	24 e6       	ldi	r18, 0x64	; 100
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	b9 01       	movw	r22, r18
    1268:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    126c:	2a e0       	ldi	r18, 0x0A	; 10
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	b9 01       	movw	r22, r18
    1272:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    1276:	cb 01       	movw	r24, r22
    1278:	fc 01       	movw	r30, r24
    127a:	ef 59       	subi	r30, 0x9F	; 159
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	80 81       	ld	r24, Z
    1280:	81 60       	ori	r24, 0x01	; 1
    1282:	80 93 35 00 	sts	0x0035, r24
    1286:	15 c0       	rjmp	.+42     	; 0x12b2 <__vector_4+0x168>
					else
						PORTC = num[(segment_dat%100)/10];
    1288:	80 91 f3 02 	lds	r24, 0x02F3
    128c:	90 91 f4 02 	lds	r25, 0x02F4
    1290:	24 e6       	ldi	r18, 0x64	; 100
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	b9 01       	movw	r22, r18
    1296:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    129a:	2a e0       	ldi	r18, 0x0A	; 10
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	b9 01       	movw	r22, r18
    12a0:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    12a4:	cb 01       	movw	r24, r22
    12a6:	fc 01       	movw	r30, r24
    12a8:	ef 59       	subi	r30, 0x9F	; 159
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	80 81       	ld	r24, Z
    12ae:	80 93 35 00 	sts	0x0035, r24
				}
				DIGIT4(0);
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	84 e0       	ldi	r24, 0x04	; 4
    12b6:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT3(1);
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	83 e0       	ldi	r24, 0x03	; 3
    12be:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT2(0);
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT1(0);
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0e 94 ad 02 	call	0x55a <out_b>
    12d2:	b0 c0       	rjmp	.+352    	; 0x1434 <__vector_4+0x2ea>
				
			}
			else if(seg_i==2)	// Digit 3
    12d4:	80 91 f0 02 	lds	r24, 0x02F0
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	09 f0       	breq	.+2      	; 0x12de <__vector_4+0x194>
    12dc:	4d c0       	rjmp	.+154    	; 0x1378 <__vector_4+0x22e>
			{
				if(segment_dat>9999)
    12de:	80 91 f3 02 	lds	r24, 0x02F3
    12e2:	90 91 f4 02 	lds	r25, 0x02F4
    12e6:	27 e2       	ldi	r18, 0x27	; 39
    12e8:	80 31       	cpi	r24, 0x10	; 16
    12ea:	92 07       	cpc	r25, r18
    12ec:	20 f0       	brcs	.+8      	; 0x12f6 <__vector_4+0x1ac>
					PORTC = 0x02;	// Display "-" because overflow
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	80 93 35 00 	sts	0x0035, r24
    12f4:	30 c0       	rjmp	.+96     	; 0x1356 <__vector_4+0x20c>
				else
				{
					if(_segment_dot==3)
    12f6:	80 91 f6 02 	lds	r24, 0x02F6
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	b9 f4       	brne	.+46     	; 0x132c <__vector_4+0x1e2>
						PORTC = num[(segment_dat%1000)/100] | _DOT;
    12fe:	80 91 f3 02 	lds	r24, 0x02F3
    1302:	90 91 f4 02 	lds	r25, 0x02F4
    1306:	28 ee       	ldi	r18, 0xE8	; 232
    1308:	33 e0       	ldi	r19, 0x03	; 3
    130a:	b9 01       	movw	r22, r18
    130c:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    1310:	24 e6       	ldi	r18, 0x64	; 100
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	b9 01       	movw	r22, r18
    1316:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    131a:	cb 01       	movw	r24, r22
    131c:	fc 01       	movw	r30, r24
    131e:	ef 59       	subi	r30, 0x9F	; 159
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	80 81       	ld	r24, Z
    1324:	81 60       	ori	r24, 0x01	; 1
    1326:	80 93 35 00 	sts	0x0035, r24
    132a:	15 c0       	rjmp	.+42     	; 0x1356 <__vector_4+0x20c>
					else
						PORTC = num[(segment_dat%1000)/100];
    132c:	80 91 f3 02 	lds	r24, 0x02F3
    1330:	90 91 f4 02 	lds	r25, 0x02F4
    1334:	28 ee       	ldi	r18, 0xE8	; 232
    1336:	33 e0       	ldi	r19, 0x03	; 3
    1338:	b9 01       	movw	r22, r18
    133a:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    133e:	24 e6       	ldi	r18, 0x64	; 100
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	b9 01       	movw	r22, r18
    1344:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    1348:	cb 01       	movw	r24, r22
    134a:	fc 01       	movw	r30, r24
    134c:	ef 59       	subi	r30, 0x9F	; 159
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	80 93 35 00 	sts	0x0035, r24
				}
				DIGIT4(0);
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	84 e0       	ldi	r24, 0x04	; 4
    135a:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT3(0);
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT2(1);
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT1(0);
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	0e 94 ad 02 	call	0x55a <out_b>
    1376:	5e c0       	rjmp	.+188    	; 0x1434 <__vector_4+0x2ea>
			}
			else if(seg_i==3)	// Digit 4
    1378:	80 91 f0 02 	lds	r24, 0x02F0
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	09 f0       	breq	.+2      	; 0x1382 <__vector_4+0x238>
    1380:	43 c0       	rjmp	.+134    	; 0x1408 <__vector_4+0x2be>
			{
				if(segment_dat>9999)
    1382:	80 91 f3 02 	lds	r24, 0x02F3
    1386:	90 91 f4 02 	lds	r25, 0x02F4
    138a:	27 e2       	ldi	r18, 0x27	; 39
    138c:	80 31       	cpi	r24, 0x10	; 16
    138e:	92 07       	cpc	r25, r18
    1390:	20 f0       	brcs	.+8      	; 0x139a <__vector_4+0x250>
					PORTC = 0x02;	// Display "-" because overflow
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	80 93 35 00 	sts	0x0035, r24
    1398:	26 c0       	rjmp	.+76     	; 0x13e6 <__vector_4+0x29c>
				else
				{
					if(_segment_dot==4)
    139a:	80 91 f6 02 	lds	r24, 0x02F6
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	91 f4       	brne	.+36     	; 0x13c6 <__vector_4+0x27c>
						PORTC = num[segment_dat/1000] | _DOT;
    13a2:	80 91 f3 02 	lds	r24, 0x02F3
    13a6:	90 91 f4 02 	lds	r25, 0x02F4
    13aa:	28 ee       	ldi	r18, 0xE8	; 232
    13ac:	33 e0       	ldi	r19, 0x03	; 3
    13ae:	b9 01       	movw	r22, r18
    13b0:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    13b4:	cb 01       	movw	r24, r22
    13b6:	fc 01       	movw	r30, r24
    13b8:	ef 59       	subi	r30, 0x9F	; 159
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	80 81       	ld	r24, Z
    13be:	81 60       	ori	r24, 0x01	; 1
    13c0:	80 93 35 00 	sts	0x0035, r24
    13c4:	10 c0       	rjmp	.+32     	; 0x13e6 <__vector_4+0x29c>
					else
						PORTC = num[segment_dat/1000];
    13c6:	80 91 f3 02 	lds	r24, 0x02F3
    13ca:	90 91 f4 02 	lds	r25, 0x02F4
    13ce:	28 ee       	ldi	r18, 0xE8	; 232
    13d0:	33 e0       	ldi	r19, 0x03	; 3
    13d2:	b9 01       	movw	r22, r18
    13d4:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    13d8:	cb 01       	movw	r24, r22
    13da:	fc 01       	movw	r30, r24
    13dc:	ef 59       	subi	r30, 0x9F	; 159
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	80 81       	ld	r24, Z
    13e2:	80 93 35 00 	sts	0x0035, r24
				}
				DIGIT4(0);
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	84 e0       	ldi	r24, 0x04	; 4
    13ea:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT3(0);
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT2(0);
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT1(1);
    13fe:	61 e0       	ldi	r22, 0x01	; 1
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	0e 94 ad 02 	call	0x55a <out_b>
    1406:	16 c0       	rjmp	.+44     	; 0x1434 <__vector_4+0x2ea>
			}
			else if(seg_i==4) // Add on for test
    1408:	80 91 f0 02 	lds	r24, 0x02F0
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	91 f4       	brne	.+36     	; 0x1434 <__vector_4+0x2ea>
			{
		
				PORTC = 0;
    1410:	10 92 35 00 	sts	0x0035, r1
				DIGIT4(0);
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	84 e0       	ldi	r24, 0x04	; 4
    1418:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT3(0);
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	83 e0       	ldi	r24, 0x03	; 3
    1420:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT2(0);
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	0e 94 ad 02 	call	0x55a <out_b>
				DIGIT1(0);
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	0e 94 ad 02 	call	0x55a <out_b>
			}
	}	
	
	if(seg_i==4 && led_ini==1)	// Led display
    1434:	80 91 f0 02 	lds	r24, 0x02F0
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	e1 f4       	brne	.+56     	; 0x1474 <__vector_4+0x32a>
    143c:	80 91 f2 02 	lds	r24, 0x02F2
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	c1 f4       	brne	.+48     	; 0x1474 <__vector_4+0x32a>
	{
		
		PORTC = led_dat;
    1444:	80 91 f5 02 	lds	r24, 0x02F5
    1448:	80 93 35 00 	sts	0x0035, r24
		DIGIT4(0);
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	84 e0       	ldi	r24, 0x04	; 4
    1450:	0e 94 ad 02 	call	0x55a <out_b>
		DIGIT3(0);
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	0e 94 ad 02 	call	0x55a <out_b>
		DIGIT2(0);
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	0e 94 ad 02 	call	0x55a <out_b>
		DIGIT1(0);
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	0e 94 ad 02 	call	0x55a <out_b>
		DIGIT5(1);
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	0e 94 ad 02 	call	0x55a <out_b>
	}
	
	seg_i++;
    1474:	80 91 f0 02 	lds	r24, 0x02F0
    1478:	8f 5f       	subi	r24, 0xFF	; 255
    147a:	80 93 f0 02 	sts	0x02F0, r24
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	7f 91       	pop	r23
    1490:	6f 91       	pop	r22
    1492:	5f 91       	pop	r21
    1494:	4f 91       	pop	r20
    1496:	3f 91       	pop	r19
    1498:	2f 91       	pop	r18
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <segment_init>:
		
}

void segment_init() // Config. and Start up timer 0 
{
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
   	DDRC = 0xFF; // Port C output only
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	80 93 34 00 	sts	0x0034, r24
	//DDRB = 0x1F; // Bit control set output
	//DDRB = 0;	
	TCCR2 |= (1<<CS22)|(1<<CS21)|(1<<CS20); 	// Prescaler 1024,16 MHz,1 MC = 1024/16M = 64us/count 
    14b2:	80 91 45 00 	lds	r24, 0x0045
    14b6:	87 60       	ori	r24, 0x07	; 7
    14b8:	80 93 45 00 	sts	0x0045, r24
	TIFR |= 1<<TOV2; 	//Clear TOV2 / clear
    14bc:	80 91 58 00 	lds	r24, 0x0058
    14c0:	80 64       	ori	r24, 0x40	; 64
    14c2:	80 93 58 00 	sts	0x0058, r24
	TIMSK |= 1<<TOIE2; 	//Enable Timer2 Overflow Interrupt
    14c6:	80 91 59 00 	lds	r24, 0x0059
    14ca:	80 64       	ori	r24, 0x40	; 64
    14cc:	80 93 59 00 	sts	0x0059, r24
	TCNT2 = 178;	// Interval 5 ms  	
    14d0:	82 eb       	ldi	r24, 0xB2	; 178
    14d2:	80 93 44 00 	sts	0x0044, r24
    sei();			// Enable all interrupt
    14d6:	78 94       	sei
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret

000014de <segment>:
}
void segment(unsigned int val)
{
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	22 97       	sbiw	r28, 0x02	; 2
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
	if(segment_ini==0)
    14f6:	80 91 f1 02 	lds	r24, 0x02F1
    14fa:	88 23       	and	r24, r24
    14fc:	29 f4       	brne	.+10     	; 0x1508 <segment+0x2a>
	{
		segment_ini=1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 f1 02 	sts	0x02F1, r24
		segment_init();
    1504:	0e 94 52 0a 	call	0x14a4 <segment_init>
	}
	segment_dat = val;
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	90 93 f4 02 	sts	0x02F4, r25
    1510:	80 93 f3 02 	sts	0x02F3, r24
    1514:	22 96       	adiw	r28, 0x02	; 2
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <segment_dot>:
}
void segment_dot(unsigned char _dot_val)
{
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	21 97       	sbiw	r28, 0x01	; 1
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	89 83       	std	Y+1, r24	; 0x01
	if(segment_ini==0)
    153c:	80 91 f1 02 	lds	r24, 0x02F1
    1540:	88 23       	and	r24, r24
    1542:	29 f4       	brne	.+10     	; 0x154e <segment_dot+0x28>
	{
		segment_ini=1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	80 93 f1 02 	sts	0x02F1, r24
		segment_init();
    154a:	0e 94 52 0a 	call	0x14a4 <segment_init>
	}
	_segment_dot = _dot_val;
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	80 93 f6 02 	sts	0x02F6, r24
    1554:	21 96       	adiw	r28, 0x01	; 1
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret

00001566 <segment_off>:
}
void segment_off()
{
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	if(led_ini==0)
    156e:	80 91 f2 02 	lds	r24, 0x02F2
    1572:	88 23       	and	r24, r24
    1574:	29 f4       	brne	.+10     	; 0x1580 <segment_off+0x1a>
	{
		TIMSK &= ~(1<<TOIE2); 	//Disable Timer2 Overflow Interrupt(Disable 7-segment for display)
    1576:	80 91 59 00 	lds	r24, 0x0059
    157a:	8f 7b       	andi	r24, 0xBF	; 191
    157c:	80 93 59 00 	sts	0x0059, r24
	}
	round_count = 4;	// Count for led
    1580:	84 e0       	ldi	r24, 0x04	; 4
    1582:	80 93 60 00 	sts	0x0060, r24
	segment_ini=0;	// Restore before start up 7-segment
    1586:	10 92 f1 02 	sts	0x02F1, r1
	DIGIT4(0);	// Disable digit 1
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	84 e0       	ldi	r24, 0x04	; 4
    158e:	0e 94 ad 02 	call	0x55a <out_b>
	DIGIT3(0);	// Disable digit 2
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	0e 94 ad 02 	call	0x55a <out_b>
	DIGIT2(0);	// Disable digit 3
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	0e 94 ad 02 	call	0x55a <out_b>
	DIGIT1(0);	// Disable digit 4
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	0e 94 ad 02 	call	0x55a <out_b>
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <led8>:
}
void led8(unsigned char _dat)
{
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	21 97       	sbiw	r28, 0x01	; 1
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	89 83       	std	Y+1, r24	; 0x01
	round_count = 4;	// Count for led
    15c6:	84 e0       	ldi	r24, 0x04	; 4
    15c8:	80 93 60 00 	sts	0x0060, r24
	if(led_ini==0)
    15cc:	80 91 f2 02 	lds	r24, 0x02F2
    15d0:	88 23       	and	r24, r24
    15d2:	29 f4       	brne	.+10     	; 0x15de <led8+0x2e>
	{
		led_ini=1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 93 f2 02 	sts	0x02F2, r24
		segment_init();
    15da:	0e 94 52 0a 	call	0x14a4 <segment_init>
	}
	led_dat = _dat;	
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	80 93 f5 02 	sts	0x02F5, r24
    15e4:	21 96       	adiw	r28, 0x01	; 1
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	08 95       	ret

000015f6 <led8_off>:
}
void led8_off()
{
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
	if(segment_ini==0)
    15fe:	80 91 f1 02 	lds	r24, 0x02F1
    1602:	88 23       	and	r24, r24
    1604:	29 f4       	brne	.+10     	; 0x1610 <led8_off+0x1a>
	{
		TIMSK &= ~(1<<TOIE2); 	//Disable Timer2 Overflow Interrupt(Disable 7-segment for display)
    1606:	80 91 59 00 	lds	r24, 0x0059
    160a:	8f 7b       	andi	r24, 0xBF	; 191
    160c:	80 93 59 00 	sts	0x0059, r24
	}
	round_count = 3;	// Count for Segment 1-4 only
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	80 93 60 00 	sts	0x0060, r24
	led_ini = 0;
    1616:	10 92 f2 02 	sts	0x02F2, r1
	DIGIT5(0);
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	0e 94 ad 02 	call	0x55a <out_b>
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <__vector_9>:

unsigned long _ms=0;

SIGNAL (SIG_OVERFLOW0) // Interval 1 ms
{
    1628:	1f 92       	push	r1
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
    1632:	8f 93       	push	r24
    1634:	9f 93       	push	r25
    1636:	af 93       	push	r26
    1638:	bf 93       	push	r27
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 6;	// Interval 1 ms  
    1642:	86 e0       	ldi	r24, 0x06	; 6
    1644:	80 93 52 00 	sts	0x0052, r24
	_ms++;
    1648:	80 91 f7 02 	lds	r24, 0x02F7
    164c:	90 91 f8 02 	lds	r25, 0x02F8
    1650:	a0 91 f9 02 	lds	r26, 0x02F9
    1654:	b0 91 fa 02 	lds	r27, 0x02FA
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	a1 1d       	adc	r26, r1
    165c:	b1 1d       	adc	r27, r1
    165e:	80 93 f7 02 	sts	0x02F7, r24
    1662:	90 93 f8 02 	sts	0x02F8, r25
    1666:	a0 93 f9 02 	sts	0x02F9, r26
    166a:	b0 93 fa 02 	sts	0x02FA, r27
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	bf 91       	pop	r27
    1674:	af 91       	pop	r26
    1676:	9f 91       	pop	r25
    1678:	8f 91       	pop	r24
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	0f 90       	pop	r0
    1680:	1f 90       	pop	r1
    1682:	18 95       	reti

00001684 <timer_start>:
	
}
void timer_start(void) // Config. and Start up timer 0 
{
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
   
	TCCR0 = (1<<CS01)|(1<<CS00); 	// Prescaler 64,16 MHz,1 MC = 64/16M = 4us/count 
    168c:	83 e0       	ldi	r24, 0x03	; 3
    168e:	80 93 53 00 	sts	0x0053, r24
	TIFR |= 1<<TOV0; 	//Clear TOV0 / clear
    1692:	80 91 58 00 	lds	r24, 0x0058
    1696:	81 60       	ori	r24, 0x01	; 1
    1698:	80 93 58 00 	sts	0x0058, r24
	TIMSK |= 1<<TOIE0; 	//Enable Timer0 Overflow Interrupt
    169c:	80 91 59 00 	lds	r24, 0x0059
    16a0:	81 60       	ori	r24, 0x01	; 1
    16a2:	80 93 59 00 	sts	0x0059, r24
	TCNT0 = 6;	// Interval 1 ms  	
    16a6:	86 e0       	ldi	r24, 0x06	; 6
    16a8:	80 93 52 00 	sts	0x0052, r24
    
	sei();	// Enable all interrupt
    16ac:	78 94       	sei
	_ms = 0;
    16ae:	10 92 f7 02 	sts	0x02F7, r1
    16b2:	10 92 f8 02 	sts	0x02F8, r1
    16b6:	10 92 f9 02 	sts	0x02F9, r1
    16ba:	10 92 fa 02 	sts	0x02FA, r1
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	08 95       	ret

000016c4 <timer_stop>:
}
void timer_stop()
{
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;		// Stop timer and 
    16cc:	10 92 53 00 	sts	0x0053, r1
	TCNT0 = 0;
    16d0:	10 92 52 00 	sts	0x0052, r1
	TIMSK &= ~_BV(TOIE0);	// Clear bit TOIE0
    16d4:	80 91 59 00 	lds	r24, 0x0059
    16d8:	8e 7f       	andi	r24, 0xFE	; 254
    16da:	80 93 59 00 	sts	0x0059, r24
	_ms = 0;		// Clear time
    16de:	10 92 f7 02 	sts	0x02F7, r1
    16e2:	10 92 f8 02 	sts	0x02F8, r1
    16e6:	10 92 f9 02 	sts	0x02F9, r1
    16ea:	10 92 fa 02 	sts	0x02FA, r1
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	08 95       	ret

000016f4 <timer_pause>:
}
void timer_pause()
{
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;		// Stop timer and not clear time
    16fc:	10 92 53 00 	sts	0x0053, r1
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <timer_resume>:
}
void timer_resume()
{
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01)|(1<<CS00); 	// Prescaler 64,16 MHz,1 MC = 64/16M = 4us/count 
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	80 93 53 00 	sts	0x0053, r24
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <msec>:
}
unsigned long msec()
{
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
	return(_ms);	
    1722:	80 91 f7 02 	lds	r24, 0x02F7
    1726:	90 91 f8 02 	lds	r25, 0x02F8
    172a:	a0 91 f9 02 	lds	r26, 0x02F9
    172e:	b0 91 fa 02 	lds	r27, 0x02FA
} 
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <sec>:
unsigned long sec()
{ 
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
	return(_ms/1000);	
    1744:	80 91 f7 02 	lds	r24, 0x02F7
    1748:	90 91 f8 02 	lds	r25, 0x02F8
    174c:	a0 91 f9 02 	lds	r26, 0x02F9
    1750:	b0 91 fa 02 	lds	r27, 0x02FA
    1754:	28 ee       	ldi	r18, 0xE8	; 232
    1756:	33 e0       	ldi	r19, 0x03	; 3
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 6e 1a 	call	0x34dc <__udivmodsi4>
    1764:	da 01       	movw	r26, r20
    1766:	c9 01       	movw	r24, r18
} 
    1768:	bc 01       	movw	r22, r24
    176a:	cd 01       	movw	r24, r26
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <__vector_11>:

//#ifndef USE_EVEN_UART_REC
		
SIGNAL(SIG_UART_RECV) 
{ 	
    1772:	1f 92       	push	r1
    1774:	0f 92       	push	r0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	0f 92       	push	r0
    177a:	11 24       	eor	r1, r1
    177c:	8f 93       	push	r24
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
	_key = UDR;
    1786:	80 91 2c 00 	lds	r24, 0x002C
    178a:	80 93 fc 02 	sts	0x02FC, r24
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	8f 91       	pop	r24
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	0f 90       	pop	r0
    179a:	1f 90       	pop	r1
    179c:	18 95       	reti

0000179e <uart_set_baud>:
	
}
//#endif


void uart_set_baud(unsigned int baud) 
{
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	22 97       	sbiw	r28, 0x02	; 2
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01
	_baud = baud;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ba:	90 93 6c 00 	sts	0x006C, r25
    17be:	80 93 6b 00 	sts	0x006B, r24
	uart_ini=1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	80 93 fb 02 	sts	0x02FB, r24
	// Set baud rate
	UBRRH = (unsigned int)(UART_BAUD_CALC(baud,F_OSC)>>8);
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	aa 27       	eor	r26, r26
    17ce:	bb 27       	eor	r27, r27
    17d0:	9c 01       	movw	r18, r24
    17d2:	ad 01       	movw	r20, r26
    17d4:	68 94       	set
    17d6:	13 f8       	bld	r1, 3
    17d8:	22 0f       	add	r18, r18
    17da:	33 1f       	adc	r19, r19
    17dc:	44 1f       	adc	r20, r20
    17de:	55 1f       	adc	r21, r21
    17e0:	16 94       	lsr	r1
    17e2:	d1 f7       	brne	.-12     	; 0x17d8 <uart_set_baud+0x3a>
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	94 e2       	ldi	r25, 0x24	; 36
    17e8:	a4 ef       	ldi	r26, 0xF4	; 244
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	0e 94 90 1a 	call	0x3520 <__divmodsi4>
    17f4:	da 01       	movw	r26, r20
    17f6:	c9 01       	movw	r24, r18
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	a1 09       	sbc	r26, r1
    17fc:	b1 09       	sbc	r27, r1
    17fe:	89 2f       	mov	r24, r25
    1800:	9a 2f       	mov	r25, r26
    1802:	ab 2f       	mov	r26, r27
    1804:	bb 27       	eor	r27, r27
    1806:	a7 fd       	sbrc	r26, 7
    1808:	ba 95       	dec	r27
    180a:	80 93 40 00 	sts	0x0040, r24
	UBRRL = (unsigned int)UART_BAUD_CALC(baud,F_OSC);
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	aa 27       	eor	r26, r26
    1814:	bb 27       	eor	r27, r27
    1816:	9c 01       	movw	r18, r24
    1818:	ad 01       	movw	r20, r26
    181a:	68 94       	set
    181c:	13 f8       	bld	r1, 3
    181e:	22 0f       	add	r18, r18
    1820:	33 1f       	adc	r19, r19
    1822:	44 1f       	adc	r20, r20
    1824:	55 1f       	adc	r21, r21
    1826:	16 94       	lsr	r1
    1828:	d1 f7       	brne	.-12     	; 0x181e <uart_set_baud+0x80>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	94 e2       	ldi	r25, 0x24	; 36
    182e:	a4 ef       	ldi	r26, 0xF4	; 244
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	0e 94 90 1a 	call	0x3520 <__divmodsi4>
    183a:	da 01       	movw	r26, r20
    183c:	c9 01       	movw	r24, r18
    183e:	81 50       	subi	r24, 0x01	; 1
    1840:	80 93 29 00 	sts	0x0029, r24

	// Enable receiver and transmitter; enable RX interrupt
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    1844:	80 91 2a 00 	lds	r24, 0x002A
    1848:	88 69       	ori	r24, 0x98	; 152
    184a:	80 93 2a 00 	sts	0x002A, r24

	// Asynchronous 8N1
	UCSRC |= (1 << URSEL) | (3 << UCSZ0);
    184e:	80 91 40 00 	lds	r24, 0x0040
    1852:	86 68       	ori	r24, 0x86	; 134
    1854:	80 93 40 00 	sts	0x0040, r24
	sei();  // enable interrupts
    1858:	78 94       	sei
    185a:	22 96       	adiw	r28, 0x02	; 2
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <uart_gets_baud>:

}

unsigned int uart_gets_baud()
{
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
	return(_baud);
    1874:	80 91 6b 00 	lds	r24, 0x006B
    1878:	90 91 6c 00 	lds	r25, 0x006C
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <uart_putc>:
}

void uart_putc(unsigned char c) 
{
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	21 97       	sbiw	r28, 0x01	; 1
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & (1 << UDRE)));
    1898:	80 91 2b 00 	lds	r24, 0x002B
    189c:	99 27       	eor	r25, r25
    189e:	80 72       	andi	r24, 0x20	; 32
    18a0:	90 70       	andi	r25, 0x00	; 0
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <uart_putc+0x26>
    18a6:	f8 cf       	rjmp	.-16     	; 0x1898 <uart_putc+0x16>
	UDR = c;    // send character
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	80 93 2c 00 	sts	0x002C, r24
    18ae:	21 96       	adiw	r28, 0x01	; 1
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <uart_puts>:
	
}

void uart_puts(char *s) 
{
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	22 97       	sbiw	r28, 0x02	; 2
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	89 83       	std	Y+1, r24	; 0x01
	while (*s) 
    18d8:	e9 81       	ldd	r30, Y+1	; 0x01
    18da:	fa 81       	ldd	r31, Y+2	; 0x02
    18dc:	80 81       	ld	r24, Z
    18de:	88 23       	and	r24, r24
    18e0:	59 f0       	breq	.+22     	; 0x18f8 <uart_puts+0x38>
	{
		uart_putc(*s);
    18e2:	e9 81       	ldd	r30, Y+1	; 0x01
    18e4:	fa 81       	ldd	r31, Y+2	; 0x02
    18e6:	80 81       	ld	r24, Z
    18e8:	0e 94 41 0c 	call	0x1882 <uart_putc>
		s++;
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	01 96       	adiw	r24, 0x01	; 1
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	f0 cf       	rjmp	.-32     	; 0x18d8 <uart_puts+0x18>
    18f8:	22 96       	adiw	r28, 0x02	; 2
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <uart>:
	}
}
void uart(char *p,...) 
{
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	66 97       	sbiw	r28, 0x16	; 22
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
	char *arg,**pp;	// Poter of point
	char *ptr,buff[16]/*,s_arg_offset=0,s_arg_i=0*/;
	pp = &p;
    1922:	8d e1       	ldi	r24, 0x1D	; 29
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	8c 0f       	add	r24, r28
    1928:	9d 1f       	adc	r25, r29
    192a:	9c 83       	std	Y+4, r25	; 0x04
    192c:	8b 83       	std	Y+3, r24	; 0x03
	ptr = p;	// Copy address
    192e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1930:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1932:	9e 83       	std	Y+6, r25	; 0x06
    1934:	8d 83       	std	Y+5, r24	; 0x05
	arg = pp;	// Copy address of p point	
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01
	
	arg += 2;	// Cross 2 time go to Origin of first parameter 
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	02 96       	adiw	r24, 0x02	; 2
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
	
	if(uart_ini==0)
    1948:	80 91 fb 02 	lds	r24, 0x02FB
    194c:	88 23       	and	r24, r24
    194e:	49 f4       	brne	.+18     	; 0x1962 <uart+0x58>
	{
		uart_ini=1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	80 93 fb 02 	sts	0x02FB, r24
		uart_set_baud(_baud);
    1956:	80 91 6b 00 	lds	r24, 0x006B
    195a:	90 91 6c 00 	lds	r25, 0x006C
    195e:	0e 94 cf 0b 	call	0x179e <uart_set_baud>
	}
		
	while(*ptr)                 // Check data pointer = 0?
    1962:	ed 81       	ldd	r30, Y+5	; 0x05
    1964:	fe 81       	ldd	r31, Y+6	; 0x06
    1966:	80 81       	ld	r24, Z
    1968:	88 23       	and	r24, r24
    196a:	09 f4       	brne	.+2      	; 0x196e <uart+0x64>
    196c:	cc c0       	rjmp	.+408    	; 0x1b06 <uart+0x1fc>
	{
	 	if(TEST_CHAR_TYPE(ptr))
    196e:	ed 81       	ldd	r30, Y+5	; 0x05
    1970:	fe 81       	ldd	r31, Y+6	; 0x06
    1972:	80 81       	ld	r24, Z
    1974:	85 32       	cpi	r24, 0x25	; 37
    1976:	11 f5       	brne	.+68     	; 0x19bc <uart+0xb2>
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	fc 01       	movw	r30, r24
    197e:	31 96       	adiw	r30, 0x01	; 1
    1980:	80 81       	ld	r24, Z
    1982:	83 36       	cpi	r24, 0x63	; 99
    1984:	41 f0       	breq	.+16     	; 0x1996 <uart+0x8c>
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	fc 01       	movw	r30, r24
    198c:	31 96       	adiw	r30, 0x01	; 1
    198e:	80 81       	ld	r24, Z
    1990:	83 34       	cpi	r24, 0x43	; 67
    1992:	09 f0       	breq	.+2      	; 0x1996 <uart+0x8c>
    1994:	13 c0       	rjmp	.+38     	; 0x19bc <uart+0xb2>
		{
			uart_putc(toascii(*arg));
    1996:	e9 81       	ldd	r30, Y+1	; 0x01
    1998:	fa 81       	ldd	r31, Y+2	; 0x02
    199a:	80 81       	ld	r24, Z
    199c:	99 27       	eor	r25, r25
    199e:	0e 94 ab 1a 	call	0x3556 <toascii>
    19a2:	0e 94 41 0c 	call	0x1882 <uart_putc>
			arg+=2;	// Cross address char type
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	02 96       	adiw	r24, 0x02	; 2
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
    19ba:	9f c0       	rjmp	.+318    	; 0x1afa <uart+0x1f0>
		}
		else if(TEST_INT_TYPE(ptr))
    19bc:	ed 81       	ldd	r30, Y+5	; 0x05
    19be:	fe 81       	ldd	r31, Y+6	; 0x06
    19c0:	80 81       	ld	r24, Z
    19c2:	85 32       	cpi	r24, 0x25	; 37
    19c4:	89 f5       	brne	.+98     	; 0x1a28 <uart+0x11e>
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	fc 01       	movw	r30, r24
    19cc:	31 96       	adiw	r30, 0x01	; 1
    19ce:	80 81       	ld	r24, Z
    19d0:	84 36       	cpi	r24, 0x64	; 100
    19d2:	41 f0       	breq	.+16     	; 0x19e4 <uart+0xda>
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	fc 01       	movw	r30, r24
    19da:	31 96       	adiw	r30, 0x01	; 1
    19dc:	80 81       	ld	r24, Z
    19de:	84 34       	cpi	r24, 0x44	; 68
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <uart+0xda>
    19e2:	22 c0       	rjmp	.+68     	; 0x1a28 <uart+0x11e>
		{
			p = ltoa(*(int *)arg,&buff[0],10);
    19e4:	ae 01       	movw	r20, r28
    19e6:	49 5f       	subi	r20, 0xF9	; 249
    19e8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ea:	e9 81       	ldd	r30, Y+1	; 0x01
    19ec:	fa 81       	ldd	r31, Y+2	; 0x02
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	aa 27       	eor	r26, r26
    19f4:	97 fd       	sbrc	r25, 7
    19f6:	a0 95       	com	r26
    19f8:	ba 2f       	mov	r27, r26
    19fa:	2a e0       	ldi	r18, 0x0A	; 10
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 ca 16 	call	0x2d94 <ltoa>
    1a06:	9e 8f       	std	Y+30, r25	; 0x1e
    1a08:	8d 8f       	std	Y+29, r24	; 0x1d
			uart_puts(p);
    1a0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a0e:	0e 94 60 0c 	call	0x18c0 <uart_puts>
			arg+=2;	// Cross address int type
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	02 96       	adiw	r24, 0x02	; 2
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	69 c0       	rjmp	.+210    	; 0x1afa <uart+0x1f0>
		}
		else if(TEST_LONG_TYPE(ptr))
    1a28:	ed 81       	ldd	r30, Y+5	; 0x05
    1a2a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a2c:	80 81       	ld	r24, Z
    1a2e:	85 32       	cpi	r24, 0x25	; 37
    1a30:	69 f5       	brne	.+90     	; 0x1a8c <uart+0x182>
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	fc 01       	movw	r30, r24
    1a38:	31 96       	adiw	r30, 0x01	; 1
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8c 36       	cpi	r24, 0x6C	; 108
    1a3e:	41 f0       	breq	.+16     	; 0x1a50 <uart+0x146>
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	9e 81       	ldd	r25, Y+6	; 0x06
    1a44:	fc 01       	movw	r30, r24
    1a46:	31 96       	adiw	r30, 0x01	; 1
    1a48:	80 81       	ld	r24, Z
    1a4a:	8c 34       	cpi	r24, 0x4C	; 76
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <uart+0x146>
    1a4e:	1e c0       	rjmp	.+60     	; 0x1a8c <uart+0x182>
		{
			p = ltoa(*(long *)arg,&buff[0],10);
    1a50:	ce 01       	movw	r24, r28
    1a52:	07 96       	adiw	r24, 0x07	; 7
    1a54:	e9 81       	ldd	r30, Y+1	; 0x01
    1a56:	fa 81       	ldd	r31, Y+2	; 0x02
    1a58:	2a e0       	ldi	r18, 0x0A	; 10
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	ac 01       	movw	r20, r24
    1a5e:	60 81       	ld	r22, Z
    1a60:	71 81       	ldd	r23, Z+1	; 0x01
    1a62:	82 81       	ldd	r24, Z+2	; 0x02
    1a64:	93 81       	ldd	r25, Z+3	; 0x03
    1a66:	0e 94 ca 16 	call	0x2d94 <ltoa>
    1a6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a6c:	8d 8f       	std	Y+29, r24	; 0x1d
			uart_puts(p);
    1a6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a70:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a72:	0e 94 60 0c 	call	0x18c0 <uart_puts>
			arg+=4;	// Cross address long type
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	04 96       	adiw	r24, 0x04	; 4
    1a7c:	9a 83       	std	Y+2, r25	; 0x02
    1a7e:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	37 c0       	rjmp	.+110    	; 0x1afa <uart+0x1f0>
		}
		else if(TEST_FLOAT_TYPE(ptr))
    1a8c:	ed 81       	ldd	r30, Y+5	; 0x05
    1a8e:	fe 81       	ldd	r31, Y+6	; 0x06
    1a90:	80 81       	ld	r24, Z
    1a92:	85 32       	cpi	r24, 0x25	; 37
    1a94:	69 f5       	brne	.+90     	; 0x1af0 <uart+0x1e6>
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	31 96       	adiw	r30, 0x01	; 1
    1a9e:	80 81       	ld	r24, Z
    1aa0:	86 36       	cpi	r24, 0x66	; 102
    1aa2:	41 f0       	breq	.+16     	; 0x1ab4 <uart+0x1aa>
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	31 96       	adiw	r30, 0x01	; 1
    1aac:	80 81       	ld	r24, Z
    1aae:	86 34       	cpi	r24, 0x46	; 70
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <uart+0x1aa>
    1ab2:	1e c0       	rjmp	.+60     	; 0x1af0 <uart+0x1e6>
		{
			p = dtostrf(*(float *)arg,2,F_PREC,&buff[0]);	// Convert float to string(used libm.a)
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	07 96       	adiw	r24, 0x07	; 7
    1ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aba:	fa 81       	ldd	r31, Y+2	; 0x02
    1abc:	8c 01       	movw	r16, r24
    1abe:	23 e0       	ldi	r18, 0x03	; 3
    1ac0:	42 e0       	ldi	r20, 0x02	; 2
    1ac2:	60 81       	ld	r22, Z
    1ac4:	71 81       	ldd	r23, Z+1	; 0x01
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	93 81       	ldd	r25, Z+3	; 0x03
    1aca:	0e 94 97 17 	call	0x2f2e <dtostrf>
    1ace:	9e 8f       	std	Y+30, r25	; 0x1e
    1ad0:	8d 8f       	std	Y+29, r24	; 0x1d
			uart_puts(p);
    1ad2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ad6:	0e 94 60 0c 	call	0x18c0 <uart_puts>
			arg+=4;	// Cross address long type
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ade:	04 96       	adiw	r24, 0x04	; 4
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	8d 83       	std	Y+5, r24	; 0x05
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <uart+0x1f0>
		}
		else
		{
			uart_putc(*ptr);             // Send data to LCD
    1af0:	ed 81       	ldd	r30, Y+5	; 0x05
    1af2:	fe 81       	ldd	r31, Y+6	; 0x06
    1af4:	80 81       	ld	r24, Z
    1af6:	0e 94 41 0c 	call	0x1882 <uart_putc>
	 	}
		
		ptr++;                      // Increase address 1 time 
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	2e cf       	rjmp	.-420    	; 0x1962 <uart+0x58>
    1b06:	66 96       	adiw	r28, 0x16	; 22
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	08 95       	ret

00001b1c <uart_getkey>:
	}
}
char uart_getkey()
{
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	21 97       	sbiw	r28, 0x01	; 1
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
	char _c=0;
    1b30:	19 82       	std	Y+1, r1	; 0x01
	if(uart_ini==0)
    1b32:	80 91 fb 02 	lds	r24, 0x02FB
    1b36:	88 23       	and	r24, r24
    1b38:	49 f4       	brne	.+18     	; 0x1b4c <uart_getkey+0x30>
	{
		uart_ini=1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	80 93 fb 02 	sts	0x02FB, r24
		uart_set_baud(_baud);
    1b40:	80 91 6b 00 	lds	r24, 0x006B
    1b44:	90 91 6c 00 	lds	r25, 0x006C
    1b48:	0e 94 cf 0b 	call	0x179e <uart_set_baud>
	}
	while(!_key);
    1b4c:	80 91 fc 02 	lds	r24, 0x02FC
    1b50:	88 23       	and	r24, r24
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <uart_getkey+0x3a>
    1b54:	fb cf       	rjmp	.-10     	; 0x1b4c <uart_getkey+0x30>
	_c = _key;
    1b56:	80 91 fc 02 	lds	r24, 0x02FC
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	_key = 0;
    1b5c:	10 92 fc 02 	sts	0x02FC, r1
	return(_c);	
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	99 27       	eor	r25, r25
    1b64:	21 96       	adiw	r28, 0x01	; 1
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	08 95       	ret

00001b76 <__vector_8>:
unsigned char _duty1=0,_duty2=0; 
char pwm_ini =0;

SIGNAL (SIG_OVERFLOW1) // Interval 1 ms
{
    1b76:	1f 92       	push	r1
    1b78:	0f 92       	push	r0
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	0f 92       	push	r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	8f 93       	push	r24
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
	OCR1AL = _duty1; 
    1b8a:	80 91 fd 02 	lds	r24, 0x02FD
    1b8e:	80 93 4a 00 	sts	0x004A, r24
	OCR1BL = _duty2;
    1b92:	80 91 fe 02 	lds	r24, 0x02FE
    1b96:	80 93 48 00 	sts	0x0048, r24
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	8f 91       	pop	r24
    1ba0:	0f 90       	pop	r0
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	0f 90       	pop	r0
    1ba6:	1f 90       	pop	r1
    1ba8:	18 95       	reti

00001baa <pwm_init>:
}

void pwm_init()
{
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |= (1<<WGM10);
    1bb2:	80 91 4f 00 	lds	r24, 0x004F
    1bb6:	81 60       	ori	r24, 0x01	; 1
    1bb8:	80 93 4f 00 	sts	0x004F, r24
	TCCR1B = (1<<CS12)|(1<<CS10)|(1<<WGM12);
    1bbc:	8d e0       	ldi	r24, 0x0D	; 13
    1bbe:	80 93 4e 00 	sts	0x004E, r24
	TIFR |= 1<<TOV1; 	//Clear TOV0 / clear
    1bc2:	80 91 58 00 	lds	r24, 0x0058
    1bc6:	84 60       	ori	r24, 0x04	; 4
    1bc8:	80 93 58 00 	sts	0x0058, r24
	TIMSK |= 1<<TOIE1; 	//Enable Timer0 Overflow Interrupt
    1bcc:	80 91 59 00 	lds	r24, 0x0059
    1bd0:	84 60       	ori	r24, 0x04	; 4
    1bd2:	80 93 59 00 	sts	0x0059, r24
	//timer_enable_int(_BV(TOIE1));
	sei();
    1bd6:	78 94       	sei
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	08 95       	ret

00001bde <pwm>:
}
void pwm(char channel,unsigned int duty)
{
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	23 97       	sbiw	r28, 0x03	; 3
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	7b 83       	std	Y+3, r23	; 0x03
    1bf6:	6a 83       	std	Y+2, r22	; 0x02
	duty = (duty*255)/100;
    1bf8:	2a 81       	ldd	r18, Y+2	; 0x02
    1bfa:	3b 81       	ldd	r19, Y+3	; 0x03
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	28 9f       	mul	r18, r24
    1c02:	a0 01       	movw	r20, r0
    1c04:	29 9f       	mul	r18, r25
    1c06:	50 0d       	add	r21, r0
    1c08:	38 9f       	mul	r19, r24
    1c0a:	50 0d       	add	r21, r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	ca 01       	movw	r24, r20
    1c10:	24 e6       	ldi	r18, 0x64	; 100
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	b9 01       	movw	r22, r18
    1c16:	0e 94 47 1a 	call	0x348e <__udivmodhi4>
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9b 83       	std	Y+3, r25	; 0x03
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
	if(pwm_ini==0)
    1c20:	80 91 ff 02 	lds	r24, 0x02FF
    1c24:	88 23       	and	r24, r24
    1c26:	29 f4       	brne	.+10     	; 0x1c32 <pwm+0x54>
	{
		pwm_init();
    1c28:	0e 94 d5 0d 	call	0x1baa <pwm_init>
		pwm_ini=1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	80 93 ff 02 	sts	0x02FF, r24
	}
	if(channel==2)
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	82 30       	cpi	r24, 0x02	; 2
    1c36:	89 f4       	brne	.+34     	; 0x1c5a <pwm+0x7c>
	{
		TCCR1A |= _BV(COM1A1);
    1c38:	80 91 4f 00 	lds	r24, 0x004F
    1c3c:	80 68       	ori	r24, 0x80	; 128
    1c3e:	80 93 4f 00 	sts	0x004F, r24
		DDRD |= _BV(PD5);
    1c42:	80 91 31 00 	lds	r24, 0x0031
    1c46:	80 62       	ori	r24, 0x20	; 32
    1c48:	80 93 31 00 	sts	0x0031, r24
		OCR1AL = duty;
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	80 93 4a 00 	sts	0x004A, r24
		_duty1 = duty;
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	80 93 fd 02 	sts	0x02FD, r24
    1c58:	13 c0       	rjmp	.+38     	; 0x1c80 <pwm+0xa2>
	}
	else if(channel==1)
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	81 f4       	brne	.+32     	; 0x1c80 <pwm+0xa2>
	{
		TCCR1A |= _BV(COM1B1);
    1c60:	80 91 4f 00 	lds	r24, 0x004F
    1c64:	80 62       	ori	r24, 0x20	; 32
    1c66:	80 93 4f 00 	sts	0x004F, r24
		DDRD |= _BV(PD4);
    1c6a:	80 91 31 00 	lds	r24, 0x0031
    1c6e:	80 61       	ori	r24, 0x10	; 16
    1c70:	80 93 31 00 	sts	0x0031, r24
		OCR1BL = duty;
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	80 93 48 00 	sts	0x0048, r24
		_duty2 = duty;
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	80 93 fe 02 	sts	0x02FE, r24
    1c80:	23 96       	adiw	r28, 0x03	; 3
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <motor>:
	}
}
void motor(char _channel,int _power)
{
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	25 97       	sbiw	r28, 0x05	; 5
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	7b 83       	std	Y+3, r23	; 0x03
    1caa:	6a 83       	std	Y+2, r22	; 0x02
	if(_power>0)
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb0:	18 16       	cp	r1, r24
    1cb2:	19 06       	cpc	r1, r25
    1cb4:	ec f4       	brge	.+58     	; 0x1cf0 <motor+0x5e>
	{
		pwm(_channel,_power);
    1cb6:	6a 81       	ldd	r22, Y+2	; 0x02
    1cb8:	7b 81       	ldd	r23, Y+3	; 0x03
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	0e 94 ef 0d 	call	0x1bde <pwm>
		if(_channel==2)
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	82 30       	cpi	r24, 0x02	; 2
    1cc4:	49 f4       	brne	.+18     	; 0x1cd8 <motor+0x46>
		{
			out_d(7,1);		
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	87 e0       	ldi	r24, 0x07	; 7
    1cca:	0e 94 3d 03 	call	0x67a <out_d>
			out_d(6,0);
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	86 e0       	ldi	r24, 0x06	; 6
    1cd2:	0e 94 3d 03 	call	0x67a <out_d>
    1cd6:	37 c0       	rjmp	.+110    	; 0x1d46 <motor+0xb4>
		}
		else if(_channel==1)
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	a1 f5       	brne	.+104    	; 0x1d46 <motor+0xb4>
		{
			out_d(2,1);		
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	0e 94 3d 03 	call	0x67a <out_d>
			out_d(3,0);
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	83 e0       	ldi	r24, 0x03	; 3
    1cea:	0e 94 3d 03 	call	0x67a <out_d>
    1cee:	2b c0       	rjmp	.+86     	; 0x1d46 <motor+0xb4>
		}
	}
	else
	{
		
		pwm(_channel,abs(_power));
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf4:	9d 83       	std	Y+5, r25	; 0x05
    1cf6:	8c 83       	std	Y+4, r24	; 0x04
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	99 23       	and	r25, r25
    1cfe:	3c f4       	brge	.+14     	; 0x1d0e <motor+0x7c>
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	9d 81       	ldd	r25, Y+5	; 0x05
    1d04:	90 95       	com	r25
    1d06:	81 95       	neg	r24
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	9d 83       	std	Y+5, r25	; 0x05
    1d0c:	8c 83       	std	Y+4, r24	; 0x04
    1d0e:	6c 81       	ldd	r22, Y+4	; 0x04
    1d10:	7d 81       	ldd	r23, Y+5	; 0x05
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	0e 94 ef 0d 	call	0x1bde <pwm>
		if(_channel==2)
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	49 f4       	brne	.+18     	; 0x1d30 <motor+0x9e>
		{
			out_d(7,0);
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	87 e0       	ldi	r24, 0x07	; 7
    1d22:	0e 94 3d 03 	call	0x67a <out_d>
			out_d(6,1);
    1d26:	61 e0       	ldi	r22, 0x01	; 1
    1d28:	86 e0       	ldi	r24, 0x06	; 6
    1d2a:	0e 94 3d 03 	call	0x67a <out_d>
    1d2e:	0b c0       	rjmp	.+22     	; 0x1d46 <motor+0xb4>
		}
		else if(_channel==1)
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	41 f4       	brne	.+16     	; 0x1d46 <motor+0xb4>
		{
			out_d(2,0);
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	0e 94 3d 03 	call	0x67a <out_d>
			out_d(3,1);
    1d3e:	61 e0       	ldi	r22, 0x01	; 1
    1d40:	83 e0       	ldi	r24, 0x03	; 3
    1d42:	0e 94 3d 03 	call	0x67a <out_d>
    1d46:	25 96       	adiw	r28, 0x05	; 5
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <motor_stop>:
		}	
	
	}
}
void motor_stop(char _channel)
{
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	21 97       	sbiw	r28, 0x01	; 1
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	89 83       	std	Y+1, r24	; 0x01
	pwm(_channel,0);
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	0e 94 ef 0d 	call	0x1bde <pwm>
	if(_channel==2 ||_channel==3)
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	21 f0       	breq	.+8      	; 0x1d86 <motor_stop+0x2e>
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	83 30       	cpi	r24, 0x03	; 3
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <motor_stop+0x2e>
    1d84:	08 c0       	rjmp	.+16     	; 0x1d96 <motor_stop+0x3e>
	{
		out_d(7,0);		
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	87 e0       	ldi	r24, 0x07	; 7
    1d8a:	0e 94 3d 03 	call	0x67a <out_d>
		out_d(6,0);
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	86 e0       	ldi	r24, 0x06	; 6
    1d92:	0e 94 3d 03 	call	0x67a <out_d>
	}
	if(_channel==1||_channel==3)
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	21 f0       	breq	.+8      	; 0x1da4 <motor_stop+0x4c>
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	83 30       	cpi	r24, 0x03	; 3
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <motor_stop+0x4c>
    1da2:	08 c0       	rjmp	.+16     	; 0x1db4 <motor_stop+0x5c>
	{
		out_d(2,0);		
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	0e 94 3d 03 	call	0x67a <out_d>
		out_d(3,0);
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	0e 94 3d 03 	call	0x67a <out_d>
    1db4:	21 96       	adiw	r28, 0x01	; 1
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	08 95       	ret

00001dc6 <Round>:
//Build 1.5.560726

///////////////// Calculator Func //////////////////////
int Round(float myfloat) //covert float  to integer
{ 
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	2c 97       	sbiw	r28, 0x0c	; 12
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	69 83       	std	Y+1, r22	; 0x01
    1ddc:	7a 83       	std	Y+2, r23	; 0x02
    1dde:	8b 83       	std	Y+3, r24	; 0x03
    1de0:	9c 83       	std	Y+4, r25	; 0x04
  double integral; 
  float fraction = (float)modf(myfloat, &integral); 
    1de2:	ce 01       	movw	r24, r28
    1de4:	05 96       	adiw	r24, 0x05	; 5
    1de6:	ac 01       	movw	r20, r24
    1de8:	69 81       	ldd	r22, Y+1	; 0x01
    1dea:	7a 81       	ldd	r23, Y+2	; 0x02
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	0e 94 cf 18 	call	0x319e <modf>
    1df4:	69 87       	std	Y+9, r22	; 0x09
    1df6:	7a 87       	std	Y+10, r23	; 0x0a
    1df8:	8b 87       	std	Y+11, r24	; 0x0b
    1dfa:	9c 87       	std	Y+12, r25	; 0x0c
  
  if (fraction >= 0.5) 
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	69 85       	ldd	r22, Y+9	; 0x09
    1e06:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e08:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e0c:	0e 94 50 18 	call	0x30a0 <__gesf2>
    1e10:	88 23       	and	r24, r24
    1e12:	0c f4       	brge	.+2      	; 0x1e16 <Round+0x50>
    1e14:	10 c0       	rjmp	.+32     	; 0x1e36 <Round+0x70>
    integral += 1; 
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e8       	ldi	r20, 0x80	; 128
    1e1c:	5f e3       	ldi	r21, 0x3F	; 63
    1e1e:	6d 81       	ldd	r22, Y+5	; 0x05
    1e20:	7e 81       	ldd	r23, Y+6	; 0x06
    1e22:	8f 81       	ldd	r24, Y+7	; 0x07
    1e24:	98 85       	ldd	r25, Y+8	; 0x08
    1e26:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	af 83       	std	Y+7, r26	; 0x07
    1e34:	b8 87       	std	Y+8, r27	; 0x08
  if (fraction <= -0.5) 
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	5f eb       	ldi	r21, 0xBF	; 191
    1e3e:	69 85       	ldd	r22, Y+9	; 0x09
    1e40:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e42:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e44:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e46:	0e 94 4d 18 	call	0x309a <__eqsf2>
    1e4a:	18 16       	cp	r1, r24
    1e4c:	0c f4       	brge	.+2      	; 0x1e50 <Round+0x8a>
    1e4e:	10 c0       	rjmp	.+32     	; 0x1e70 <Round+0xaa>
    integral -= 1; 
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	6d 81       	ldd	r22, Y+5	; 0x05
    1e5a:	7e 81       	ldd	r23, Y+6	; 0x06
    1e5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5e:	98 85       	ldd	r25, Y+8	; 0x08
    1e60:	0e 94 0e 17 	call	0x2e1c <__subsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	af 83       	std	Y+7, r26	; 0x07
    1e6e:	b8 87       	std	Y+8, r27	; 0x08
  
  return (int)integral; 
    1e70:	6d 81       	ldd	r22, Y+5	; 0x05
    1e72:	7e 81       	ldd	r23, Y+6	; 0x06
    1e74:	8f 81       	ldd	r24, Y+7	; 0x07
    1e76:	98 85       	ldd	r25, Y+8	; 0x08
    1e78:	0e 94 26 18 	call	0x304c <__fixsfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	2c 96       	adiw	r28, 0x0c	; 12
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	08 95       	ret

00001e92 <covHourtoMin>:
  //Input : 3.1415  ==> Out : 3
}

long covHourtoMin(unsigned int hour)
{
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	26 97       	sbiw	r28, 0x06	; 6
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
	long a=0;
    1eaa:	1b 82       	std	Y+3, r1	; 0x03
    1eac:	1c 82       	std	Y+4, r1	; 0x04
    1eae:	1d 82       	std	Y+5, r1	; 0x05
    1eb0:	1e 82       	std	Y+6, r1	; 0x06
	a = hour*60*1000;
    1eb2:	29 81       	ldd	r18, Y+1	; 0x01
    1eb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1eb6:	80 e6       	ldi	r24, 0x60	; 96
    1eb8:	9a ee       	ldi	r25, 0xEA	; 234
    1eba:	28 9f       	mul	r18, r24
    1ebc:	a0 01       	movw	r20, r0
    1ebe:	29 9f       	mul	r18, r25
    1ec0:	50 0d       	add	r21, r0
    1ec2:	38 9f       	mul	r19, r24
    1ec4:	50 0d       	add	r21, r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	ca 01       	movw	r24, r20
    1eca:	aa 27       	eor	r26, r26
    1ecc:	bb 27       	eor	r27, r27
    1ece:	8b 83       	std	Y+3, r24	; 0x03
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	ad 83       	std	Y+5, r26	; 0x05
    1ed4:	be 83       	std	Y+6, r27	; 0x06
	return a;
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	ad 81       	ldd	r26, Y+5	; 0x05
    1edc:	be 81       	ldd	r27, Y+6	; 0x06
}
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	26 96       	adiw	r28, 0x06	; 6
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <ar>:

float ar(unsigned int port, unsigned int number,unsigned int delay){ //Find Average
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	6a 97       	sbiw	r28, 0x1a	; 26
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	7c 83       	std	Y+4, r23	; 0x04
    1f12:	6b 83       	std	Y+3, r22	; 0x03
    1f14:	5e 83       	std	Y+6, r21	; 0x06
    1f16:	4d 83       	std	Y+5, r20	; 0x05
    1f18:	2d b7       	in	r18, 0x3d	; 61
    1f1a:	3e b7       	in	r19, 0x3e	; 62
    1f1c:	3a 8f       	std	Y+26, r19	; 0x1a
    1f1e:	29 8f       	std	Y+25, r18	; 0x19
    1f20:	8d b7       	in	r24, 0x3d	; 61
    1f22:	9e b7       	in	r25, 0x3e	; 62
    1f24:	9a 8b       	std	Y+18, r25	; 0x12
    1f26:	89 8b       	std	Y+17, r24	; 0x11
	int i,list[number];
    1f28:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2c:	c9 01       	movw	r24, r18
    1f2e:	82 0f       	add	r24, r18
    1f30:	93 1f       	adc	r25, r19
    1f32:	ed b7       	in	r30, 0x3d	; 61
    1f34:	fe b7       	in	r31, 0x3e	; 62
    1f36:	e8 1b       	sub	r30, r24
    1f38:	f9 0b       	sbc	r31, r25
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	fe bf       	out	0x3e, r31	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	ed bf       	out	0x3d, r30	; 61
    1f44:	8d b7       	in	r24, 0x3d	; 61
    1f46:	9e b7       	in	r25, 0x3e	; 62
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	00 96       	adiw	r24, 0x00	; 0
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	8b 8b       	std	Y+19, r24	; 0x13
	float sum, arg;
	
		//lcd("Plz Wait while #nSysChk Mois ");
		//sleep(1000);
		//lcd("#c");
	

		for(i=0;i<number;i++){ 
    1f50:	18 86       	std	Y+8, r1	; 0x08
    1f52:	1f 82       	std	Y+7, r1	; 0x07
    1f54:	2f 81       	ldd	r18, Y+7	; 0x07
    1f56:	38 85       	ldd	r19, Y+8	; 0x08
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	28 17       	cp	r18, r24
    1f5e:	39 07       	cpc	r19, r25
    1f60:	08 f0       	brcs	.+2      	; 0x1f64 <ar+0x70>
    1f62:	4b c0       	rjmp	.+150    	; 0x1ffa <ar+0x106>
			list[i]= analog(port);
    1f64:	2f 81       	ldd	r18, Y+7	; 0x07
    1f66:	38 85       	ldd	r19, Y+8	; 0x08
    1f68:	c9 01       	movw	r24, r18
    1f6a:	82 0f       	add	r24, r18
    1f6c:	93 1f       	adc	r25, r19
    1f6e:	0b 89       	ldd	r16, Y+19	; 0x13
    1f70:	1c 89       	ldd	r17, Y+20	; 0x14
    1f72:	08 0f       	add	r16, r24
    1f74:	19 1f       	adc	r17, r25
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	0e 94 62 08 	call	0x10c4 <analog>
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
			sleep(delay);
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	0e 94 6f 00 	call	0xde <sleep>
			lcd("#c%d     ",analog(port));
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	0e 94 62 08 	call	0x10c4 <analog>
    1f90:	9f 93       	push	r25
    1f92:	8f 93       	push	r24
    1f94:	8d e6       	ldi	r24, 0x6D	; 109
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9f 93       	push	r25
    1f9a:	8f 93       	push	r24
    1f9c:	0e 94 b0 06 	call	0xd60 <lcd>
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0

			//ar
			sum = sum + list[i];
    1fa8:	2f 81       	ldd	r18, Y+7	; 0x07
    1faa:	38 85       	ldd	r19, Y+8	; 0x08
    1fac:	c9 01       	movw	r24, r18
    1fae:	82 0f       	add	r24, r18
    1fb0:	93 1f       	adc	r25, r19
    1fb2:	eb 89       	ldd	r30, Y+19	; 0x13
    1fb4:	fc 89       	ldd	r31, Y+20	; 0x14
    1fb6:	e8 0f       	add	r30, r24
    1fb8:	f9 1f       	adc	r31, r25
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	aa 27       	eor	r26, r26
    1fc0:	97 fd       	sbrc	r25, 7
    1fc2:	a0 95       	com	r26
    1fc4:	ba 2f       	mov	r27, r26
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 43 18 	call	0x3086 <__floatsisf>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	ad 01       	movw	r20, r26
    1fd6:	69 85       	ldd	r22, Y+9	; 0x09
    1fd8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fde:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	89 87       	std	Y+9, r24	; 0x09
    1fe8:	9a 87       	std	Y+10, r25	; 0x0a
    1fea:	ab 87       	std	Y+11, r26	; 0x0b
    1fec:	bc 87       	std	Y+12, r27	; 0x0c
    1fee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff0:	98 85       	ldd	r25, Y+8	; 0x08
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	98 87       	std	Y+8, r25	; 0x08
    1ff6:	8f 83       	std	Y+7, r24	; 0x07
    1ff8:	ad cf       	rjmp	.-166    	; 0x1f54 <ar+0x60>
		}
		arg = sum / number;	
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	aa 27       	eor	r26, r26
    2000:	97 fd       	sbrc	r25, 7
    2002:	a0 95       	com	r26
    2004:	ba 2f       	mov	r27, r26
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 43 18 	call	0x3086 <__floatsisf>
    200e:	6d 8b       	std	Y+21, r22	; 0x15
    2010:	7e 8b       	std	Y+22, r23	; 0x16
    2012:	8f 8b       	std	Y+23, r24	; 0x17
    2014:	98 8f       	std	Y+24, r25	; 0x18
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	99 23       	and	r25, r25
    201c:	84 f4       	brge	.+32     	; 0x203e <ar+0x14a>
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e8       	ldi	r20, 0x80	; 128
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	6d 89       	ldd	r22, Y+21	; 0x15
    2028:	7e 89       	ldd	r23, Y+22	; 0x16
    202a:	8f 89       	ldd	r24, Y+23	; 0x17
    202c:	98 8d       	ldd	r25, Y+24	; 0x18
    202e:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	8d 8b       	std	Y+21, r24	; 0x15
    2038:	9e 8b       	std	Y+22, r25	; 0x16
    203a:	af 8b       	std	Y+23, r26	; 0x17
    203c:	b8 8f       	std	Y+24, r27	; 0x18
    203e:	2d 89       	ldd	r18, Y+21	; 0x15
    2040:	3e 89       	ldd	r19, Y+22	; 0x16
    2042:	4f 89       	ldd	r20, Y+23	; 0x17
    2044:	58 8d       	ldd	r21, Y+24	; 0x18
    2046:	69 85       	ldd	r22, Y+9	; 0x09
    2048:	7a 85       	ldd	r23, Y+10	; 0x0a
    204a:	8b 85       	ldd	r24, Y+11	; 0x0b
    204c:	9c 85       	ldd	r25, Y+12	; 0x0c
    204e:	0e 94 51 17 	call	0x2ea2 <__divsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	8d 87       	std	Y+13, r24	; 0x0d
    2058:	9e 87       	std	Y+14, r25	; 0x0e
    205a:	af 87       	std	Y+15, r26	; 0x0f
    205c:	b8 8b       	std	Y+16, r27	; 0x10
	return arg;
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	af 85       	ldd	r26, Y+15	; 0x0f
    2064:	b8 89       	ldd	r27, Y+16	; 0x10
    2066:	29 89       	ldd	r18, Y+17	; 0x11
    2068:	3a 89       	ldd	r19, Y+18	; 0x12
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	3e bf       	out	0x3e, r19	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	2d bf       	out	0x3d, r18	; 61
	//Use lcd("#cA%f      ",ar(1,15,200));

}
    2074:	e9 8d       	ldd	r30, Y+25	; 0x19
    2076:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	fe bf       	out	0x3e, r31	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	ed bf       	out	0x3d, r30	; 61
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	6a 96       	adiw	r28, 0x1a	; 26
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	08 95       	ret

0000209c <sleepMin>:

void sleepMin(unsigned int mina)  //Sleep Def
{
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	26 97       	sbiw	r28, 0x06	; 6
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	9a 83       	std	Y+2, r25	; 0x02
    20b2:	89 83       	std	Y+1, r24	; 0x01
	unsigned int i,j;
	for(i=0;i<mina;i++){
    20b4:	1c 82       	std	Y+4, r1	; 0x04
    20b6:	1b 82       	std	Y+3, r1	; 0x03
    20b8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ba:	3c 81       	ldd	r19, Y+4	; 0x04
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
    20c0:	28 17       	cp	r18, r24
    20c2:	39 07       	cpc	r19, r25
    20c4:	b8 f4       	brcc	.+46     	; 0x20f4 <sleepMin+0x58>
	for(j=0;j<60;j++){
    20c6:	1e 82       	std	Y+6, r1	; 0x06
    20c8:	1d 82       	std	Y+5, r1	; 0x05
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	8c 33       	cpi	r24, 0x3C	; 60
    20d0:	91 05       	cpc	r25, r1
    20d2:	50 f4       	brcc	.+20     	; 0x20e8 <sleepMin+0x4c>
	sleep(1000);}}
    20d4:	88 ee       	ldi	r24, 0xE8	; 232
    20d6:	93 e0       	ldi	r25, 0x03	; 3
    20d8:	0e 94 6f 00 	call	0xde <sleep>
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
    20e6:	f1 cf       	rjmp	.-30     	; 0x20ca <sleepMin+0x2e>
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
    20f2:	e2 cf       	rjmp	.-60     	; 0x20b8 <sleepMin+0x1c>
    20f4:	26 96       	adiw	r28, 0x06	; 6
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	08 95       	ret

00002106 <persen>:
}  

float persen(float numa, float maxa,float pera) //return float
{
    2106:	ef 92       	push	r14
    2108:	ff 92       	push	r15
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	60 97       	sbiw	r28, 0x10	; 16
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	69 83       	std	Y+1, r22	; 0x01
    2124:	7a 83       	std	Y+2, r23	; 0x02
    2126:	8b 83       	std	Y+3, r24	; 0x03
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	2d 83       	std	Y+5, r18	; 0x05
    212c:	3e 83       	std	Y+6, r19	; 0x06
    212e:	4f 83       	std	Y+7, r20	; 0x07
    2130:	58 87       	std	Y+8, r21	; 0x08
    2132:	e9 86       	std	Y+9, r14	; 0x09
    2134:	fa 86       	std	Y+10, r15	; 0x0a
    2136:	0b 87       	std	Y+11, r16	; 0x0b
    2138:	1c 87       	std	Y+12, r17	; 0x0c
	float ap;
	ap = (numa/maxa)*pera;
    213a:	2d 81       	ldd	r18, Y+5	; 0x05
    213c:	3e 81       	ldd	r19, Y+6	; 0x06
    213e:	4f 81       	ldd	r20, Y+7	; 0x07
    2140:	58 85       	ldd	r21, Y+8	; 0x08
    2142:	69 81       	ldd	r22, Y+1	; 0x01
    2144:	7a 81       	ldd	r23, Y+2	; 0x02
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	0e 94 51 17 	call	0x2ea2 <__divsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	29 85       	ldd	r18, Y+9	; 0x09
    2154:	3a 85       	ldd	r19, Y+10	; 0x0a
    2156:	4b 85       	ldd	r20, Y+11	; 0x0b
    2158:	5c 85       	ldd	r21, Y+12	; 0x0c
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 ff 18 	call	0x31fe <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	8d 87       	std	Y+13, r24	; 0x0d
    2168:	9e 87       	std	Y+14, r25	; 0x0e
    216a:	af 87       	std	Y+15, r26	; 0x0f
    216c:	b8 8b       	std	Y+16, r27	; 0x10
	return ap;
    216e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2170:	9e 85       	ldd	r25, Y+14	; 0x0e
    2172:	af 85       	ldd	r26, Y+15	; 0x0f
    2174:	b8 89       	ldd	r27, Y+16	; 0x10
}
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	60 96       	adiw	r28, 0x10	; 16
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	ef 90       	pop	r14
    2192:	08 95       	ret

00002194 <chkVola>:

float chkVola(unsigned int port, unsigned int number, unsigned int delay) //Chack vol scolling
{
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	6e 97       	sbiw	r28, 0x1e	; 30
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	7c 83       	std	Y+4, r23	; 0x04
    21b2:	6b 83       	std	Y+3, r22	; 0x03
    21b4:	5e 83       	std	Y+6, r21	; 0x06
    21b6:	4d 83       	std	Y+5, r20	; 0x05
    21b8:	2d b7       	in	r18, 0x3d	; 61
    21ba:	3e b7       	in	r19, 0x3e	; 62
    21bc:	3e 8f       	std	Y+30, r19	; 0x1e
    21be:	2d 8f       	std	Y+29, r18	; 0x1d
    21c0:	8d b7       	in	r24, 0x3d	; 61
    21c2:	9e b7       	in	r25, 0x3e	; 62
    21c4:	9e 8b       	std	Y+22, r25	; 0x16
    21c6:	8d 8b       	std	Y+21, r24	; 0x15
	int ia,lista[number];
    21c8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ca:	3c 81       	ldd	r19, Y+4	; 0x04
    21cc:	c9 01       	movw	r24, r18
    21ce:	82 0f       	add	r24, r18
    21d0:	93 1f       	adc	r25, r19
    21d2:	ad b7       	in	r26, 0x3d	; 61
    21d4:	be b7       	in	r27, 0x3e	; 62
    21d6:	a8 1b       	sub	r26, r24
    21d8:	b9 0b       	sbc	r27, r25
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	be bf       	out	0x3e, r27	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	ad bf       	out	0x3d, r26	; 61
    21e4:	8d b7       	in	r24, 0x3d	; 61
    21e6:	9e b7       	in	r25, 0x3e	; 62
    21e8:	01 96       	adiw	r24, 0x01	; 1
    21ea:	00 96       	adiw	r24, 0x00	; 0
    21ec:	98 8f       	std	Y+24, r25	; 0x18
    21ee:	8f 8b       	std	Y+23, r24	; 0x17
	float suma, arga;
	
			for(ia=0;ia<number;ia++){ 
    21f0:	18 86       	std	Y+8, r1	; 0x08
    21f2:	1f 82       	std	Y+7, r1	; 0x07
    21f4:	2f 81       	ldd	r18, Y+7	; 0x07
    21f6:	38 85       	ldd	r19, Y+8	; 0x08
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	28 17       	cp	r18, r24
    21fe:	39 07       	cpc	r19, r25
    2200:	e0 f5       	brcc	.+120    	; 0x227a <chkVola+0xe6>
			lista[ia]= analog(port);
    2202:	2f 81       	ldd	r18, Y+7	; 0x07
    2204:	38 85       	ldd	r19, Y+8	; 0x08
    2206:	c9 01       	movw	r24, r18
    2208:	82 0f       	add	r24, r18
    220a:	93 1f       	adc	r25, r19
    220c:	0f 89       	ldd	r16, Y+23	; 0x17
    220e:	18 8d       	ldd	r17, Y+24	; 0x18
    2210:	08 0f       	add	r16, r24
    2212:	19 1f       	adc	r17, r25
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	0e 94 62 08 	call	0x10c4 <analog>
    221a:	f8 01       	movw	r30, r16
    221c:	91 83       	std	Z+1, r25	; 0x01
    221e:	80 83       	st	Z, r24
			sleep(delay);
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	0e 94 6f 00 	call	0xde <sleep>
			//lcd("#c%d     ",analog(port));

			//ar
			suma = suma + (float)lista[ia];
    2228:	2f 81       	ldd	r18, Y+7	; 0x07
    222a:	38 85       	ldd	r19, Y+8	; 0x08
    222c:	c9 01       	movw	r24, r18
    222e:	82 0f       	add	r24, r18
    2230:	93 1f       	adc	r25, r19
    2232:	ef 89       	ldd	r30, Y+23	; 0x17
    2234:	f8 8d       	ldd	r31, Y+24	; 0x18
    2236:	e8 0f       	add	r30, r24
    2238:	f9 1f       	adc	r31, r25
    223a:	80 81       	ld	r24, Z
    223c:	91 81       	ldd	r25, Z+1	; 0x01
    223e:	aa 27       	eor	r26, r26
    2240:	97 fd       	sbrc	r25, 7
    2242:	a0 95       	com	r26
    2244:	ba 2f       	mov	r27, r26
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 43 18 	call	0x3086 <__floatsisf>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9c 01       	movw	r18, r24
    2254:	ad 01       	movw	r20, r26
    2256:	69 85       	ldd	r22, Y+9	; 0x09
    2258:	7a 85       	ldd	r23, Y+10	; 0x0a
    225a:	8b 85       	ldd	r24, Y+11	; 0x0b
    225c:	9c 85       	ldd	r25, Y+12	; 0x0c
    225e:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	89 87       	std	Y+9, r24	; 0x09
    2268:	9a 87       	std	Y+10, r25	; 0x0a
    226a:	ab 87       	std	Y+11, r26	; 0x0b
    226c:	bc 87       	std	Y+12, r27	; 0x0c
    226e:	8f 81       	ldd	r24, Y+7	; 0x07
    2270:	98 85       	ldd	r25, Y+8	; 0x08
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	98 87       	std	Y+8, r25	; 0x08
    2276:	8f 83       	std	Y+7, r24	; 0x07
    2278:	bd cf       	rjmp	.-134    	; 0x21f4 <chkVola+0x60>
		}
		arga = suma / number;	
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	aa 27       	eor	r26, r26
    2280:	97 fd       	sbrc	r25, 7
    2282:	a0 95       	com	r26
    2284:	ba 2f       	mov	r27, r26
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 43 18 	call	0x3086 <__floatsisf>
    228e:	69 8f       	std	Y+25, r22	; 0x19
    2290:	7a 8f       	std	Y+26, r23	; 0x1a
    2292:	8b 8f       	std	Y+27, r24	; 0x1b
    2294:	9c 8f       	std	Y+28, r25	; 0x1c
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	9c 81       	ldd	r25, Y+4	; 0x04
    229a:	99 23       	and	r25, r25
    229c:	84 f4       	brge	.+32     	; 0x22be <chkVola+0x12a>
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	69 8d       	ldd	r22, Y+25	; 0x19
    22a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ae:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	89 8f       	std	Y+25, r24	; 0x19
    22b8:	9a 8f       	std	Y+26, r25	; 0x1a
    22ba:	ab 8f       	std	Y+27, r26	; 0x1b
    22bc:	bc 8f       	std	Y+28, r27	; 0x1c
    22be:	29 8d       	ldd	r18, Y+25	; 0x19
    22c0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    22c2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    22c4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    22c6:	69 85       	ldd	r22, Y+9	; 0x09
    22c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    22ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    22cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    22ce:	0e 94 51 17 	call	0x2ea2 <__divsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8d 87       	std	Y+13, r24	; 0x0d
    22d8:	9e 87       	std	Y+14, r25	; 0x0e
    22da:	af 87       	std	Y+15, r26	; 0x0f
    22dc:	b8 8b       	std	Y+16, r27	; 0x10
	

if((float)lista[0]==arga){return 1;} //Not scolling
    22de:	af 89       	ldd	r26, Y+23	; 0x17
    22e0:	b8 8d       	ldd	r27, Y+24	; 0x18
    22e2:	8d 91       	ld	r24, X+
    22e4:	9c 91       	ld	r25, X
    22e6:	aa 27       	eor	r26, r26
    22e8:	97 fd       	sbrc	r25, 7
    22ea:	a0 95       	com	r26
    22ec:	ba 2f       	mov	r27, r26
    22ee:	bc 01       	movw	r22, r24
    22f0:	cd 01       	movw	r24, r26
    22f2:	0e 94 43 18 	call	0x3086 <__floatsisf>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	2d 85       	ldd	r18, Y+13	; 0x0d
    22fc:	3e 85       	ldd	r19, Y+14	; 0x0e
    22fe:	4f 85       	ldd	r20, Y+15	; 0x0f
    2300:	58 89       	ldd	r21, Y+16	; 0x10
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 4d 18 	call	0x309a <__eqsf2>
    230a:	88 23       	and	r24, r24
    230c:	09 f0       	breq	.+2      	; 0x2310 <chkVola+0x17c>
    230e:	10 c0       	rjmp	.+32     	; 0x2330 <chkVola+0x19c>
    2310:	ed 89       	ldd	r30, Y+21	; 0x15
    2312:	fe 89       	ldd	r31, Y+22	; 0x16
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	fe bf       	out	0x3e, r31	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	ed bf       	out	0x3d, r30	; 61
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 e8       	ldi	r26, 0x80	; 128
    2324:	bf e3       	ldi	r27, 0x3F	; 63
    2326:	89 8b       	std	Y+17, r24	; 0x11
    2328:	9a 8b       	std	Y+18, r25	; 0x12
    232a:	ab 8b       	std	Y+19, r26	; 0x13
    232c:	bc 8b       	std	Y+20, r27	; 0x14
    232e:	0f c0       	rjmp	.+30     	; 0x234e <chkVola+0x1ba>
else{return 0;} //Scolling
    2330:	ad 89       	ldd	r26, Y+21	; 0x15
    2332:	be 89       	ldd	r27, Y+22	; 0x16
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	be bf       	out	0x3e, r27	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	ad bf       	out	0x3d, r26	; 61
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a0 e0       	ldi	r26, 0x00	; 0
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	89 8b       	std	Y+17, r24	; 0x11
    2348:	9a 8b       	std	Y+18, r25	; 0x12
    234a:	ab 8b       	std	Y+19, r26	; 0x13
    234c:	bc 8b       	std	Y+20, r27	; 0x14

//Used to  int a = chkVola(0,5,10);
//lcd("%d     ",a);	


}
    234e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2350:	be 8d       	ldd	r27, Y+30	; 0x1e
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	be bf       	out	0x3e, r27	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	ad bf       	out	0x3d, r26	; 61
    235c:	69 89       	ldd	r22, Y+17	; 0x11
    235e:	7a 89       	ldd	r23, Y+18	; 0x12
    2360:	8b 89       	ldd	r24, Y+19	; 0x13
    2362:	9c 89       	ldd	r25, Y+20	; 0x14
    2364:	6e 96       	adiw	r28, 0x1e	; 30
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	0f 91       	pop	r16
    2378:	08 95       	ret

0000237a <welcome>:

///////////////// END Calculator func //////////////////////


void welcome(){
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
	lcd(" l__l l__l   #n l  l l  l5CH00l ");
    2382:	87 e7       	ldi	r24, 0x77	; 119
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9f 93       	push	r25
    2388:	8f 93       	push	r24
    238a:	0e 94 b0 06 	call	0xd60 <lcd>
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
	sleep(2000);
    2392:	80 ed       	ldi	r24, 0xD0	; 208
    2394:	97 e0       	ldi	r25, 0x07	; 7
    2396:	0e 94 6f 00 	call	0xde <sleep>
	lcd("   Welcome to #n      MCT       ");
    239a:	88 e9       	ldi	r24, 0x98	; 152
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9f 93       	push	r25
    23a0:	8f 93       	push	r24
    23a2:	0e 94 b0 06 	call	0xd60 <lcd>
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
	sleep("1000");
    23aa:	89 eb       	ldi	r24, 0xB9	; 185
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 6f 00 	call	0xde <sleep>
	SOUNDFUNC(SOUNDPORT,2000,200);
    23b2:	48 ec       	ldi	r20, 0xC8	; 200
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	60 ed       	ldi	r22, 0xD0	; 208
    23b8:	77 e0       	ldi	r23, 0x07	; 7
    23ba:	86 e0       	ldi	r24, 0x06	; 6
    23bc:	0e 94 b8 04 	call	0x970 <sound_d>
	lcd("#c");
    23c0:	8e eb       	ldi	r24, 0xBE	; 190
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9f 93       	push	r25
    23c6:	8f 93       	push	r24
    23c8:	0e 94 b0 06 	call	0xd60 <lcd>
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	08 95       	ret

000023d6 <resetblock>:
}//complated

void resetblock()
{
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
	lcd("#cReset All#nPlaese Wait!");
    23de:	81 ec       	ldi	r24, 0xC1	; 193
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9f 93       	push	r25
    23e4:	8f 93       	push	r24
    23e6:	0e 94 b0 06 	call	0xd60 <lcd>
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
	DELAYFUNC(DELAYPORT,0);  //Port PD0 set Delay
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	0e 94 3d 03 	call	0x67a <out_d>
	sleep(1000);
    23f6:	88 ee       	ldi	r24, 0xE8	; 232
    23f8:	93 e0       	ldi	r25, 0x03	; 3
    23fa:	0e 94 6f 00 	call	0xde <sleep>
	SOUNDFUNC(SOUNDPORT,3000,1000);
    23fe:	48 ee       	ldi	r20, 0xE8	; 232
    2400:	53 e0       	ldi	r21, 0x03	; 3
    2402:	68 eb       	ldi	r22, 0xB8	; 184
    2404:	7b e0       	ldi	r23, 0x0B	; 11
    2406:	86 e0       	ldi	r24, 0x06	; 6
    2408:	0e 94 b8 04 	call	0x970 <sound_d>
	lcd("#cReset : #nComplated");
    240c:	8b ed       	ldi	r24, 0xDB	; 219
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9f 93       	push	r25
    2412:	8f 93       	push	r24
    2414:	0e 94 b0 06 	call	0xd60 <lcd>
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
	sleep(1000);
    241c:	88 ee       	ldi	r24, 0xE8	; 232
    241e:	93 e0       	ldi	r25, 0x03	; 3
    2420:	0e 94 6f 00 	call	0xde <sleep>
	lcd("#c");
    2424:	8e eb       	ldi	r24, 0xBE	; 190
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9f 93       	push	r25
    242a:	8f 93       	push	r24
    242c:	0e 94 b0 06 	call	0xd60 <lcd>
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	08 95       	ret

0000243a <chkstickinsoil>:
}//completed

void chkstickinsoil(){ //For Chack Stick in Soil Only
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	28 97       	sbiw	r28, 0x08	; 8
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
	unsigned int k,a;
	a = ANALOG_REG;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	0e 94 62 08 	call	0x10c4 <analog>
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	8b 83       	std	Y+3, r24	; 0x03
	lcd("Install biStick to soil");
    2458:	81 ef       	ldi	r24, 0xF1	; 241
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9f 93       	push	r25
    245e:	8f 93       	push	r24
    2460:	0e 94 b0 06 	call	0xd60 <lcd>
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
	SOUNDFUNC(SOUNDPORT,3500,50);
    2468:	42 e3       	ldi	r20, 0x32	; 50
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	6c ea       	ldi	r22, 0xAC	; 172
    246e:	7d e0       	ldi	r23, 0x0D	; 13
    2470:	86 e0       	ldi	r24, 0x06	; 6
    2472:	0e 94 b8 04 	call	0x970 <sound_d>
	sleep(5000);
    2476:	88 e8       	ldi	r24, 0x88	; 136
    2478:	93 e1       	ldi	r25, 0x13	; 19
    247a:	0e 94 6f 00 	call	0xde <sleep>
	lcd("#cAnd Scoll Vol for Confirm");
    247e:	89 e0       	ldi	r24, 0x09	; 9
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	9f 93       	push	r25
    2484:	8f 93       	push	r24
    2486:	0e 94 b0 06 	call	0xd60 <lcd>
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
	sleep(3000);
    248e:	88 eb       	ldi	r24, 0xB8	; 184
    2490:	9b e0       	ldi	r25, 0x0B	; 11
    2492:	0e 94 6f 00 	call	0xde <sleep>
	while(1){
		int brk = chkVola(ANALOG_VOL_PORT,5,200);
    2496:	48 ec       	ldi	r20, 0xC8	; 200
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	65 e0       	ldi	r22, 0x05	; 5
    249c:	70 e0       	ldi	r23, 0x00	; 0
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	0e 94 ca 10 	call	0x2194 <chkVola>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	bc 01       	movw	r22, r24
    24ac:	cd 01       	movw	r24, r26
    24ae:	0e 94 26 18 	call	0x304c <__fixsfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
		sleep(500);
    24ba:	84 ef       	ldi	r24, 0xF4	; 244
    24bc:	91 e0       	ldi	r25, 0x01	; 1
    24be:	0e 94 6f 00 	call	0xde <sleep>

		if(brk == 0){
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	31 f7       	brne	.-52     	; 0x2496 <chkstickinsoil+0x5c>
			lcd("Still Scolling!!");  //Chack agin for sure
    24ca:	85 e2       	ldi	r24, 0x25	; 37
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	9f 93       	push	r25
    24d0:	8f 93       	push	r24
    24d2:	0e 94 b0 06 	call	0xd60 <lcd>
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
			sleep(2000);
    24da:	80 ed       	ldi	r24, 0xD0	; 208
    24dc:	97 e0       	ldi	r25, 0x07	; 7
    24de:	0e 94 6f 00 	call	0xde <sleep>
			int brka = chkVola(ANALOG_VOL_PORT,5,200);
    24e2:	48 ec       	ldi	r20, 0xC8	; 200
    24e4:	50 e0       	ldi	r21, 0x00	; 0
    24e6:	65 e0       	ldi	r22, 0x05	; 5
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	0e 94 ca 10 	call	0x2194 <chkVola>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 26 18 	call	0x304c <__fixsfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	98 87       	std	Y+8, r25	; 0x08
    2504:	8f 83       	std	Y+7, r24	; 0x07
			if(brka == 0){
    2506:	8f 81       	ldd	r24, Y+7	; 0x07
    2508:	98 85       	ldd	r25, Y+8	; 0x08
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	21 f6       	brne	.-120    	; 0x2496 <chkstickinsoil+0x5c>
				lcd("#cOk!!#nStick In Soil");sleep(5000);lcd("#c"); break; }
    250e:	86 e3       	ldi	r24, 0x36	; 54
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	9f 93       	push	r25
    2514:	8f 93       	push	r24
    2516:	0e 94 b0 06 	call	0xd60 <lcd>
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	88 e8       	ldi	r24, 0x88	; 136
    2520:	93 e1       	ldi	r25, 0x13	; 19
    2522:	0e 94 6f 00 	call	0xde <sleep>
    2526:	8e eb       	ldi	r24, 0xBE	; 190
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9f 93       	push	r25
    252c:	8f 93       	push	r24
    252e:	0e 94 b0 06 	call	0xd60 <lcd>
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	28 96       	adiw	r28, 0x08	; 8
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	08 95       	ret

00002548 <chktime>:
			}
		}

}//Complete

int chktime(){
    2548:	ef 92       	push	r14
    254a:	ff 92       	push	r15
    254c:	0f 93       	push	r16
    254e:	1f 93       	push	r17
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	64 97       	sbiw	r28, 0x14	; 20
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
	unsigned int time_min;
	int ax;
	lcd("#cScolling for Selec time water (min)");
    2564:	8c e4       	ldi	r24, 0x4C	; 76
    2566:	91 e0       	ldi	r25, 0x01	; 1
    2568:	9f 93       	push	r25
    256a:	8f 93       	push	r24
    256c:	0e 94 b0 06 	call	0xd60 <lcd>
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
	SOUNDFUNC(SOUNDPORT,3500,500);
    2574:	44 ef       	ldi	r20, 0xF4	; 244
    2576:	51 e0       	ldi	r21, 0x01	; 1
    2578:	6c ea       	ldi	r22, 0xAC	; 172
    257a:	7d e0       	ldi	r23, 0x0D	; 13
    257c:	86 e0       	ldi	r24, 0x06	; 6
    257e:	0e 94 b8 04 	call	0x970 <sound_d>
	sleep(3000);
    2582:	88 eb       	ldi	r24, 0xB8	; 184
    2584:	9b e0       	ldi	r25, 0x0B	; 11
    2586:	0e 94 6f 00 	call	0xde <sleep>

	while(1){
		ax = persen((float)ANALOG_VOL,1023,60);
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	0e 94 62 08 	call	0x10c4 <analog>
    2590:	8c 01       	movw	r16, r24
    2592:	c8 01       	movw	r24, r16
    2594:	aa 27       	eor	r26, r26
    2596:	97 fd       	sbrc	r25, 7
    2598:	a0 95       	com	r26
    259a:	ba 2f       	mov	r27, r26
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 43 18 	call	0x3086 <__floatsisf>
    25a4:	6d 87       	std	Y+13, r22	; 0x0d
    25a6:	7e 87       	std	Y+14, r23	; 0x0e
    25a8:	8f 87       	std	Y+15, r24	; 0x0f
    25aa:	98 8b       	std	Y+16, r25	; 0x10
    25ac:	11 23       	and	r17, r17
    25ae:	84 f4       	brge	.+32     	; 0x25d0 <chktime+0x88>
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	57 e4       	ldi	r21, 0x47	; 71
    25b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    25ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    25bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25be:	98 89       	ldd	r25, Y+16	; 0x10
    25c0:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	8d 87       	std	Y+13, r24	; 0x0d
    25ca:	9e 87       	std	Y+14, r25	; 0x0e
    25cc:	af 87       	std	Y+15, r26	; 0x0f
    25ce:	b8 8b       	std	Y+16, r27	; 0x10
    25d0:	0f 2e       	mov	r0, r31
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	ef 2e       	mov	r14, r31
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	ff 2e       	mov	r15, r31
    25da:	f0 e7       	ldi	r31, 0x70	; 112
    25dc:	0f 2f       	mov	r16, r31
    25de:	f2 e4       	ldi	r31, 0x42	; 66
    25e0:	1f 2f       	mov	r17, r31
    25e2:	f0 2d       	mov	r31, r0
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 ec       	ldi	r19, 0xC0	; 192
    25e8:	4f e7       	ldi	r20, 0x7F	; 127
    25ea:	54 e4       	ldi	r21, 0x44	; 68
    25ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    25ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    25f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f2:	98 89       	ldd	r25, Y+16	; 0x10
    25f4:	0e 94 83 10 	call	0x2106 <persen>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 26 18 	call	0x304c <__fixsfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9c 83       	std	Y+4, r25	; 0x04
    260a:	8b 83       	std	Y+3, r24	; 0x03
		lcd("#cWater Time : %d    ",ax);
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	9f 93       	push	r25
    2612:	8f 93       	push	r24
    2614:	82 e7       	ldi	r24, 0x72	; 114
    2616:	91 e0       	ldi	r25, 0x01	; 1
    2618:	9f 93       	push	r25
    261a:	8f 93       	push	r24
    261c:	0e 94 b0 06 	call	0xd60 <lcd>
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
		sleep(10);
    2628:	8a e0       	ldi	r24, 0x0A	; 10
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 6f 00 	call	0xde <sleep>

		int brktime = chkVola(ANALOG_VOL_PORT,5,100),j=0;		
    2630:	44 e6       	ldi	r20, 0x64	; 100
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	65 e0       	ldi	r22, 0x05	; 5
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 ca 10 	call	0x2194 <chkVola>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 26 18 	call	0x304c <__fixsfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
    2654:	18 86       	std	Y+8, r1	; 0x08
    2656:	1f 82       	std	Y+7, r1	; 0x07
		if(brktime == 1){
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	91 05       	cpc	r25, r1
    2660:	09 f0       	breq	.+2      	; 0x2664 <chktime+0x11c>
    2662:	93 cf       	rjmp	.-218    	; 0x258a <chktime+0x42>
			lcd("#cSure [No/Yes]");  //Chack agin for sure
    2664:	88 e8       	ldi	r24, 0x88	; 136
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	9f 93       	push	r25
    266a:	8f 93       	push	r24
    266c:	0e 94 b0 06 	call	0xd60 <lcd>
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
			sleep(3000);
    2674:	88 eb       	ldi	r24, 0xB8	; 184
    2676:	9b e0       	ldi	r25, 0x0B	; 11
    2678:	0e 94 6f 00 	call	0xde <sleep>
			
			while(1){
				int axtime =  persen((float)ANALOG_VOL,1023,60) ;
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	0e 94 62 08 	call	0x10c4 <analog>
    2682:	8c 01       	movw	r16, r24
    2684:	c8 01       	movw	r24, r16
    2686:	aa 27       	eor	r26, r26
    2688:	97 fd       	sbrc	r25, 7
    268a:	a0 95       	com	r26
    268c:	ba 2f       	mov	r27, r26
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 43 18 	call	0x3086 <__floatsisf>
    2696:	69 8b       	std	Y+17, r22	; 0x11
    2698:	7a 8b       	std	Y+18, r23	; 0x12
    269a:	8b 8b       	std	Y+19, r24	; 0x13
    269c:	9c 8b       	std	Y+20, r25	; 0x14
    269e:	11 23       	and	r17, r17
    26a0:	84 f4       	brge	.+32     	; 0x26c2 <chktime+0x17a>
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	57 e4       	ldi	r21, 0x47	; 71
    26aa:	69 89       	ldd	r22, Y+17	; 0x11
    26ac:	7a 89       	ldd	r23, Y+18	; 0x12
    26ae:	8b 89       	ldd	r24, Y+19	; 0x13
    26b0:	9c 89       	ldd	r25, Y+20	; 0x14
    26b2:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	89 8b       	std	Y+17, r24	; 0x11
    26bc:	9a 8b       	std	Y+18, r25	; 0x12
    26be:	ab 8b       	std	Y+19, r26	; 0x13
    26c0:	bc 8b       	std	Y+20, r27	; 0x14
    26c2:	0f 2e       	mov	r0, r31
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	ef 2e       	mov	r14, r31
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	ff 2e       	mov	r15, r31
    26cc:	f0 e7       	ldi	r31, 0x70	; 112
    26ce:	0f 2f       	mov	r16, r31
    26d0:	f2 e4       	ldi	r31, 0x42	; 66
    26d2:	1f 2f       	mov	r17, r31
    26d4:	f0 2d       	mov	r31, r0
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 ec       	ldi	r19, 0xC0	; 192
    26da:	4f e7       	ldi	r20, 0x7F	; 127
    26dc:	54 e4       	ldi	r21, 0x44	; 68
    26de:	69 89       	ldd	r22, Y+17	; 0x11
    26e0:	7a 89       	ldd	r23, Y+18	; 0x12
    26e2:	8b 89       	ldd	r24, Y+19	; 0x13
    26e4:	9c 89       	ldd	r25, Y+20	; 0x14
    26e6:	0e 94 83 10 	call	0x2106 <persen>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 26 18 	call	0x304c <__fixsfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9a 87       	std	Y+10, r25	; 0x0a
    26fc:	89 87       	std	Y+9, r24	; 0x09
				

				if(axtime <= 1){
    26fe:	89 85       	ldd	r24, Y+9	; 0x09
    2700:	9a 85       	ldd	r25, Y+10	; 0x0a
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	91 05       	cpc	r25, r1
    2706:	fc f4       	brge	.+62     	; 0x2746 <chktime+0x1fe>
					lcd("#cOk!!#nWater time = %d",ax);
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	9f 93       	push	r25
    270e:	8f 93       	push	r24
    2710:	88 e9       	ldi	r24, 0x98	; 152
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	9f 93       	push	r25
    2716:	8f 93       	push	r24
    2718:	0e 94 b0 06 	call	0xd60 <lcd>
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
					sleep(5000);
    2724:	88 e8       	ldi	r24, 0x88	; 136
    2726:	93 e1       	ldi	r25, 0x13	; 19
    2728:	0e 94 6f 00 	call	0xde <sleep>
					lcd("#c");
    272c:	8e eb       	ldi	r24, 0xBE	; 190
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9f 93       	push	r25
    2732:	8f 93       	push	r24
    2734:	0e 94 b0 06 	call	0xd60 <lcd>
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
					return ax; 
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	9c 81       	ldd	r25, Y+4	; 0x04
    2740:	9c 87       	std	Y+12, r25	; 0x0c
    2742:	8b 87       	std	Y+11, r24	; 0x0b
    2744:	1e c0       	rjmp	.+60     	; 0x2782 <chktime+0x23a>
				}

				else if(axtime > 50){
    2746:	89 85       	ldd	r24, Y+9	; 0x09
    2748:	9a 85       	ldd	r25, Y+10	; 0x0a
    274a:	83 33       	cpi	r24, 0x33	; 51
    274c:	91 05       	cpc	r25, r1
    274e:	94 f0       	brlt	.+36     	; 0x2774 <chktime+0x22c>
					
					lcd("No! I'm not sure#nScolling Agin");
    2750:	80 eb       	ldi	r24, 0xB0	; 176
    2752:	91 e0       	ldi	r25, 0x01	; 1
    2754:	9f 93       	push	r25
    2756:	8f 93       	push	r24
    2758:	0e 94 b0 06 	call	0xd60 <lcd>
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
					sleep(2000);
    2760:	80 ed       	ldi	r24, 0xD0	; 208
    2762:	97 e0       	ldi	r25, 0x07	; 7
    2764:	0e 94 6f 00 	call	0xde <sleep>
					j++;
    2768:	8f 81       	ldd	r24, Y+7	; 0x07
    276a:	98 85       	ldd	r25, Y+8	; 0x08
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	98 87       	std	Y+8, r25	; 0x08
    2770:	8f 83       	std	Y+7, r24	; 0x07
    2772:	84 cf       	rjmp	.-248    	; 0x267c <chktime+0x134>
				}
				else if(j>0){break;}				
    2774:	8f 81       	ldd	r24, Y+7	; 0x07
    2776:	98 85       	ldd	r25, Y+8	; 0x08
    2778:	18 16       	cp	r1, r24
    277a:	19 06       	cpc	r1, r25
    277c:	0c f0       	brlt	.+2      	; 0x2780 <chktime+0x238>
    277e:	7e cf       	rjmp	.-260    	; 0x267c <chktime+0x134>
    2780:	04 cf       	rjmp	.-504    	; 0x258a <chktime+0x42>
				
			}
			
		}
	}
	
//use to (int)a = chktime();
} //Complete
    2782:	8b 85       	ldd	r24, Y+11	; 0x0b
    2784:	9c 85       	ldd	r25, Y+12	; 0x0c
    2786:	64 96       	adiw	r28, 0x14	; 20
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	ff 90       	pop	r15
    279c:	ef 90       	pop	r14
    279e:	08 95       	ret

000027a0 <firstchksoil>:

float firstchksoil(){
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	6a 97       	sbiw	r28, 0x1a	; 26
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
	unsigned int i=0;
    27b4:	1a 82       	std	Y+2, r1	; 0x02
    27b6:	19 82       	std	Y+1, r1	; 0x01
	float ksoil;
	lcd("#cSoil First Chack #n");
    27b8:	80 ed       	ldi	r24, 0xD0	; 208
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	9f 93       	push	r25
    27be:	8f 93       	push	r24
    27c0:	0e 94 b0 06 	call	0xd60 <lcd>
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
	sleep(1000);
    27c8:	88 ee       	ldi	r24, 0xE8	; 232
    27ca:	93 e0       	ldi	r25, 0x03	; 3
    27cc:	0e 94 6f 00 	call	0xde <sleep>
	DELAYFUNC(DELAYPORT,0);
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	0e 94 3d 03 	call	0x67a <out_d>
	float kki = ar(ANALOG_REG_PORT,5,500);
    27d8:	44 ef       	ldi	r20, 0xF4	; 244
    27da:	51 e0       	ldi	r21, 0x01	; 1
    27dc:	65 e0       	ldi	r22, 0x05	; 5
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 7a 0f 	call	0x1ef4 <ar>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	8f 83       	std	Y+7, r24	; 0x07
    27ee:	98 87       	std	Y+8, r25	; 0x08
    27f0:	a9 87       	std	Y+9, r26	; 0x09
    27f2:	ba 87       	std	Y+10, r27	; 0x0a
		float kdefault = FLOAT_K_DEFAULT;
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e8       	ldi	r25, 0x80	; 128
    27f8:	a4 e5       	ldi	r26, 0x54	; 84
    27fa:	b4 e4       	ldi	r27, 0x44	; 68
    27fc:	8b 87       	std	Y+11, r24	; 0x0b
    27fe:	9c 87       	std	Y+12, r25	; 0x0c
    2800:	ad 87       	std	Y+13, r26	; 0x0d
    2802:	be 87       	std	Y+14, r27	; 0x0e
	while(1){
		

		lcd("#cKnow: %f      #nKdef: %f     ",kki,kdefault);
    2804:	8b 85       	ldd	r24, Y+11	; 0x0b
    2806:	9c 85       	ldd	r25, Y+12	; 0x0c
    2808:	ad 85       	ldd	r26, Y+13	; 0x0d
    280a:	be 85       	ldd	r27, Y+14	; 0x0e
    280c:	bf 93       	push	r27
    280e:	af 93       	push	r26
    2810:	9f 93       	push	r25
    2812:	8f 93       	push	r24
    2814:	8f 81       	ldd	r24, Y+7	; 0x07
    2816:	98 85       	ldd	r25, Y+8	; 0x08
    2818:	a9 85       	ldd	r26, Y+9	; 0x09
    281a:	ba 85       	ldd	r27, Y+10	; 0x0a
    281c:	bf 93       	push	r27
    281e:	af 93       	push	r26
    2820:	9f 93       	push	r25
    2822:	8f 93       	push	r24
    2824:	86 ee       	ldi	r24, 0xE6	; 230
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	9f 93       	push	r25
    282a:	8f 93       	push	r24
    282c:	0e 94 b0 06 	call	0xd60 <lcd>
    2830:	8d b7       	in	r24, 0x3d	; 61
    2832:	9e b7       	in	r25, 0x3e	; 62
    2834:	0a 96       	adiw	r24, 0x0a	; 10
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	9e bf       	out	0x3e, r25	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	8d bf       	out	0x3d, r24	; 61
		sleep(5000);
    2840:	88 e8       	ldi	r24, 0x88	; 136
    2842:	93 e1       	ldi	r25, 0x13	; 19
    2844:	0e 94 6f 00 	call	0xde <sleep>

		if((float)kki < (float)kdefault){
    2848:	2b 85       	ldd	r18, Y+11	; 0x0b
    284a:	3c 85       	ldd	r19, Y+12	; 0x0c
    284c:	4d 85       	ldd	r20, Y+13	; 0x0d
    284e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2850:	6f 81       	ldd	r22, Y+7	; 0x07
    2852:	78 85       	ldd	r23, Y+8	; 0x08
    2854:	89 85       	ldd	r24, Y+9	; 0x09
    2856:	9a 85       	ldd	r25, Y+10	; 0x0a
    2858:	0e 94 4d 18 	call	0x309a <__eqsf2>
    285c:	88 23       	and	r24, r24
    285e:	0c f0       	brlt	.+2      	; 0x2862 <firstchksoil+0xc2>
    2860:	23 c0       	rjmp	.+70     	; 0x28a8 <firstchksoil+0x108>
			ksoil = ar(ANALOG_REG_PORT,10,500);
    2862:	44 ef       	ldi	r20, 0xF4	; 244
    2864:	51 e0       	ldi	r21, 0x01	; 1
    2866:	6a e0       	ldi	r22, 0x0A	; 10
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	0e 94 7a 0f 	call	0x1ef4 <ar>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	8b 83       	std	Y+3, r24	; 0x03
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	ad 83       	std	Y+5, r26	; 0x05
    287c:	be 83       	std	Y+6, r27	; 0x06
			lcd("Wet with water");
    287e:	86 e0       	ldi	r24, 0x06	; 6
    2880:	92 e0       	ldi	r25, 0x02	; 2
    2882:	9f 93       	push	r25
    2884:	8f 93       	push	r24
    2886:	0e 94 b0 06 	call	0xd60 <lcd>
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
			sleep(2000);
    288e:	80 ed       	ldi	r24, 0xD0	; 208
    2890:	97 e0       	ldi	r25, 0x07	; 7
    2892:	0e 94 6f 00 	call	0xde <sleep>
			return ksoil;
    2896:	8b 81       	ldd	r24, Y+3	; 0x03
    2898:	9c 81       	ldd	r25, Y+4	; 0x04
    289a:	ad 81       	ldd	r26, Y+5	; 0x05
    289c:	be 81       	ldd	r27, Y+6	; 0x06
    289e:	8f 8b       	std	Y+23, r24	; 0x17
    28a0:	98 8f       	std	Y+24, r25	; 0x18
    28a2:	a9 8f       	std	Y+25, r26	; 0x19
    28a4:	ba 8f       	std	Y+26, r27	; 0x1a
    28a6:	c1 c0       	rjmp	.+386    	; 0x2a2a <firstchksoil+0x28a>
		}

		else if (i==1) //Spacial because It's Waiting for water this first
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	9a 81       	ldd	r25, Y+2	; 0x02
    28ac:	81 30       	cpi	r24, 0x01	; 1
    28ae:	91 05       	cpc	r25, r1
    28b0:	09 f0       	breq	.+2      	; 0x28b4 <firstchksoil+0x114>
    28b2:	9f c0       	rjmp	.+318    	; 0x29f2 <firstchksoil+0x252>
		{	
			float kkia = 0 , j = 1.0;
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	a0 e0       	ldi	r26, 0x00	; 0
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	8f 87       	std	Y+15, r24	; 0x0f
    28be:	98 8b       	std	Y+16, r25	; 0x10
    28c0:	a9 8b       	std	Y+17, r26	; 0x11
    28c2:	ba 8b       	std	Y+18, r27	; 0x12
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	a0 e8       	ldi	r26, 0x80	; 128
    28ca:	bf e3       	ldi	r27, 0x3F	; 63
    28cc:	8b 8b       	std	Y+19, r24	; 0x13
    28ce:	9c 8b       	std	Y+20, r25	; 0x14
    28d0:	ad 8b       	std	Y+21, r26	; 0x15
    28d2:	be 8b       	std	Y+22, r27	; 0x16


			while(1){
				//Chack agin
				kkia = ar(ANALOG_REG_PORT,5,500);
    28d4:	44 ef       	ldi	r20, 0xF4	; 244
    28d6:	51 e0       	ldi	r21, 0x01	; 1
    28d8:	65 e0       	ldi	r22, 0x05	; 5
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 7a 0f 	call	0x1ef4 <ar>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	8f 87       	std	Y+15, r24	; 0x0f
    28ea:	98 8b       	std	Y+16, r25	; 0x10
    28ec:	a9 8b       	std	Y+17, r26	; 0x11
    28ee:	ba 8b       	std	Y+18, r27	; 0x12
					
				lcd("#cPlz Wait!?#nsoil absorb water");				
    28f0:	85 e1       	ldi	r24, 0x15	; 21
    28f2:	92 e0       	ldi	r25, 0x02	; 2
    28f4:	9f 93       	push	r25
    28f6:	8f 93       	push	r24
    28f8:	0e 94 b0 06 	call	0xd60 <lcd>
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
				sleep(1000);
    2900:	88 ee       	ldi	r24, 0xE8	; 232
    2902:	93 e0       	ldi	r25, 0x03	; 3
    2904:	0e 94 6f 00 	call	0xde <sleep>
				lcd("#cKnow: %f      #nKdef: %f     ",kkia/j,kdefault);
    2908:	8b 85       	ldd	r24, Y+11	; 0x0b
    290a:	9c 85       	ldd	r25, Y+12	; 0x0c
    290c:	ad 85       	ldd	r26, Y+13	; 0x0d
    290e:	be 85       	ldd	r27, Y+14	; 0x0e
    2910:	bf 93       	push	r27
    2912:	af 93       	push	r26
    2914:	9f 93       	push	r25
    2916:	8f 93       	push	r24
    2918:	2b 89       	ldd	r18, Y+19	; 0x13
    291a:	3c 89       	ldd	r19, Y+20	; 0x14
    291c:	4d 89       	ldd	r20, Y+21	; 0x15
    291e:	5e 89       	ldd	r21, Y+22	; 0x16
    2920:	6f 85       	ldd	r22, Y+15	; 0x0f
    2922:	78 89       	ldd	r23, Y+16	; 0x10
    2924:	89 89       	ldd	r24, Y+17	; 0x11
    2926:	9a 89       	ldd	r25, Y+18	; 0x12
    2928:	0e 94 51 17 	call	0x2ea2 <__divsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	bf 93       	push	r27
    2932:	af 93       	push	r26
    2934:	9f 93       	push	r25
    2936:	8f 93       	push	r24
    2938:	86 ee       	ldi	r24, 0xE6	; 230
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	9f 93       	push	r25
    293e:	8f 93       	push	r24
    2940:	0e 94 b0 06 	call	0xd60 <lcd>
    2944:	8d b7       	in	r24, 0x3d	; 61
    2946:	9e b7       	in	r25, 0x3e	; 62
    2948:	0a 96       	adiw	r24, 0x0a	; 10
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	9e bf       	out	0x3e, r25	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	8d bf       	out	0x3d, r24	; 61

				if(((float)kkia/j) < (float)kdefault){
    2954:	2b 89       	ldd	r18, Y+19	; 0x13
    2956:	3c 89       	ldd	r19, Y+20	; 0x14
    2958:	4d 89       	ldd	r20, Y+21	; 0x15
    295a:	5e 89       	ldd	r21, Y+22	; 0x16
    295c:	6f 85       	ldd	r22, Y+15	; 0x0f
    295e:	78 89       	ldd	r23, Y+16	; 0x10
    2960:	89 89       	ldd	r24, Y+17	; 0x11
    2962:	9a 89       	ldd	r25, Y+18	; 0x12
    2964:	0e 94 51 17 	call	0x2ea2 <__divsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	2b 85       	ldd	r18, Y+11	; 0x0b
    296e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2970:	4d 85       	ldd	r20, Y+13	; 0x0d
    2972:	5e 85       	ldd	r21, Y+14	; 0x0e
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 4d 18 	call	0x309a <__eqsf2>
    297c:	88 23       	and	r24, r24
    297e:	0c f0       	brlt	.+2      	; 0x2982 <firstchksoil+0x1e2>
    2980:	27 c0       	rjmp	.+78     	; 0x29d0 <firstchksoil+0x230>

					ksoil = ar(ANALOG_REG_PORT,10,500);
    2982:	44 ef       	ldi	r20, 0xF4	; 244
    2984:	51 e0       	ldi	r21, 0x01	; 1
    2986:	6a e0       	ldi	r22, 0x0A	; 10
    2988:	70 e0       	ldi	r23, 0x00	; 0
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	0e 94 7a 0f 	call	0x1ef4 <ar>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	8b 83       	std	Y+3, r24	; 0x03
    2998:	9c 83       	std	Y+4, r25	; 0x04
    299a:	ad 83       	std	Y+5, r26	; 0x05
    299c:	be 83       	std	Y+6, r27	; 0x06
					lcd("#cSoil is wet?");
    299e:	85 e3       	ldi	r24, 0x35	; 53
    29a0:	92 e0       	ldi	r25, 0x02	; 2
    29a2:	9f 93       	push	r25
    29a4:	8f 93       	push	r24
    29a6:	0e 94 b0 06 	call	0xd60 <lcd>
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
					sleep(3000);
    29ae:	88 eb       	ldi	r24, 0xB8	; 184
    29b0:	9b e0       	ldi	r25, 0x0B	; 11
    29b2:	0e 94 6f 00 	call	0xde <sleep>
					DELAYFUNC(DELAYPORT,0);
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	0e 94 3d 03 	call	0x67a <out_d>
					return ksoil;					
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	9c 81       	ldd	r25, Y+4	; 0x04
    29c2:	ad 81       	ldd	r26, Y+5	; 0x05
    29c4:	be 81       	ldd	r27, Y+6	; 0x06
    29c6:	8f 8b       	std	Y+23, r24	; 0x17
    29c8:	98 8f       	std	Y+24, r25	; 0x18
    29ca:	a9 8f       	std	Y+25, r26	; 0x19
    29cc:	ba 8f       	std	Y+26, r27	; 0x1a
    29ce:	2d c0       	rjmp	.+90     	; 0x2a2a <firstchksoil+0x28a>
				}
			j++;									
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e8       	ldi	r20, 0x80	; 128
    29d6:	5f e3       	ldi	r21, 0x3F	; 63
    29d8:	6b 89       	ldd	r22, Y+19	; 0x13
    29da:	7c 89       	ldd	r23, Y+20	; 0x14
    29dc:	8d 89       	ldd	r24, Y+21	; 0x15
    29de:	9e 89       	ldd	r25, Y+22	; 0x16
    29e0:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	8b 8b       	std	Y+19, r24	; 0x13
    29ea:	9c 8b       	std	Y+20, r25	; 0x14
    29ec:	ad 8b       	std	Y+21, r26	; 0x15
    29ee:	be 8b       	std	Y+22, r27	; 0x16
    29f0:	71 cf       	rjmp	.-286    	; 0x28d4 <firstchksoil+0x134>
				
			}
			

		}

		else{
			SOUNDFUNC(SOUNDPORT,3500,2000);
    29f2:	40 ed       	ldi	r20, 0xD0	; 208
    29f4:	57 e0       	ldi	r21, 0x07	; 7
    29f6:	6c ea       	ldi	r22, 0xAC	; 172
    29f8:	7d e0       	ldi	r23, 0x0D	; 13
    29fa:	86 e0       	ldi	r24, 0x06	; 6
    29fc:	0e 94 b8 04 	call	0x970 <sound_d>
			lcd("#cWetar for Soil conditioning");
    2a00:	84 e4       	ldi	r24, 0x44	; 68
    2a02:	92 e0       	ldi	r25, 0x02	; 2
    2a04:	9f 93       	push	r25
    2a06:	8f 93       	push	r24
    2a08:	0e 94 b0 06 	call	0xd60 <lcd>
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
			DELAYFUNC(DELAYPORT,1);
    2a10:	61 e0       	ldi	r22, 0x01	; 1
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	0e 94 3d 03 	call	0x67a <out_d>
			sleep(5000);  //First water
    2a18:	88 e8       	ldi	r24, 0x88	; 136
    2a1a:	93 e1       	ldi	r25, 0x13	; 19
    2a1c:	0e 94 6f 00 	call	0xde <sleep>
			i=1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	ed ce       	rjmp	.-550    	; 0x2804 <firstchksoil+0x64>
		}
	}


	//Use to (float)k = firstchksoil();  ; out of loop
}//Complete
    2a2a:	6f 89       	ldd	r22, Y+23	; 0x17
    2a2c:	78 8d       	ldd	r23, Y+24	; 0x18
    2a2e:	89 8d       	ldd	r24, Y+25	; 0x19
    2a30:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a32:	6a 96       	adiw	r28, 0x1a	; 26
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	08 95       	ret

00002a44 <water>:

void water(){
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	24 97       	sbiw	r28, 0x04	; 4
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
	SOUNDFUNC(SOUNDPORT,3500,200);
    2a60:	48 ec       	ldi	r20, 0xC8	; 200
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	6c ea       	ldi	r22, 0xAC	; 172
    2a66:	7d e0       	ldi	r23, 0x0D	; 13
    2a68:	86 e0       	ldi	r24, 0x06	; 6
    2a6a:	0e 94 b8 04 	call	0x970 <sound_d>
	DELAYFUNC(DELAYPORT,1);
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	0e 94 3d 03 	call	0x67a <out_d>
	sleepMin(persen(ANALOG_VOL,1023,100));
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	0e 94 62 08 	call	0x10c4 <analog>
    2a7c:	8c 01       	movw	r16, r24
    2a7e:	c8 01       	movw	r24, r16
    2a80:	aa 27       	eor	r26, r26
    2a82:	97 fd       	sbrc	r25, 7
    2a84:	a0 95       	com	r26
    2a86:	ba 2f       	mov	r27, r26
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 43 18 	call	0x3086 <__floatsisf>
    2a90:	69 83       	std	Y+1, r22	; 0x01
    2a92:	7a 83       	std	Y+2, r23	; 0x02
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	9c 83       	std	Y+4, r25	; 0x04
    2a98:	11 23       	and	r17, r17
    2a9a:	84 f4       	brge	.+32     	; 0x2abc <water+0x78>
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e8       	ldi	r20, 0x80	; 128
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	69 81       	ldd	r22, Y+1	; 0x01
    2aa6:	7a 81       	ldd	r23, Y+2	; 0x02
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	89 83       	std	Y+1, r24	; 0x01
    2ab6:	9a 83       	std	Y+2, r25	; 0x02
    2ab8:	ab 83       	std	Y+3, r26	; 0x03
    2aba:	bc 83       	std	Y+4, r27	; 0x04
    2abc:	0f 2e       	mov	r0, r31
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	ef 2e       	mov	r14, r31
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	ff 2e       	mov	r15, r31
    2ac6:	f8 ec       	ldi	r31, 0xC8	; 200
    2ac8:	0f 2f       	mov	r16, r31
    2aca:	f2 e4       	ldi	r31, 0x42	; 66
    2acc:	1f 2f       	mov	r17, r31
    2ace:	f0 2d       	mov	r31, r0
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 ec       	ldi	r19, 0xC0	; 192
    2ad4:	4f e7       	ldi	r20, 0x7F	; 127
    2ad6:	54 e4       	ldi	r21, 0x44	; 68
    2ad8:	69 81       	ldd	r22, Y+1	; 0x01
    2ada:	7a 81       	ldd	r23, Y+2	; 0x02
    2adc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ade:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae0:	0e 94 83 10 	call	0x2106 <persen>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 26 18 	call	0x304c <__fixsfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	0e 94 4e 10 	call	0x209c <sleepMin>
	SOUNDFUNC(SOUNDPORT,2000,1000);
    2af8:	48 ee       	ldi	r20, 0xE8	; 232
    2afa:	53 e0       	ldi	r21, 0x03	; 3
    2afc:	60 ed       	ldi	r22, 0xD0	; 208
    2afe:	77 e0       	ldi	r23, 0x07	; 7
    2b00:	86 e0       	ldi	r24, 0x06	; 6
    2b02:	0e 94 b8 04 	call	0x970 <sound_d>
    2b06:	24 96       	adiw	r28, 0x04	; 4
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	08 95       	ret

00002b20 <chkwetfordelay>:

}

void chkwetfordelay(unsigned int watertime,unsigned int ksoil){
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	2c 97       	sbiw	r28, 0x0c	; 12
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	9a 83       	std	Y+2, r25	; 0x02
    2b36:	89 83       	std	Y+1, r24	; 0x01
    2b38:	7c 83       	std	Y+4, r23	; 0x04
    2b3a:	6b 83       	std	Y+3, r22	; 0x03
	if(ksoil < FLOAT_K_DEFAULT){
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	aa 27       	eor	r26, r26
    2b42:	97 fd       	sbrc	r25, 7
    2b44:	a0 95       	com	r26
    2b46:	ba 2f       	mov	r27, r26
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 43 18 	call	0x3086 <__floatsisf>
    2b50:	6d 83       	std	Y+5, r22	; 0x05
    2b52:	7e 83       	std	Y+6, r23	; 0x06
    2b54:	8f 83       	std	Y+7, r24	; 0x07
    2b56:	98 87       	std	Y+8, r25	; 0x08
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5c:	99 23       	and	r25, r25
    2b5e:	84 f4       	brge	.+32     	; 0x2b80 <chkwetfordelay+0x60>
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e8       	ldi	r20, 0x80	; 128
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	6d 81       	ldd	r22, Y+5	; 0x05
    2b6a:	7e 81       	ldd	r23, Y+6	; 0x06
    2b6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b6e:	98 85       	ldd	r25, Y+8	; 0x08
    2b70:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8d 83       	std	Y+5, r24	; 0x05
    2b7a:	9e 83       	std	Y+6, r25	; 0x06
    2b7c:	af 83       	std	Y+7, r26	; 0x07
    2b7e:	b8 87       	std	Y+8, r27	; 0x08
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e8       	ldi	r19, 0x80	; 128
    2b84:	44 e5       	ldi	r20, 0x54	; 84
    2b86:	54 e4       	ldi	r21, 0x44	; 68
    2b88:	6d 81       	ldd	r22, Y+5	; 0x05
    2b8a:	7e 81       	ldd	r23, Y+6	; 0x06
    2b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b8e:	98 85       	ldd	r25, Y+8	; 0x08
    2b90:	0e 94 4d 18 	call	0x309a <__eqsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	0c f0       	brlt	.+2      	; 0x2b9a <chkwetfordelay+0x7a>
    2b98:	2e c0       	rjmp	.+92     	; 0x2bf6 <chkwetfordelay+0xd6>
		DELAYFUNC(DELAYPORT,0);
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	0e 94 3d 03 	call	0x67a <out_d>
		lcd("See You In %d",TIME_LOOP_CHK_MIN);
    2ba2:	8e e1       	ldi	r24, 0x1E	; 30
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	9f 93       	push	r25
    2ba8:	8f 93       	push	r24
    2baa:	82 e6       	ldi	r24, 0x62	; 98
    2bac:	92 e0       	ldi	r25, 0x02	; 2
    2bae:	9f 93       	push	r25
    2bb0:	8f 93       	push	r24
    2bb2:	0e 94 b0 06 	call	0xd60 <lcd>
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
		sleep(3000);
    2bbe:	88 eb       	ldi	r24, 0xB8	; 184
    2bc0:	9b e0       	ldi	r25, 0x0B	; 11
    2bc2:	0e 94 6f 00 	call	0xde <sleep>
		lcd("#c                            ");
    2bc6:	80 e7       	ldi	r24, 0x70	; 112
    2bc8:	92 e0       	ldi	r25, 0x02	; 2
    2bca:	9f 93       	push	r25
    2bcc:	8f 93       	push	r24
    2bce:	0e 94 b0 06 	call	0xd60 <lcd>
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
		sleep(10);
    2bd6:	8a e0       	ldi	r24, 0x0A	; 10
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 6f 00 	call	0xde <sleep>
		SOUNDFUNC(SOUNDPORT,3500,200);		
    2bde:	48 ec       	ldi	r20, 0xC8	; 200
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	6c ea       	ldi	r22, 0xAC	; 172
    2be4:	7d e0       	ldi	r23, 0x0D	; 13
    2be6:	86 e0       	ldi	r24, 0x06	; 6
    2be8:	0e 94 b8 04 	call	0x970 <sound_d>
		sleepMin(TIME_LOOP_CHK_MIN);
    2bec:	8e e1       	ldi	r24, 0x1E	; 30
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	0e 94 4e 10 	call	0x209c <sleepMin>
    2bf4:	5a c0       	rjmp	.+180    	; 0x2caa <chkwetfordelay+0x18a>
	}
	else if(ksoil >= FLOAT_K_DEFAULT){
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	aa 27       	eor	r26, r26
    2bfc:	97 fd       	sbrc	r25, 7
    2bfe:	a0 95       	com	r26
    2c00:	ba 2f       	mov	r27, r26
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 43 18 	call	0x3086 <__floatsisf>
    2c0a:	69 87       	std	Y+9, r22	; 0x09
    2c0c:	7a 87       	std	Y+10, r23	; 0x0a
    2c0e:	8b 87       	std	Y+11, r24	; 0x0b
    2c10:	9c 87       	std	Y+12, r25	; 0x0c
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	9c 81       	ldd	r25, Y+4	; 0x04
    2c16:	99 23       	and	r25, r25
    2c18:	84 f4       	brge	.+32     	; 0x2c3a <chkwetfordelay+0x11a>
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e8       	ldi	r20, 0x80	; 128
    2c20:	57 e4       	ldi	r21, 0x47	; 71
    2c22:	69 85       	ldd	r22, Y+9	; 0x09
    2c24:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c26:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c28:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c2a:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	89 87       	std	Y+9, r24	; 0x09
    2c34:	9a 87       	std	Y+10, r25	; 0x0a
    2c36:	ab 87       	std	Y+11, r26	; 0x0b
    2c38:	bc 87       	std	Y+12, r27	; 0x0c
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e8       	ldi	r19, 0x80	; 128
    2c3e:	44 e5       	ldi	r20, 0x54	; 84
    2c40:	54 e4       	ldi	r21, 0x44	; 68
    2c42:	69 85       	ldd	r22, Y+9	; 0x09
    2c44:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c46:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c48:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c4a:	0e 94 50 18 	call	0x30a0 <__gesf2>
    2c4e:	88 23       	and	r24, r24
    2c50:	0c f4       	brge	.+2      	; 0x2c54 <chkwetfordelay+0x134>
    2c52:	14 c0       	rjmp	.+40     	; 0x2c7c <chkwetfordelay+0x15c>
		SOUNDFUNC(SOUNDPORT,3500,3000);
    2c54:	48 eb       	ldi	r20, 0xB8	; 184
    2c56:	5b e0       	ldi	r21, 0x0B	; 11
    2c58:	6c ea       	ldi	r22, 0xAC	; 172
    2c5a:	7d e0       	ldi	r23, 0x0D	; 13
    2c5c:	86 e0       	ldi	r24, 0x06	; 6
    2c5e:	0e 94 b8 04 	call	0x970 <sound_d>
		DELAYFUNC(DELAYPORT,1);
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	0e 94 3d 03 	call	0x67a <out_d>
		sleepMin(watertime);
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6e:	0e 94 4e 10 	call	0x209c <sleepMin>
		DELAYFUNC(DELAYPORT,0);
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	0e 94 3d 03 	call	0x67a <out_d>
    2c7a:	17 c0       	rjmp	.+46     	; 0x2caa <chkwetfordelay+0x18a>
		
	}
	//New at 26/7/56
	else if (ksoil < 1){
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	00 97       	sbiw	r24, 0x00	; 0
    2c82:	99 f4       	brne	.+38     	; 0x2caa <chkwetfordelay+0x18a>
		SOUNDFUNC(SOUNDPORT,3500,2000);
    2c84:	40 ed       	ldi	r20, 0xD0	; 208
    2c86:	57 e0       	ldi	r21, 0x07	; 7
    2c88:	6c ea       	ldi	r22, 0xAC	; 172
    2c8a:	7d e0       	ldi	r23, 0x0D	; 13
    2c8c:	86 e0       	ldi	r24, 0x06	; 6
    2c8e:	0e 94 b8 04 	call	0x970 <sound_d>
		DELAYFUNC(DELAYPORT,1);
    2c92:	61 e0       	ldi	r22, 0x01	; 1
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	0e 94 3d 03 	call	0x67a <out_d>
		sleepMin(1);
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 4e 10 	call	0x209c <sleepMin>
		DELAYFUNC(DELAYPORT,0);
    2ca2:	60 e0       	ldi	r22, 0x00	; 0
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	0e 94 3d 03 	call	0x67a <out_d>
    2caa:	2c 96       	adiw	r28, 0x0c	; 12
    2cac:	0f b6       	in	r0, 0x3f	; 63
    2cae:	f8 94       	cli
    2cb0:	de bf       	out	0x3e, r29	; 62
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	cd bf       	out	0x3d, r28	; 61
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	08 95       	ret

00002cbc <main>:
	}

}
 




void main(){
    2cbc:	c9 e5       	ldi	r28, 0x59	; 89
    2cbe:	d4 e0       	ldi	r29, 0x04	; 4
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	cd bf       	out	0x3d, r28	; 61
	int watertime ;
	float ksoil;


//Reset All Setting
resetblock();
    2cc4:	0e 94 eb 11 	call	0x23d6 <resetblock>

//Welcome screen
welcome();
    2cc8:	0e 94 bd 11 	call	0x237a <welcome>

//Chack Stick in Soil And User Confirm
lcd("Step[1/3]#nInstall in soil");
    2ccc:	8f e8       	ldi	r24, 0x8F	; 143
    2cce:	92 e0       	ldi	r25, 0x02	; 2
    2cd0:	9f 93       	push	r25
    2cd2:	8f 93       	push	r24
    2cd4:	0e 94 b0 06 	call	0xd60 <lcd>
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
sleep(1000);
    2cdc:	88 ee       	ldi	r24, 0xE8	; 232
    2cde:	93 e0       	ldi	r25, 0x03	; 3
    2ce0:	0e 94 6f 00 	call	0xde <sleep>
chkstickinsoil();
    2ce4:	0e 94 1d 12 	call	0x243a <chkstickinsoil>

//Set time
lcd("Step[2/3]#n::Set Time");
    2ce8:	8a ea       	ldi	r24, 0xAA	; 170
    2cea:	92 e0       	ldi	r25, 0x02	; 2
    2cec:	9f 93       	push	r25
    2cee:	8f 93       	push	r24
    2cf0:	0e 94 b0 06 	call	0xd60 <lcd>
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
sleep(1000);
    2cf8:	88 ee       	ldi	r24, 0xE8	; 232
    2cfa:	93 e0       	ldi	r25, 0x03	; 3
    2cfc:	0e 94 6f 00 	call	0xde <sleep>
watertime = chktime();
    2d00:	0e 94 a4 12 	call	0x2548 <chktime>
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	89 83       	std	Y+1, r24	; 0x01

//Fisrt Chack KSoil ; out of loop
lcd("Step[3/3]#n::Find Ksoil");
    2d08:	80 ec       	ldi	r24, 0xC0	; 192
    2d0a:	92 e0       	ldi	r25, 0x02	; 2
    2d0c:	9f 93       	push	r25
    2d0e:	8f 93       	push	r24
    2d10:	0e 94 b0 06 	call	0xd60 <lcd>
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
sleep(1000);
    2d18:	88 ee       	ldi	r24, 0xE8	; 232
    2d1a:	93 e0       	ldi	r25, 0x03	; 3
    2d1c:	0e 94 6f 00 	call	0xde <sleep>
ksoil = firstchksoil();
    2d20:	0e 94 d0 13 	call	0x27a0 <firstchksoil>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	8b 83       	std	Y+3, r24	; 0x03
    2d2a:	9c 83       	std	Y+4, r25	; 0x04
    2d2c:	ad 83       	std	Y+5, r26	; 0x05
    2d2e:	be 83       	std	Y+6, r27	; 0x06

lcd("#cStep Succ#nEnjoy!!");
    2d30:	88 ed       	ldi	r24, 0xD8	; 216
    2d32:	92 e0       	ldi	r25, 0x02	; 2
    2d34:	9f 93       	push	r25
    2d36:	8f 93       	push	r24
    2d38:	0e 94 b0 06 	call	0xd60 <lcd>
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
sleep(2000);
    2d40:	80 ed       	ldi	r24, 0xD0	; 208
    2d42:	97 e0       	ldi	r25, 0x07	; 7
    2d44:	0e 94 6f 00 	call	0xde <sleep>
SOUNDFUNC(SOUNDPORT,3500,500);
    2d48:	44 ef       	ldi	r20, 0xF4	; 244
    2d4a:	51 e0       	ldi	r21, 0x01	; 1
    2d4c:	6c ea       	ldi	r22, 0xAC	; 172
    2d4e:	7d e0       	ldi	r23, 0x0D	; 13
    2d50:	86 e0       	ldi	r24, 0x06	; 6
    2d52:	0e 94 b8 04 	call	0x970 <sound_d>
DELAYFUNC(DELAYPORT,0);
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	0e 94 3d 03 	call	0x67a <out_d>

//chack wet for delay time
chkwetfordelay(watertime,ksoil);
    2d5e:	6b 81       	ldd	r22, Y+3	; 0x03
    2d60:	7c 81       	ldd	r23, Y+4	; 0x04
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	0e 94 26 18 	call	0x304c <__fixsfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	bc 01       	movw	r22, r24
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	0e 94 90 15 	call	0x2b20 <chkwetfordelay>

//Finish Loop
while(1){
	chkwetfordelay(watertime,ksoil);
    2d78:	6b 81       	ldd	r22, Y+3	; 0x03
    2d7a:	7c 81       	ldd	r23, Y+4	; 0x04
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	0e 94 26 18 	call	0x304c <__fixsfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	bc 01       	movw	r22, r24
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8e:	0e 94 90 15 	call	0x2b20 <chkwetfordelay>
    2d92:	f2 cf       	rjmp	.-28     	; 0x2d78 <main+0xbc>

00002d94 <ltoa>:
    2d94:	fa 01       	movw	r30, r20
    2d96:	cf 93       	push	r28
    2d98:	ff 93       	push	r31
    2d9a:	ef 93       	push	r30
    2d9c:	22 30       	cpi	r18, 0x02	; 2
    2d9e:	44 f1       	brlt	.+80     	; 0x2df0 <ltoa+0x5c>
    2da0:	25 32       	cpi	r18, 0x25	; 37
    2da2:	34 f5       	brge	.+76     	; 0x2df0 <ltoa+0x5c>
    2da4:	c2 2f       	mov	r28, r18
    2da6:	e8 94       	clt
    2da8:	ca 30       	cpi	r28, 0x0A	; 10
    2daa:	49 f4       	brne	.+18     	; 0x2dbe <ltoa+0x2a>
    2dac:	97 fb       	bst	r25, 7
    2dae:	3e f4       	brtc	.+14     	; 0x2dbe <ltoa+0x2a>
    2db0:	90 95       	com	r25
    2db2:	80 95       	com	r24
    2db4:	70 95       	com	r23
    2db6:	61 95       	neg	r22
    2db8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dba:	8f 4f       	sbci	r24, 0xFF	; 255
    2dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dbe:	2c 2f       	mov	r18, r28
    2dc0:	33 27       	eor	r19, r19
    2dc2:	44 27       	eor	r20, r20
    2dc4:	55 27       	eor	r21, r21
    2dc6:	ff 93       	push	r31
    2dc8:	ef 93       	push	r30
    2dca:	0e 94 6e 1a 	call	0x34dc <__udivmodsi4>
    2dce:	ef 91       	pop	r30
    2dd0:	ff 91       	pop	r31
    2dd2:	60 5d       	subi	r22, 0xD0	; 208
    2dd4:	6a 33       	cpi	r22, 0x3A	; 58
    2dd6:	0c f0       	brlt	.+2      	; 0x2dda <ltoa+0x46>
    2dd8:	69 5d       	subi	r22, 0xD9	; 217
    2dda:	61 93       	st	Z+, r22
    2ddc:	b9 01       	movw	r22, r18
    2dde:	ca 01       	movw	r24, r20
    2de0:	60 50       	subi	r22, 0x00	; 0
    2de2:	70 40       	sbci	r23, 0x00	; 0
    2de4:	80 40       	sbci	r24, 0x00	; 0
    2de6:	90 40       	sbci	r25, 0x00	; 0
    2de8:	51 f7       	brne	.-44     	; 0x2dbe <ltoa+0x2a>
    2dea:	16 f4       	brtc	.+4      	; 0x2df0 <ltoa+0x5c>
    2dec:	cd e2       	ldi	r28, 0x2D	; 45
    2dee:	c1 93       	st	Z+, r28
    2df0:	10 82       	st	Z, r1
    2df2:	8f 91       	pop	r24
    2df4:	9f 91       	pop	r25
    2df6:	cf 91       	pop	r28
    2df8:	0c 94 fe 16 	jmp	0x2dfc <strrev>

00002dfc <strrev>:
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	fc 01       	movw	r30, r24
    2e00:	01 90       	ld	r0, Z+
    2e02:	00 20       	and	r0, r0
    2e04:	e9 f7       	brne	.-6      	; 0x2e00 <strrev+0x4>
    2e06:	32 97       	sbiw	r30, 0x02	; 2
    2e08:	ae 17       	cp	r26, r30
    2e0a:	bf 07       	cpc	r27, r31
    2e0c:	30 f4       	brcc	.+12     	; 0x2e1a <strrev+0x1e>
    2e0e:	7c 91       	ld	r23, X
    2e10:	60 81       	ld	r22, Z
    2e12:	70 83       	st	Z, r23
    2e14:	31 97       	sbiw	r30, 0x01	; 1
    2e16:	6d 93       	st	X+, r22
    2e18:	f7 cf       	rjmp	.-18     	; 0x2e08 <strrev+0xc>
    2e1a:	08 95       	ret

00002e1c <__subsf3>:
    2e1c:	50 58       	subi	r21, 0x80	; 128

00002e1e <__addsf3>:
    2e1e:	19 2e       	mov	r1, r25
    2e20:	7e d1       	rcall	.+764    	; 0x311e <__fp_split3>
    2e22:	01 d0       	rcall	.+2      	; 0x2e26 <__addsf3x>
    2e24:	61 c1       	rjmp	.+706    	; 0x30e8 <__fp_merge>

00002e26 <__addsf3x>:
    2e26:	ba 17       	cp	r27, r26
    2e28:	62 07       	cpc	r22, r18
    2e2a:	73 07       	cpc	r23, r19
    2e2c:	84 07       	cpc	r24, r20
    2e2e:	95 07       	cpc	r25, r21
    2e30:	b1 f1       	breq	.+108    	; 0x2e9e <__addsf3x+0x78>
    2e32:	88 f4       	brcc	.+34     	; 0x2e56 <__addsf3x+0x30>
    2e34:	0e f4       	brtc	.+2      	; 0x2e38 <__addsf3x+0x12>
    2e36:	10 94       	com	r1
    2e38:	0b 2e       	mov	r0, r27
    2e3a:	ba 2f       	mov	r27, r26
    2e3c:	a0 2d       	mov	r26, r0
    2e3e:	06 2e       	mov	r0, r22
    2e40:	62 2f       	mov	r22, r18
    2e42:	20 2d       	mov	r18, r0
    2e44:	07 2e       	mov	r0, r23
    2e46:	73 2f       	mov	r23, r19
    2e48:	30 2d       	mov	r19, r0
    2e4a:	08 2e       	mov	r0, r24
    2e4c:	84 2f       	mov	r24, r20
    2e4e:	40 2d       	mov	r20, r0
    2e50:	09 2e       	mov	r0, r25
    2e52:	95 2f       	mov	r25, r21
    2e54:	50 2d       	mov	r21, r0
    2e56:	ff 27       	eor	r31, r31
    2e58:	55 23       	and	r21, r21
    2e5a:	b9 f0       	breq	.+46     	; 0x2e8a <__addsf3x+0x64>
    2e5c:	59 1b       	sub	r21, r25
    2e5e:	49 f0       	breq	.+18     	; 0x2e72 <__addsf3x+0x4c>
    2e60:	57 3e       	cpi	r21, 0xE7	; 231
    2e62:	98 f0       	brcs	.+38     	; 0x2e8a <__addsf3x+0x64>
    2e64:	46 95       	lsr	r20
    2e66:	37 95       	ror	r19
    2e68:	27 95       	ror	r18
    2e6a:	a7 95       	ror	r26
    2e6c:	f0 40       	sbci	r31, 0x00	; 0
    2e6e:	53 95       	inc	r21
    2e70:	c9 f7       	brne	.-14     	; 0x2e64 <__addsf3x+0x3e>
    2e72:	76 f0       	brts	.+28     	; 0x2e90 <__addsf3x+0x6a>
    2e74:	ba 0f       	add	r27, r26
    2e76:	62 1f       	adc	r22, r18
    2e78:	73 1f       	adc	r23, r19
    2e7a:	84 1f       	adc	r24, r20
    2e7c:	30 f4       	brcc	.+12     	; 0x2e8a <__addsf3x+0x64>
    2e7e:	87 95       	ror	r24
    2e80:	77 95       	ror	r23
    2e82:	67 95       	ror	r22
    2e84:	b7 95       	ror	r27
    2e86:	f0 40       	sbci	r31, 0x00	; 0
    2e88:	93 95       	inc	r25
    2e8a:	17 fa       	bst	r1, 7
    2e8c:	0f 2e       	mov	r0, r31
    2e8e:	08 95       	ret
    2e90:	bf 1b       	sub	r27, r31
    2e92:	bb 27       	eor	r27, r27
    2e94:	ba 0b       	sbc	r27, r26
    2e96:	62 0b       	sbc	r22, r18
    2e98:	73 0b       	sbc	r23, r19
    2e9a:	84 0b       	sbc	r24, r20
    2e9c:	f6 cf       	rjmp	.-20     	; 0x2e8a <__addsf3x+0x64>
    2e9e:	de f6       	brtc	.-74     	; 0x2e56 <__addsf3x+0x30>
    2ea0:	6a c1       	rjmp	.+724    	; 0x3176 <__fp_zerox>

00002ea2 <__divsf3>:
    2ea2:	3d d1       	rcall	.+634    	; 0x311e <__fp_split3>
    2ea4:	01 d0       	rcall	.+2      	; 0x2ea8 <__divsf3x>
    2ea6:	20 c1       	rjmp	.+576    	; 0x30e8 <__fp_merge>

00002ea8 <__divsf3x>:
    2ea8:	55 23       	and	r21, r21
    2eaa:	59 f0       	breq	.+22     	; 0x2ec2 <__divsf3x+0x1a>
    2eac:	99 23       	and	r25, r25
    2eae:	69 f0       	breq	.+26     	; 0x2eca <__divsf3x+0x22>
    2eb0:	9f 57       	subi	r25, 0x7F	; 127
    2eb2:	5f 57       	subi	r21, 0x7F	; 127
    2eb4:	95 1b       	sub	r25, r21
    2eb6:	33 f4       	brvc	.+12     	; 0x2ec4 <__divsf3x+0x1c>
    2eb8:	42 f4       	brpl	.+16     	; 0x2eca <__divsf3x+0x22>
    2eba:	90 38       	cpi	r25, 0x80	; 128
    2ebc:	11 f4       	brne	.+4      	; 0x2ec2 <__divsf3x+0x1a>
    2ebe:	91 58       	subi	r25, 0x81	; 129
    2ec0:	05 c0       	rjmp	.+10     	; 0x2ecc <__divsf3x+0x24>
    2ec2:	2a c1       	rjmp	.+596    	; 0x3118 <__fp_nan>
    2ec4:	91 58       	subi	r25, 0x81	; 129
    2ec6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <__divsf3x+0x24>
    2eca:	55 c1       	rjmp	.+682    	; 0x3176 <__fp_zerox>
    2ecc:	bb 27       	eor	r27, r27
    2ece:	11 24       	eor	r1, r1
    2ed0:	62 17       	cp	r22, r18
    2ed2:	73 07       	cpc	r23, r19
    2ed4:	84 07       	cpc	r24, r20
    2ed6:	30 f4       	brcc	.+12     	; 0x2ee4 <__divsf3x+0x3c>
    2ed8:	66 0f       	add	r22, r22
    2eda:	77 1f       	adc	r23, r23
    2edc:	88 1f       	adc	r24, r24
    2ede:	bb 1f       	adc	r27, r27
    2ee0:	91 50       	subi	r25, 0x01	; 1
    2ee2:	98 f3       	brcs	.-26     	; 0x2eca <__divsf3x+0x22>
    2ee4:	11 d0       	rcall	.+34     	; 0x2f08 <__divsf3x+0x60>
    2ee6:	0f 92       	push	r0
    2ee8:	0f d0       	rcall	.+30     	; 0x2f08 <__divsf3x+0x60>
    2eea:	0f 92       	push	r0
    2eec:	0d d0       	rcall	.+26     	; 0x2f08 <__divsf3x+0x60>
    2eee:	a0 e8       	ldi	r26, 0x80	; 128
    2ef0:	26 17       	cp	r18, r22
    2ef2:	37 07       	cpc	r19, r23
    2ef4:	48 07       	cpc	r20, r24
    2ef6:	1b 06       	cpc	r1, r27
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <__divsf3x+0x54>
    2efa:	a0 48       	sbci	r26, 0x80	; 128
    2efc:	ba 2f       	mov	r27, r26
    2efe:	60 2d       	mov	r22, r0
    2f00:	7f 91       	pop	r23
    2f02:	8f 91       	pop	r24
    2f04:	00 24       	eor	r0, r0
    2f06:	08 95       	ret
    2f08:	a0 e8       	ldi	r26, 0x80	; 128
    2f0a:	00 24       	eor	r0, r0
    2f0c:	62 17       	cp	r22, r18
    2f0e:	73 07       	cpc	r23, r19
    2f10:	84 07       	cpc	r24, r20
    2f12:	b1 05       	cpc	r27, r1
    2f14:	28 f0       	brcs	.+10     	; 0x2f20 <__divsf3x+0x78>
    2f16:	62 1b       	sub	r22, r18
    2f18:	73 0b       	sbc	r23, r19
    2f1a:	84 0b       	sbc	r24, r20
    2f1c:	b1 09       	sbc	r27, r1
    2f1e:	0a 2a       	or	r0, r26
    2f20:	66 0f       	add	r22, r22
    2f22:	77 1f       	adc	r23, r23
    2f24:	88 1f       	adc	r24, r24
    2f26:	bb 1f       	adc	r27, r27
    2f28:	a6 95       	lsr	r26
    2f2a:	81 f7       	brne	.-32     	; 0x2f0c <__divsf3x+0x64>
    2f2c:	08 95       	ret

00002f2e <dtostrf>:
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	1f 93       	push	r17
    2f34:	0f 93       	push	r16
    2f36:	e8 01       	movw	r28, r16
    2f38:	8c 01       	movw	r16, r24
    2f3a:	00 0f       	add	r16, r16
    2f3c:	11 1f       	adc	r17, r17
    2f3e:	1f 3f       	cpi	r17, 0xFF	; 255
    2f40:	31 f4       	brne	.+12     	; 0x2f4e <dtostrf+0x20>
    2f42:	9e e4       	ldi	r25, 0x4E	; 78
    2f44:	81 e4       	ldi	r24, 0x41	; 65
    2f46:	99 93       	st	Y+, r25
    2f48:	89 93       	st	Y+, r24
    2f4a:	99 93       	st	Y+, r25
    2f4c:	78 c0       	rjmp	.+240    	; 0x303e <dtostrf+0x110>
    2f4e:	4f 93       	push	r20
    2f50:	99 23       	and	r25, r25
    2f52:	1a f4       	brpl	.+6      	; 0x2f5a <dtostrf+0x2c>
    2f54:	0d e2       	ldi	r16, 0x2D	; 45
    2f56:	09 93       	st	Y+, r16
    2f58:	9f 77       	andi	r25, 0x7F	; 127
    2f5a:	02 2f       	mov	r16, r18
    2f5c:	03 95       	inc	r16
    2f5e:	9f 93       	push	r25
    2f60:	8f 93       	push	r24
    2f62:	7f 93       	push	r23
    2f64:	6f 93       	push	r22
    2f66:	62 2f       	mov	r22, r18
    2f68:	77 27       	eor	r23, r23
    2f6a:	88 27       	eor	r24, r24
    2f6c:	99 27       	eor	r25, r25
    2f6e:	0e 94 43 18 	call	0x3086 <__floatsisf>
    2f72:	90 68       	ori	r25, 0x80	; 128
    2f74:	ac 01       	movw	r20, r24
    2f76:	9b 01       	movw	r18, r22
    2f78:	91 e4       	ldi	r25, 0x41	; 65
    2f7a:	80 e2       	ldi	r24, 0x20	; 32
    2f7c:	77 27       	eor	r23, r23
    2f7e:	66 27       	eor	r22, r22
    2f80:	86 d1       	rcall	.+780    	; 0x328e <pow>
    2f82:	5f ef       	ldi	r21, 0xFF	; 255
    2f84:	4f ef       	ldi	r20, 0xFF	; 255
    2f86:	f9 d0       	rcall	.+498    	; 0x317a <ldexp>
    2f88:	2f 91       	pop	r18
    2f8a:	3f 91       	pop	r19
    2f8c:	4f 91       	pop	r20
    2f8e:	5f 91       	pop	r21
    2f90:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    2f94:	10 2f       	mov	r17, r16
    2f96:	01 30       	cpi	r16, 0x01	; 1
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <dtostrf+0x6e>
    2f9a:	00 27       	eor	r16, r16
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	40 e2       	ldi	r20, 0x20	; 32
    2fa0:	33 27       	eor	r19, r19
    2fa2:	22 27       	eor	r18, r18
    2fa4:	62 17       	cp	r22, r18
    2fa6:	73 07       	cpc	r23, r19
    2fa8:	84 07       	cpc	r24, r20
    2faa:	95 07       	cpc	r25, r21
    2fac:	24 f0       	brlt	.+8      	; 0x2fb6 <dtostrf+0x88>
    2fae:	0e 94 51 17 	call	0x2ea2 <__divsf3>
    2fb2:	13 95       	inc	r17
    2fb4:	f3 cf       	rjmp	.-26     	; 0x2f9c <dtostrf+0x6e>
    2fb6:	9f 93       	push	r25
    2fb8:	8f 93       	push	r24
    2fba:	7f 93       	push	r23
    2fbc:	6f 93       	push	r22
    2fbe:	0e 94 26 18 	call	0x304c <__fixsfsi>
    2fc2:	56 2f       	mov	r21, r22
    2fc4:	50 5d       	subi	r21, 0xD0	; 208
    2fc6:	59 93       	st	Y+, r21
    2fc8:	0e 94 43 18 	call	0x3086 <__floatsisf>
    2fcc:	2f 91       	pop	r18
    2fce:	3f 91       	pop	r19
    2fd0:	4f 91       	pop	r20
    2fd2:	5f 91       	pop	r21
    2fd4:	0e 94 0e 17 	call	0x2e1c <__subsf3>
    2fd8:	90 58       	subi	r25, 0x80	; 128
    2fda:	51 e4       	ldi	r21, 0x41	; 65
    2fdc:	40 e2       	ldi	r20, 0x20	; 32
    2fde:	33 27       	eor	r19, r19
    2fe0:	22 27       	eor	r18, r18
    2fe2:	0e 94 ff 18 	call	0x31fe <__mulsf3>
    2fe6:	10 17       	cp	r17, r16
    2fe8:	11 f4       	brne	.+4      	; 0x2fee <dtostrf+0xc0>
    2fea:	5e e2       	ldi	r21, 0x2E	; 46
    2fec:	59 93       	st	Y+, r21
    2fee:	1a 95       	dec	r17
    2ff0:	11 f7       	brne	.-60     	; 0x2fb6 <dtostrf+0x88>
    2ff2:	18 82       	st	Y, r1
    2ff4:	5f 91       	pop	r21
    2ff6:	ef 91       	pop	r30
    2ff8:	ff 91       	pop	r31
    2ffa:	ff 93       	push	r31
    2ffc:	ef 93       	push	r30
    2ffe:	45 2f       	mov	r20, r21
    3000:	44 23       	and	r20, r20
    3002:	12 f4       	brpl	.+4      	; 0x3008 <dtostrf+0xda>
    3004:	40 95       	com	r20
    3006:	43 95       	inc	r20
    3008:	ce 01       	movw	r24, r28
    300a:	bf 01       	movw	r22, r30
    300c:	86 1b       	sub	r24, r22
    300e:	97 0b       	sbc	r25, r23
    3010:	14 2f       	mov	r17, r20
    3012:	18 1b       	sub	r17, r24
    3014:	90 e2       	ldi	r25, 0x20	; 32
    3016:	84 17       	cp	r24, r20
    3018:	9c f4       	brge	.+38     	; 0x3040 <dtostrf+0x112>
    301a:	55 23       	and	r21, r21
    301c:	6a f0       	brmi	.+26     	; 0x3038 <dtostrf+0x10a>
    301e:	21 96       	adiw	r28, 0x01	; 1
    3020:	31 96       	adiw	r30, 0x01	; 1
    3022:	e4 0f       	add	r30, r20
    3024:	f1 1d       	adc	r31, r1
    3026:	83 95       	inc	r24
    3028:	5a 91       	ld	r21, -Y
    302a:	52 93       	st	-Z, r21
    302c:	8a 95       	dec	r24
    302e:	e1 f7       	brne	.-8      	; 0x3028 <dtostrf+0xfa>
    3030:	92 93       	st	-Z, r25
    3032:	1a 95       	dec	r17
    3034:	e9 f7       	brne	.-6      	; 0x3030 <dtostrf+0x102>
    3036:	04 c0       	rjmp	.+8      	; 0x3040 <dtostrf+0x112>
    3038:	99 93       	st	Y+, r25
    303a:	1a 95       	dec	r17
    303c:	e9 f7       	brne	.-6      	; 0x3038 <dtostrf+0x10a>
    303e:	18 82       	st	Y, r1
    3040:	8f 91       	pop	r24
    3042:	9f 91       	pop	r25
    3044:	8c 01       	movw	r16, r24
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <__fixsfsi>:
    304c:	97 fb       	bst	r25, 7
    304e:	73 d0       	rcall	.+230    	; 0x3136 <__fp_split1>
    3050:	9f 37       	cpi	r25, 0x7F	; 127
    3052:	38 f0       	brcs	.+14     	; 0x3062 <__fixsfsi+0x16>
    3054:	fe e9       	ldi	r31, 0x9E	; 158
    3056:	f9 1b       	sub	r31, r25
    3058:	98 2f       	mov	r25, r24
    305a:	87 2f       	mov	r24, r23
    305c:	76 2f       	mov	r23, r22
    305e:	6b 2f       	mov	r22, r27
    3060:	05 c0       	rjmp	.+10     	; 0x306c <__fixsfsi+0x20>
    3062:	86 c0       	rjmp	.+268    	; 0x3170 <__fp_zero>
    3064:	96 95       	lsr	r25
    3066:	87 95       	ror	r24
    3068:	77 95       	ror	r23
    306a:	67 95       	ror	r22
    306c:	f1 50       	subi	r31, 0x01	; 1
    306e:	d0 f7       	brcc	.-12     	; 0x3064 <__fixsfsi+0x18>
    3070:	3e f4       	brtc	.+14     	; 0x3080 <__fp_lneg+0xe>

00003072 <__fp_lneg>:
    3072:	90 95       	com	r25
    3074:	80 95       	com	r24
    3076:	70 95       	com	r23
    3078:	61 95       	neg	r22
    307a:	7f 4f       	sbci	r23, 0xFF	; 255
    307c:	8f 4f       	sbci	r24, 0xFF	; 255
    307e:	9f 4f       	sbci	r25, 0xFF	; 255
    3080:	08 95       	ret

00003082 <__floatunssisf>:
    3082:	e8 94       	clt
    3084:	03 c0       	rjmp	.+6      	; 0x308c <__floatsisf+0x6>

00003086 <__floatsisf>:
    3086:	97 fb       	bst	r25, 7
    3088:	0e f4       	brtc	.+2      	; 0x308c <__floatsisf+0x6>
    308a:	f3 df       	rcall	.-26     	; 0x3072 <__fp_lneg>
    308c:	b6 2f       	mov	r27, r22
    308e:	67 2f       	mov	r22, r23
    3090:	78 2f       	mov	r23, r24
    3092:	89 2f       	mov	r24, r25
    3094:	9e e9       	ldi	r25, 0x9E	; 158
    3096:	00 24       	eor	r0, r0
    3098:	27 c0       	rjmp	.+78     	; 0x30e8 <__fp_merge>

0000309a <__eqsf2>:
    309a:	0e d0       	rcall	.+28     	; 0x30b8 <.fp_cmp>
    309c:	5e f0       	brts	.+22     	; 0x30b4 <__cmpsf2+0xe>
    309e:	04 c0       	rjmp	.+8      	; 0x30a8 <__cmpsf2+0x2>

000030a0 <__gesf2>:
    30a0:	0b d0       	rcall	.+22     	; 0x30b8 <.fp_cmp>
    30a2:	26 f0       	brts	.+8      	; 0x30ac <__cmpsf2+0x6>
    30a4:	01 c0       	rjmp	.+2      	; 0x30a8 <__cmpsf2+0x2>

000030a6 <__cmpsf2>:
    30a6:	08 d0       	rcall	.+16     	; 0x30b8 <.fp_cmp>
    30a8:	19 f0       	breq	.+6      	; 0x30b0 <__cmpsf2+0xa>
    30aa:	20 f4       	brcc	.+8      	; 0x30b4 <__cmpsf2+0xe>
    30ac:	8f ef       	ldi	r24, 0xFF	; 255
    30ae:	08 95       	ret
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	08 95       	ret
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	08 95       	ret

000030b8 <.fp_cmp>:
    30b8:	97 fb       	bst	r25, 7
    30ba:	09 2e       	mov	r0, r25
    30bc:	05 26       	eor	r0, r21
    30be:	00 f8       	bld	r0, 0
    30c0:	68 94       	set
    30c2:	30 d0       	rcall	.+96     	; 0x3124 <__fp_split2>
    30c4:	e8 94       	clt
    30c6:	07 fc       	sbrc	r0, 7
    30c8:	07 c0       	rjmp	.+14     	; 0x30d8 <.fp_cmp+0x20>
    30ca:	62 17       	cp	r22, r18
    30cc:	73 07       	cpc	r23, r19
    30ce:	84 07       	cpc	r24, r20
    30d0:	95 07       	cpc	r25, r21
    30d2:	21 f0       	breq	.+8      	; 0x30dc <.fp_cmp+0x24>
    30d4:	08 f4       	brcc	.+2      	; 0x30d8 <.fp_cmp+0x20>
    30d6:	00 94       	com	r0
    30d8:	07 94       	ror	r0
    30da:	98 94       	clz
    30dc:	08 95       	ret
    30de:	9a 95       	dec	r25
    30e0:	bb 0f       	add	r27, r27
    30e2:	66 1f       	adc	r22, r22
    30e4:	77 1f       	adc	r23, r23
    30e6:	88 1f       	adc	r24, r24

000030e8 <__fp_merge>:
    30e8:	11 24       	eor	r1, r1
    30ea:	99 23       	and	r25, r25
    30ec:	a1 f0       	breq	.+40     	; 0x3116 <__fp_merge+0x2e>
    30ee:	88 23       	and	r24, r24
    30f0:	b2 f7       	brpl	.-20     	; 0x30de <.fp_cmp+0x26>
    30f2:	9f 3f       	cpi	r25, 0xFF	; 255
    30f4:	59 f0       	breq	.+22     	; 0x310c <__fp_merge+0x24>
    30f6:	bb 0f       	add	r27, r27
    30f8:	48 f4       	brcc	.+18     	; 0x310c <__fp_merge+0x24>
    30fa:	21 f4       	brne	.+8      	; 0x3104 <__fp_merge+0x1c>
    30fc:	00 20       	and	r0, r0
    30fe:	11 f4       	brne	.+4      	; 0x3104 <__fp_merge+0x1c>
    3100:	60 ff       	sbrs	r22, 0
    3102:	04 c0       	rjmp	.+8      	; 0x310c <__fp_merge+0x24>
    3104:	6f 5f       	subi	r22, 0xFF	; 255
    3106:	7f 4f       	sbci	r23, 0xFF	; 255
    3108:	8f 4f       	sbci	r24, 0xFF	; 255
    310a:	9f 4f       	sbci	r25, 0xFF	; 255
    310c:	88 1f       	adc	r24, r24
    310e:	97 95       	ror	r25
    3110:	87 95       	ror	r24
    3112:	97 f9       	bld	r25, 7
    3114:	08 95       	ret
    3116:	2c c0       	rjmp	.+88     	; 0x3170 <__fp_zero>

00003118 <__fp_nan>:
    3118:	9f ef       	ldi	r25, 0xFF	; 255
    311a:	80 ec       	ldi	r24, 0xC0	; 192
    311c:	08 95       	ret

0000311e <__fp_split3>:
    311e:	05 2e       	mov	r0, r21
    3120:	09 26       	eor	r0, r25
    3122:	07 fa       	bst	r0, 7

00003124 <__fp_split2>:
    3124:	44 0f       	add	r20, r20
    3126:	55 1f       	adc	r21, r21
    3128:	5f 3f       	cpi	r21, 0xFF	; 255
    312a:	79 f0       	breq	.+30     	; 0x314a <__fp_split1+0x14>
    312c:	aa 27       	eor	r26, r26
    312e:	a5 17       	cp	r26, r21
    3130:	08 f0       	brcs	.+2      	; 0x3134 <__fp_split2+0x10>
    3132:	51 e0       	ldi	r21, 0x01	; 1
    3134:	47 95       	ror	r20

00003136 <__fp_split1>:
    3136:	88 0f       	add	r24, r24
    3138:	99 1f       	adc	r25, r25
    313a:	9f 3f       	cpi	r25, 0xFF	; 255
    313c:	31 f0       	breq	.+12     	; 0x314a <__fp_split1+0x14>
    313e:	bb 27       	eor	r27, r27
    3140:	b9 17       	cp	r27, r25
    3142:	08 f0       	brcs	.+2      	; 0x3146 <__fp_split1+0x10>
    3144:	91 e0       	ldi	r25, 0x01	; 1
    3146:	87 95       	ror	r24
    3148:	08 95       	ret
    314a:	9f 91       	pop	r25
    314c:	9f 91       	pop	r25
    314e:	11 24       	eor	r1, r1
    3150:	e3 cf       	rjmp	.-58     	; 0x3118 <__fp_nan>

00003152 <__fp_split_a>:
    3152:	97 fb       	bst	r25, 7
    3154:	88 0f       	add	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	9f 3f       	cpi	r25, 0xFF	; 255
    315a:	31 f0       	breq	.+12     	; 0x3168 <__fp_split_a+0x16>
    315c:	bb 27       	eor	r27, r27
    315e:	b9 17       	cp	r27, r25
    3160:	08 f0       	brcs	.+2      	; 0x3164 <__fp_split_a+0x12>
    3162:	91 e0       	ldi	r25, 0x01	; 1
    3164:	87 95       	ror	r24
    3166:	08 95       	ret
    3168:	9f 91       	pop	r25
    316a:	9f 91       	pop	r25
    316c:	11 24       	eor	r1, r1
    316e:	d4 cf       	rjmp	.-88     	; 0x3118 <__fp_nan>

00003170 <__fp_zero>:
    3170:	66 27       	eor	r22, r22
    3172:	77 27       	eor	r23, r23
    3174:	88 27       	eor	r24, r24

00003176 <__fp_zerox>:
    3176:	99 27       	eor	r25, r25
    3178:	08 95       	ret

0000317a <ldexp>:
    317a:	eb df       	rcall	.-42     	; 0x3152 <__fp_split_a>
    317c:	99 23       	and	r25, r25
    317e:	59 f0       	breq	.+22     	; 0x3196 <ldexp+0x1c>
    3180:	aa 27       	eor	r26, r26
    3182:	94 0f       	add	r25, r20
    3184:	a5 1f       	adc	r26, r21
    3186:	43 f0       	brvs	.+16     	; 0x3198 <ldexp+0x1e>
    3188:	32 f0       	brmi	.+12     	; 0x3196 <ldexp+0x1c>
    318a:	4f ef       	ldi	r20, 0xFF	; 255
    318c:	50 e0       	ldi	r21, 0x00	; 0
    318e:	94 17       	cp	r25, r20
    3190:	a5 07       	cpc	r26, r21
    3192:	14 f4       	brge	.+4      	; 0x3198 <ldexp+0x1e>
    3194:	a9 cf       	rjmp	.-174    	; 0x30e8 <__fp_merge>
    3196:	ec cf       	rjmp	.-40     	; 0x3170 <__fp_zero>
    3198:	0e f0       	brts	.+2      	; 0x319c <ldexp+0x22>
    319a:	13 c1       	rjmp	.+550    	; 0x33c2 <__fp_p_inf>
    319c:	0d c1       	rjmp	.+538    	; 0x33b8 <__fp_m_inf>

0000319e <modf>:
    319e:	d9 df       	rcall	.-78     	; 0x3152 <__fp_split_a>
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	d5 2f       	mov	r29, r21
    31a6:	c4 2f       	mov	r28, r20
    31a8:	55 27       	eor	r21, r21
    31aa:	44 27       	eor	r20, r20
    31ac:	33 27       	eor	r19, r19
    31ae:	22 27       	eor	r18, r18
    31b0:	99 23       	and	r25, r25
    31b2:	d9 f0       	breq	.+54     	; 0x31ea <modf+0x4c>
    31b4:	9f 37       	cpi	r25, 0x7F	; 127
    31b6:	c8 f0       	brcs	.+50     	; 0x31ea <modf+0x4c>
    31b8:	f9 2f       	mov	r31, r25
    31ba:	96 df       	rcall	.-212    	; 0x30e8 <__fp_merge>
    31bc:	59 2f       	mov	r21, r25
    31be:	48 2f       	mov	r20, r24
    31c0:	37 2f       	mov	r19, r23
    31c2:	26 2f       	mov	r18, r22
    31c4:	f6 39       	cpi	r31, 0x96	; 150
    31c6:	68 f4       	brcc	.+26     	; 0x31e2 <modf+0x44>
    31c8:	41 df       	rcall	.-382    	; 0x304c <__fixsfsi>
    31ca:	5d df       	rcall	.-326    	; 0x3086 <__floatsisf>
    31cc:	c0 30       	cpi	r28, 0x00	; 0
    31ce:	cd 07       	cpc	r28, r29
    31d0:	21 f0       	breq	.+8      	; 0x31da <modf+0x3c>
    31d2:	69 93       	st	Y+, r22
    31d4:	79 93       	st	Y+, r23
    31d6:	89 93       	st	Y+, r24
    31d8:	99 93       	st	Y+, r25
    31da:	90 58       	subi	r25, 0x80	; 128
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	1e ce       	rjmp	.-964    	; 0x2e1e <__addsf3>
    31e2:	99 27       	eor	r25, r25
    31e4:	88 27       	eor	r24, r24
    31e6:	77 27       	eor	r23, r23
    31e8:	66 27       	eor	r22, r22
    31ea:	c0 30       	cpi	r28, 0x00	; 0
    31ec:	cd 07       	cpc	r28, r29
    31ee:	21 f0       	breq	.+8      	; 0x31f8 <modf+0x5a>
    31f0:	29 93       	st	Y+, r18
    31f2:	39 93       	st	Y+, r19
    31f4:	49 93       	st	Y+, r20
    31f6:	59 93       	st	Y+, r21
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	75 cf       	rjmp	.-278    	; 0x30e8 <__fp_merge>

000031fe <__mulsf3>:
    31fe:	8f df       	rcall	.-226    	; 0x311e <__fp_split3>
    3200:	01 d0       	rcall	.+2      	; 0x3204 <__mulsf3x>
    3202:	72 cf       	rjmp	.-284    	; 0x30e8 <__fp_merge>

00003204 <__mulsf3x>:
    3204:	99 23       	and	r25, r25
    3206:	39 f0       	breq	.+14     	; 0x3216 <__mulsf3x+0x12>
    3208:	55 23       	and	r21, r21
    320a:	29 f0       	breq	.+10     	; 0x3216 <__mulsf3x+0x12>
    320c:	9f 57       	subi	r25, 0x7F	; 127
    320e:	5f 57       	subi	r21, 0x7F	; 127
    3210:	95 0f       	add	r25, r21
    3212:	13 f4       	brvc	.+4      	; 0x3218 <__mulsf3x+0x14>
    3214:	9a f1       	brmi	.+102    	; 0x327c <__mulsf3x+0x78>
    3216:	af cf       	rjmp	.-162    	; 0x3176 <__fp_zerox>
    3218:	91 58       	subi	r25, 0x81	; 129
    321a:	9f 3f       	cpi	r25, 0xFF	; 255
    321c:	e1 f3       	breq	.-8      	; 0x3216 <__mulsf3x+0x12>
    321e:	62 9f       	mul	r22, r18
    3220:	a1 2d       	mov	r26, r1
    3222:	0f 92       	push	r0
    3224:	bb 27       	eor	r27, r27
    3226:	63 9f       	mul	r22, r19
    3228:	a0 0d       	add	r26, r0
    322a:	b1 1d       	adc	r27, r1
    322c:	ee 27       	eor	r30, r30
    322e:	72 9f       	mul	r23, r18
    3230:	a0 0d       	add	r26, r0
    3232:	b1 1d       	adc	r27, r1
    3234:	ee 1f       	adc	r30, r30
    3236:	af 93       	push	r26
    3238:	aa 27       	eor	r26, r26
    323a:	64 9f       	mul	r22, r20
    323c:	b0 0d       	add	r27, r0
    323e:	e1 1d       	adc	r30, r1
    3240:	73 9f       	mul	r23, r19
    3242:	b0 0d       	add	r27, r0
    3244:	e1 1d       	adc	r30, r1
    3246:	aa 1f       	adc	r26, r26
    3248:	66 27       	eor	r22, r22
    324a:	82 9f       	mul	r24, r18
    324c:	b0 0d       	add	r27, r0
    324e:	e1 1d       	adc	r30, r1
    3250:	a6 1f       	adc	r26, r22
    3252:	55 27       	eor	r21, r21
    3254:	74 9f       	mul	r23, r20
    3256:	e0 0d       	add	r30, r0
    3258:	a1 1d       	adc	r26, r1
    325a:	55 1f       	adc	r21, r21
    325c:	83 9f       	mul	r24, r19
    325e:	e0 0d       	add	r30, r0
    3260:	a1 1d       	adc	r26, r1
    3262:	56 1f       	adc	r21, r22
    3264:	84 9f       	mul	r24, r20
    3266:	a0 0d       	add	r26, r0
    3268:	51 1d       	adc	r21, r1
    326a:	85 2f       	mov	r24, r21
    326c:	7a 2f       	mov	r23, r26
    326e:	6e 2f       	mov	r22, r30
    3270:	1f 90       	pop	r1
    3272:	0f 90       	pop	r0
    3274:	88 23       	and	r24, r24
    3276:	1a f4       	brpl	.+6      	; 0x327e <__mulsf3x+0x7a>
    3278:	93 95       	inc	r25
    327a:	39 f4       	brne	.+14     	; 0x328a <__mulsf3x+0x86>
    327c:	4d cf       	rjmp	.-358    	; 0x3118 <__fp_nan>
    327e:	00 0c       	add	r0, r0
    3280:	11 1c       	adc	r1, r1
    3282:	bb 1f       	adc	r27, r27
    3284:	66 1f       	adc	r22, r22
    3286:	77 1f       	adc	r23, r23
    3288:	88 1f       	adc	r24, r24
    328a:	01 28       	or	r0, r1
    328c:	08 95       	ret

0000328e <pow>:
    328e:	3c d0       	rcall	.+120    	; 0x3308 <__fp_tstB>
    3290:	38 f0       	brcs	.+14     	; 0x32a0 <pow+0x12>
    3292:	2e d0       	rcall	.+92     	; 0x32f0 <__fp_tstA>
    3294:	60 f1       	brcs	.+88     	; 0x32ee <pow+0x60>
    3296:	86 f0       	brts	.+32     	; 0x32b8 <pow+0x2a>
    3298:	21 f4       	brne	.+8      	; 0x32a2 <pow+0x14>
    329a:	36 d0       	rcall	.+108    	; 0x3308 <__fp_tstB>
    329c:	09 f0       	breq	.+2      	; 0x32a0 <pow+0x12>
    329e:	3e f5       	brtc	.+78     	; 0x32ee <pow+0x60>
    32a0:	3b cf       	rjmp	.-394    	; 0x3118 <__fp_nan>
    32a2:	5f 93       	push	r21
    32a4:	4f 93       	push	r20
    32a6:	3f 93       	push	r19
    32a8:	2f 93       	push	r18
    32aa:	c3 d0       	rcall	.+390    	; 0x3432 <log>
    32ac:	2f 91       	pop	r18
    32ae:	3f 91       	pop	r19
    32b0:	4f 91       	pop	r20
    32b2:	5f 91       	pop	r21
    32b4:	a4 df       	rcall	.-184    	; 0x31fe <__mulsf3>
    32b6:	34 c0       	rjmp	.+104    	; 0x3320 <exp>
    32b8:	27 d0       	rcall	.+78     	; 0x3308 <__fp_tstB>
    32ba:	98 f3       	brcs	.-26     	; 0x32a2 <pow+0x14>
    32bc:	89 f0       	breq	.+34     	; 0x32e0 <pow+0x52>
    32be:	08 94       	sec
    32c0:	e7 95       	ror	r30
    32c2:	d9 01       	movw	r26, r18
    32c4:	aa 23       	and	r26, r26
    32c6:	29 f4       	brne	.+10     	; 0x32d2 <pow+0x44>
    32c8:	ab 2f       	mov	r26, r27
    32ca:	be 2f       	mov	r27, r30
    32cc:	f8 5f       	subi	r31, 0xF8	; 248
    32ce:	d0 f3       	brcs	.-12     	; 0x32c4 <pow+0x36>
    32d0:	e8 cf       	rjmp	.-48     	; 0x32a2 <pow+0x14>
    32d2:	ff 5f       	subi	r31, 0xFF	; 255
    32d4:	30 f7       	brcc	.-52     	; 0x32a2 <pow+0x14>
    32d6:	a6 95       	lsr	r26
    32d8:	e0 f7       	brcc	.-8      	; 0x32d2 <pow+0x44>
    32da:	f7 39       	cpi	r31, 0x97	; 151
    32dc:	08 f3       	brcs	.-62     	; 0x32a0 <pow+0x12>
    32de:	09 f0       	breq	.+2      	; 0x32e2 <pow+0x54>
    32e0:	9f 77       	andi	r25, 0x7F	; 127
    32e2:	9f 93       	push	r25
    32e4:	9f 77       	andi	r25, 0x7F	; 127
    32e6:	dd df       	rcall	.-70     	; 0x32a2 <pow+0x14>
    32e8:	ef 91       	pop	r30
    32ea:	e0 78       	andi	r30, 0x80	; 128
    32ec:	9e 27       	eor	r25, r30
    32ee:	08 95       	ret

000032f0 <__fp_tstA>:
    32f0:	e8 94       	clt
    32f2:	fc 01       	movw	r30, r24
    32f4:	ee 0f       	add	r30, r30
    32f6:	ff 1f       	adc	r31, r31
    32f8:	30 96       	adiw	r30, 0x00	; 0
    32fa:	61 05       	cpc	r22, r1
    32fc:	71 05       	cpc	r23, r1
    32fe:	19 f0       	breq	.+6      	; 0x3306 <__fp_tstA+0x16>
    3300:	f3 95       	inc	r31
    3302:	f1 40       	sbci	r31, 0x01	; 1
    3304:	97 fb       	bst	r25, 7
    3306:	08 95       	ret

00003308 <__fp_tstB>:
    3308:	e8 94       	clt
    330a:	fa 01       	movw	r30, r20
    330c:	ee 0f       	add	r30, r30
    330e:	ff 1f       	adc	r31, r31
    3310:	30 96       	adiw	r30, 0x00	; 0
    3312:	21 05       	cpc	r18, r1
    3314:	31 05       	cpc	r19, r1
    3316:	19 f0       	breq	.+6      	; 0x331e <__fp_tstB+0x16>
    3318:	f3 95       	inc	r31
    331a:	f1 40       	sbci	r31, 0x01	; 1
    331c:	57 fb       	bst	r21, 7
    331e:	08 95       	ret

00003320 <exp>:
    3320:	09 2e       	mov	r0, r25
    3322:	99 23       	and	r25, r25
    3324:	4a f0       	brmi	.+18     	; 0x3338 <exp+0x18>
    3326:	52 e4       	ldi	r21, 0x42	; 66
    3328:	41 eb       	ldi	r20, 0xB1	; 177
    332a:	32 e7       	ldi	r19, 0x72	; 114
    332c:	68 31       	cpi	r22, 0x18	; 24
    332e:	73 07       	cpc	r23, r19
    3330:	84 07       	cpc	r24, r20
    3332:	95 07       	cpc	r25, r21
    3334:	58 f0       	brcs	.+22     	; 0x334c <exp+0x2c>
    3336:	f0 ce       	rjmp	.-544    	; 0x3118 <__fp_nan>
    3338:	9f 77       	andi	r25, 0x7F	; 127
    333a:	52 e4       	ldi	r21, 0x42	; 66
    333c:	4e ea       	ldi	r20, 0xAE	; 174
    333e:	3c ea       	ldi	r19, 0xAC	; 172
    3340:	60 35       	cpi	r22, 0x50	; 80
    3342:	73 07       	cpc	r23, r19
    3344:	84 07       	cpc	r24, r20
    3346:	95 07       	cpc	r25, r21
    3348:	08 f0       	brcs	.+2      	; 0x334c <exp+0x2c>
    334a:	12 cf       	rjmp	.-476    	; 0x3170 <__fp_zero>
    334c:	0f 92       	push	r0
    334e:	5f e3       	ldi	r21, 0x3F	; 63
    3350:	48 eb       	ldi	r20, 0xB8	; 184
    3352:	3a ea       	ldi	r19, 0xAA	; 170
    3354:	2b e3       	ldi	r18, 0x3B	; 59
    3356:	53 df       	rcall	.-346    	; 0x31fe <__mulsf3>
    3358:	ff 92       	push	r15
    335a:	ef 92       	push	r14
    335c:	df 92       	push	r13
    335e:	cf 92       	push	r12
    3360:	50 e0       	ldi	r21, 0x00	; 0
    3362:	4c e0       	ldi	r20, 0x0C	; 12
    3364:	1c df       	rcall	.-456    	; 0x319e <modf>
    3366:	e4 e5       	ldi	r30, 0x54	; 84
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	30 d0       	rcall	.+96     	; 0x33cc <__fp_powerseries>
    336c:	5f 2d       	mov	r21, r15
    336e:	4e 2d       	mov	r20, r14
    3370:	3d 2d       	mov	r19, r13
    3372:	2c 2d       	mov	r18, r12
    3374:	cf 90       	pop	r12
    3376:	df 90       	pop	r13
    3378:	ef 90       	pop	r14
    337a:	ff 90       	pop	r15
    337c:	fe e9       	ldi	r31, 0x9E	; 158
    337e:	45 95       	asr	r20
    3380:	44 1f       	adc	r20, r20
    3382:	55 1f       	adc	r21, r21
    3384:	f5 1b       	sub	r31, r21
    3386:	55 27       	eor	r21, r21
    3388:	40 68       	ori	r20, 0x80	; 128
    338a:	04 c0       	rjmp	.+8      	; 0x3394 <exp+0x74>
    338c:	46 95       	lsr	r20
    338e:	37 95       	ror	r19
    3390:	27 95       	ror	r18
    3392:	57 95       	ror	r21
    3394:	fa 95       	dec	r31
    3396:	d2 f7       	brpl	.-12     	; 0x338c <exp+0x6c>
    3398:	45 2f       	mov	r20, r21
    339a:	55 0f       	add	r21, r21
    339c:	55 0b       	sbc	r21, r21
    339e:	ed de       	rcall	.-550    	; 0x317a <ldexp>
    33a0:	0f 90       	pop	r0
    33a2:	07 fc       	sbrc	r0, 7
    33a4:	01 c0       	rjmp	.+2      	; 0x33a8 <__fp_inverse>
    33a6:	08 95       	ret

000033a8 <__fp_inverse>:
    33a8:	9b 01       	movw	r18, r22
    33aa:	ac 01       	movw	r20, r24
    33ac:	9f e3       	ldi	r25, 0x3F	; 63
    33ae:	80 e8       	ldi	r24, 0x80	; 128
    33b0:	77 27       	eor	r23, r23
    33b2:	66 27       	eor	r22, r22
    33b4:	0c 94 51 17 	jmp	0x2ea2 <__divsf3>

000033b8 <__fp_m_inf>:
    33b8:	9f ef       	ldi	r25, 0xFF	; 255
    33ba:	80 e8       	ldi	r24, 0x80	; 128
    33bc:	70 e0       	ldi	r23, 0x00	; 0
    33be:	60 e0       	ldi	r22, 0x00	; 0
    33c0:	08 95       	ret

000033c2 <__fp_p_inf>:
    33c2:	9f e7       	ldi	r25, 0x7F	; 127
    33c4:	80 e8       	ldi	r24, 0x80	; 128
    33c6:	70 e0       	ldi	r23, 0x00	; 0
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	08 95       	ret

000033cc <__fp_powerseries>:
    33cc:	ff 92       	push	r15
    33ce:	ef 92       	push	r14
    33d0:	df 92       	push	r13
    33d2:	cf 92       	push	r12
    33d4:	bf 92       	push	r11
    33d6:	6b 01       	movw	r12, r22
    33d8:	7c 01       	movw	r14, r24
    33da:	b5 90       	lpm	r11, Z+
    33dc:	16 d0       	rcall	.+44     	; 0x340a <__fp_powerseries+0x3e>
    33de:	b5 90       	lpm	r11, Z+
    33e0:	bb 20       	and	r11, r11
    33e2:	69 f0       	breq	.+26     	; 0x33fe <__fp_powerseries+0x32>
    33e4:	9f 93       	push	r25
    33e6:	8f 93       	push	r24
    33e8:	7f 93       	push	r23
    33ea:	6f 93       	push	r22
    33ec:	b6 01       	movw	r22, r12
    33ee:	c7 01       	movw	r24, r14
    33f0:	0c d0       	rcall	.+24     	; 0x340a <__fp_powerseries+0x3e>
    33f2:	2f 91       	pop	r18
    33f4:	3f 91       	pop	r19
    33f6:	4f 91       	pop	r20
    33f8:	5f 91       	pop	r21
    33fa:	0e 94 51 17 	call	0x2ea2 <__divsf3>
    33fe:	bf 90       	pop	r11
    3400:	cf 90       	pop	r12
    3402:	df 90       	pop	r13
    3404:	ef 90       	pop	r14
    3406:	ff 90       	pop	r15
    3408:	08 95       	ret
    340a:	3c d0       	rcall	.+120    	; 0x3484 <__fp_flashconst>
    340c:	02 c0       	rjmp	.+4      	; 0x3412 <__fp_powerseries+0x46>
    340e:	96 01       	movw	r18, r12
    3410:	a7 01       	movw	r20, r14
    3412:	ef 93       	push	r30
    3414:	ff 93       	push	r31
    3416:	0e 94 ff 18 	call	0x31fe <__mulsf3>
    341a:	ff 91       	pop	r31
    341c:	ef 91       	pop	r30
    341e:	32 d0       	rcall	.+100    	; 0x3484 <__fp_flashconst>
    3420:	ef 93       	push	r30
    3422:	ff 93       	push	r31
    3424:	0e 94 0f 17 	call	0x2e1e <__addsf3>
    3428:	ff 91       	pop	r31
    342a:	ef 91       	pop	r30
    342c:	ba 94       	dec	r11
    342e:	79 f7       	brne	.-34     	; 0x340e <__fp_powerseries+0x42>
    3430:	08 95       	ret

00003432 <log>:
    3432:	97 fd       	sbrc	r25, 7
    3434:	71 ce       	rjmp	.-798    	; 0x3118 <__fp_nan>
    3436:	8d de       	rcall	.-742    	; 0x3152 <__fp_split_a>
    3438:	99 23       	and	r25, r25
    343a:	09 f4       	brne	.+2      	; 0x343e <log+0xc>
    343c:	6d ce       	rjmp	.-806    	; 0x3118 <__fp_nan>
    343e:	ff 92       	push	r15
    3440:	ef 92       	push	r14
    3442:	df 92       	push	r13
    3444:	cf 92       	push	r12
    3446:	c9 2e       	mov	r12, r25
    3448:	9f e3       	ldi	r25, 0x3F	; 63
    344a:	8f 77       	andi	r24, 0x7F	; 127
    344c:	e2 e7       	ldi	r30, 0x72	; 114
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	bd df       	rcall	.-134    	; 0x33cc <__fp_powerseries>
    3452:	0c 2c       	mov	r0, r12
    3454:	c9 2e       	mov	r12, r25
    3456:	d8 2e       	mov	r13, r24
    3458:	e7 2e       	mov	r14, r23
    345a:	f6 2e       	mov	r15, r22
    345c:	60 2d       	mov	r22, r0
    345e:	6e 57       	subi	r22, 0x7E	; 126
    3460:	77 0b       	sbc	r23, r23
    3462:	87 2f       	mov	r24, r23
    3464:	97 2f       	mov	r25, r23
    3466:	0f de       	rcall	.-994    	; 0x3086 <__floatsisf>
    3468:	5f e3       	ldi	r21, 0x3F	; 63
    346a:	41 e3       	ldi	r20, 0x31	; 49
    346c:	32 e7       	ldi	r19, 0x72	; 114
    346e:	28 e1       	ldi	r18, 0x18	; 24
    3470:	c6 de       	rcall	.-628    	; 0x31fe <__mulsf3>
    3472:	5c 2d       	mov	r21, r12
    3474:	4d 2d       	mov	r20, r13
    3476:	3e 2d       	mov	r19, r14
    3478:	2f 2d       	mov	r18, r15
    347a:	cf 90       	pop	r12
    347c:	df 90       	pop	r13
    347e:	ef 90       	pop	r14
    3480:	ff 90       	pop	r15
    3482:	cd cc       	rjmp	.-1638   	; 0x2e1e <__addsf3>

00003484 <__fp_flashconst>:
    3484:	55 91       	lpm	r21, Z+
    3486:	45 91       	lpm	r20, Z+
    3488:	35 91       	lpm	r19, Z+
    348a:	25 91       	lpm	r18, Z+
    348c:	08 95       	ret

0000348e <__udivmodhi4>:
    348e:	aa 1b       	sub	r26, r26
    3490:	bb 1b       	sub	r27, r27
    3492:	51 e1       	ldi	r21, 0x11	; 17
    3494:	07 c0       	rjmp	.+14     	; 0x34a4 <__udivmodhi4_ep>

00003496 <__udivmodhi4_loop>:
    3496:	aa 1f       	adc	r26, r26
    3498:	bb 1f       	adc	r27, r27
    349a:	a6 17       	cp	r26, r22
    349c:	b7 07       	cpc	r27, r23
    349e:	10 f0       	brcs	.+4      	; 0x34a4 <__udivmodhi4_ep>
    34a0:	a6 1b       	sub	r26, r22
    34a2:	b7 0b       	sbc	r27, r23

000034a4 <__udivmodhi4_ep>:
    34a4:	88 1f       	adc	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	5a 95       	dec	r21
    34aa:	a9 f7       	brne	.-22     	; 0x3496 <__udivmodhi4_loop>
    34ac:	80 95       	com	r24
    34ae:	90 95       	com	r25
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	08 95       	ret

000034b6 <__divmodhi4>:
    34b6:	97 fb       	bst	r25, 7
    34b8:	09 2e       	mov	r0, r25
    34ba:	07 26       	eor	r0, r23
    34bc:	0a d0       	rcall	.+20     	; 0x34d2 <__divmodhi4_neg1>
    34be:	77 fd       	sbrc	r23, 7
    34c0:	04 d0       	rcall	.+8      	; 0x34ca <__divmodhi4_neg2>
    34c2:	e5 df       	rcall	.-54     	; 0x348e <__udivmodhi4>
    34c4:	06 d0       	rcall	.+12     	; 0x34d2 <__divmodhi4_neg1>
    34c6:	00 20       	and	r0, r0
    34c8:	1a f4       	brpl	.+6      	; 0x34d0 <__divmodhi4_exit>

000034ca <__divmodhi4_neg2>:
    34ca:	70 95       	com	r23
    34cc:	61 95       	neg	r22
    34ce:	7f 4f       	sbci	r23, 0xFF	; 255

000034d0 <__divmodhi4_exit>:
    34d0:	08 95       	ret

000034d2 <__divmodhi4_neg1>:
    34d2:	f6 f7       	brtc	.-4      	; 0x34d0 <__divmodhi4_exit>
    34d4:	90 95       	com	r25
    34d6:	81 95       	neg	r24
    34d8:	9f 4f       	sbci	r25, 0xFF	; 255
    34da:	08 95       	ret

000034dc <__udivmodsi4>:
    34dc:	a1 e2       	ldi	r26, 0x21	; 33
    34de:	1a 2e       	mov	r1, r26
    34e0:	aa 1b       	sub	r26, r26
    34e2:	bb 1b       	sub	r27, r27
    34e4:	fd 01       	movw	r30, r26
    34e6:	0d c0       	rjmp	.+26     	; 0x3502 <__udivmodsi4_ep>

000034e8 <__udivmodsi4_loop>:
    34e8:	aa 1f       	adc	r26, r26
    34ea:	bb 1f       	adc	r27, r27
    34ec:	ee 1f       	adc	r30, r30
    34ee:	ff 1f       	adc	r31, r31
    34f0:	a2 17       	cp	r26, r18
    34f2:	b3 07       	cpc	r27, r19
    34f4:	e4 07       	cpc	r30, r20
    34f6:	f5 07       	cpc	r31, r21
    34f8:	20 f0       	brcs	.+8      	; 0x3502 <__udivmodsi4_ep>
    34fa:	a2 1b       	sub	r26, r18
    34fc:	b3 0b       	sbc	r27, r19
    34fe:	e4 0b       	sbc	r30, r20
    3500:	f5 0b       	sbc	r31, r21

00003502 <__udivmodsi4_ep>:
    3502:	66 1f       	adc	r22, r22
    3504:	77 1f       	adc	r23, r23
    3506:	88 1f       	adc	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	1a 94       	dec	r1
    350c:	69 f7       	brne	.-38     	; 0x34e8 <__udivmodsi4_loop>
    350e:	60 95       	com	r22
    3510:	70 95       	com	r23
    3512:	80 95       	com	r24
    3514:	90 95       	com	r25
    3516:	9b 01       	movw	r18, r22
    3518:	ac 01       	movw	r20, r24
    351a:	bd 01       	movw	r22, r26
    351c:	cf 01       	movw	r24, r30
    351e:	08 95       	ret

00003520 <__divmodsi4>:
    3520:	97 fb       	bst	r25, 7
    3522:	09 2e       	mov	r0, r25
    3524:	05 26       	eor	r0, r21
    3526:	0e d0       	rcall	.+28     	; 0x3544 <__divmodsi4_neg1>
    3528:	57 fd       	sbrc	r21, 7
    352a:	04 d0       	rcall	.+8      	; 0x3534 <__divmodsi4_neg2>
    352c:	d7 df       	rcall	.-82     	; 0x34dc <__udivmodsi4>
    352e:	0a d0       	rcall	.+20     	; 0x3544 <__divmodsi4_neg1>
    3530:	00 1c       	adc	r0, r0
    3532:	38 f4       	brcc	.+14     	; 0x3542 <__divmodsi4_exit>

00003534 <__divmodsi4_neg2>:
    3534:	50 95       	com	r21
    3536:	40 95       	com	r20
    3538:	30 95       	com	r19
    353a:	21 95       	neg	r18
    353c:	3f 4f       	sbci	r19, 0xFF	; 255
    353e:	4f 4f       	sbci	r20, 0xFF	; 255
    3540:	5f 4f       	sbci	r21, 0xFF	; 255

00003542 <__divmodsi4_exit>:
    3542:	08 95       	ret

00003544 <__divmodsi4_neg1>:
    3544:	f6 f7       	brtc	.-4      	; 0x3542 <__divmodsi4_exit>
    3546:	90 95       	com	r25
    3548:	80 95       	com	r24
    354a:	70 95       	com	r23
    354c:	61 95       	neg	r22
    354e:	7f 4f       	sbci	r23, 0xFF	; 255
    3550:	8f 4f       	sbci	r24, 0xFF	; 255
    3552:	9f 4f       	sbci	r25, 0xFF	; 255
    3554:	08 95       	ret

00003556 <toascii>:
    3556:	99 27       	eor	r25, r25
    3558:	8f 77       	andi	r24, 0x7F	; 127
    355a:	08 95       	ret
