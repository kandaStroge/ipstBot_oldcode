
04_projex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000024b0  00002544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800070  00800070  00002554  2**0
                  ALLOC
  3 .stab         00001470  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b4  00000000  00000000  000039c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003a0  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fbe  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002b5  00000000  00000000  00004f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001849  00000000  00000000  000051eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000400  00000000  00000000  00006a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003f0  00000000  00000000  00006e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000622  00000000  00000000  00007224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000042  00000000  00000000  00007846  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00007888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 be 03 	jmp	0x77c	; 0x77c <__vector_8>
      24:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <motor_stop+0x16>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <out_c+0x5e>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <in_b+0x32>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <toggle_a+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e0 eb       	ldi	r30, 0xB0	; 176
     162:	f4 e2       	ldi	r31, 0x24	; 36
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a0 37       	cpi	r26, 0x70	; 112
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	a0 e7       	ldi	r26, 0x70	; 112
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a4 38       	cpi	r26, 0x84	; 132
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 4e 0c 	call	0x189c	; 0x189c <main>
     184:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <toggle_a>:
#define clear_c(x)   	DDRC |= _BV(x);	PORTC &= ~_BV(x);		
#define set_d(x)  		DDRD |= _BV(x);	PORTD |= _BV(x)		
#define clear_d(x)   	DDRD |= _BV(x);	PORTD &= ~_BV(x);		

void toggle_a(char x)
{
     18c:	df 93       	push	r29
     18e:	cf 93       	push	r28
     190:	0f 92       	push	r0
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	89 83       	std	Y+1, r24	; 0x01
	DDRA |= _BV(x); 
     198:	8a e3       	ldi	r24, 0x3A	; 58
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	2a e3       	ldi	r18, 0x3A	; 58
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	62 2f       	mov	r22, r18
     1a6:	29 81       	ldd	r18, Y+1	; 0x01
     1a8:	42 2f       	mov	r20, r18
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <toggle_a+0x2a>
     1b2:	22 0f       	add	r18, r18
     1b4:	33 1f       	adc	r19, r19
     1b6:	4a 95       	dec	r20
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <toggle_a+0x26>
     1ba:	26 2b       	or	r18, r22
     1bc:	fc 01       	movw	r30, r24
     1be:	20 83       	st	Z, r18
	PORTA ^= _BV(x);
     1c0:	8b e3       	ldi	r24, 0x3B	; 59
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	2b e3       	ldi	r18, 0x3B	; 59
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	f9 01       	movw	r30, r18
     1ca:	20 81       	ld	r18, Z
     1cc:	62 2f       	mov	r22, r18
     1ce:	29 81       	ldd	r18, Y+1	; 0x01
     1d0:	42 2f       	mov	r20, r18
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	21 e0       	ldi	r18, 0x01	; 1
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	04 2e       	mov	r0, r20
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <toggle_a+0x54>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	0a 94       	dec	r0
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <toggle_a+0x50>
     1e4:	26 27       	eor	r18, r22
     1e6:	fc 01       	movw	r30, r24
     1e8:	20 83       	st	Z, r18
}
     1ea:	0f 90       	pop	r0
     1ec:	cf 91       	pop	r28
     1ee:	df 91       	pop	r29
     1f0:	08 95       	ret

000001f2 <toggle_b>:
void toggle_b(char x)
{
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	0f 92       	push	r0
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	89 83       	std	Y+1, r24	; 0x01
	DDRB |= _BV(x); 
     1fe:	87 e3       	ldi	r24, 0x37	; 55
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	27 e3       	ldi	r18, 0x37	; 55
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	f9 01       	movw	r30, r18
     208:	20 81       	ld	r18, Z
     20a:	62 2f       	mov	r22, r18
     20c:	29 81       	ldd	r18, Y+1	; 0x01
     20e:	42 2f       	mov	r20, r18
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	02 c0       	rjmp	.+4      	; 0x21c <toggle_b+0x2a>
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	4a 95       	dec	r20
     21e:	e2 f7       	brpl	.-8      	; 0x218 <toggle_b+0x26>
     220:	26 2b       	or	r18, r22
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
	PORTB ^= _BV(x);
     226:	88 e3       	ldi	r24, 0x38	; 56
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	28 e3       	ldi	r18, 0x38	; 56
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	62 2f       	mov	r22, r18
     234:	29 81       	ldd	r18, Y+1	; 0x01
     236:	42 2f       	mov	r20, r18
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	21 e0       	ldi	r18, 0x01	; 1
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	04 2e       	mov	r0, r20
     240:	02 c0       	rjmp	.+4      	; 0x246 <toggle_b+0x54>
     242:	22 0f       	add	r18, r18
     244:	33 1f       	adc	r19, r19
     246:	0a 94       	dec	r0
     248:	e2 f7       	brpl	.-8      	; 0x242 <toggle_b+0x50>
     24a:	26 27       	eor	r18, r22
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
}
     250:	0f 90       	pop	r0
     252:	cf 91       	pop	r28
     254:	df 91       	pop	r29
     256:	08 95       	ret

00000258 <toggle_c>:
void toggle_c(char x)
{
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	0f 92       	push	r0
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	89 83       	std	Y+1, r24	; 0x01
	DDRC |= _BV(x); 
     264:	84 e3       	ldi	r24, 0x34	; 52
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	24 e3       	ldi	r18, 0x34	; 52
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	f9 01       	movw	r30, r18
     26e:	20 81       	ld	r18, Z
     270:	62 2f       	mov	r22, r18
     272:	29 81       	ldd	r18, Y+1	; 0x01
     274:	42 2f       	mov	r20, r18
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	02 c0       	rjmp	.+4      	; 0x282 <toggle_c+0x2a>
     27e:	22 0f       	add	r18, r18
     280:	33 1f       	adc	r19, r19
     282:	4a 95       	dec	r20
     284:	e2 f7       	brpl	.-8      	; 0x27e <toggle_c+0x26>
     286:	26 2b       	or	r18, r22
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
	PORTC ^= _BV(x);
     28c:	85 e3       	ldi	r24, 0x35	; 53
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	25 e3       	ldi	r18, 0x35	; 53
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	f9 01       	movw	r30, r18
     296:	20 81       	ld	r18, Z
     298:	62 2f       	mov	r22, r18
     29a:	29 81       	ldd	r18, Y+1	; 0x01
     29c:	42 2f       	mov	r20, r18
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	04 2e       	mov	r0, r20
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <toggle_c+0x54>
     2a8:	22 0f       	add	r18, r18
     2aa:	33 1f       	adc	r19, r19
     2ac:	0a 94       	dec	r0
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <toggle_c+0x50>
     2b0:	26 27       	eor	r18, r22
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
}
     2b6:	0f 90       	pop	r0
     2b8:	cf 91       	pop	r28
     2ba:	df 91       	pop	r29
     2bc:	08 95       	ret

000002be <toggle_d>:
void toggle_d(char x)
{
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	0f 92       	push	r0
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	89 83       	std	Y+1, r24	; 0x01
	DDRD |= _BV(x); 
     2ca:	81 e3       	ldi	r24, 0x31	; 49
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	21 e3       	ldi	r18, 0x31	; 49
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	f9 01       	movw	r30, r18
     2d4:	20 81       	ld	r18, Z
     2d6:	62 2f       	mov	r22, r18
     2d8:	29 81       	ldd	r18, Y+1	; 0x01
     2da:	42 2f       	mov	r20, r18
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	21 e0       	ldi	r18, 0x01	; 1
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <toggle_d+0x2a>
     2e4:	22 0f       	add	r18, r18
     2e6:	33 1f       	adc	r19, r19
     2e8:	4a 95       	dec	r20
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <toggle_d+0x26>
     2ec:	26 2b       	or	r18, r22
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18
	PORTD ^= _BV(x);
     2f2:	82 e3       	ldi	r24, 0x32	; 50
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	22 e3       	ldi	r18, 0x32	; 50
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	f9 01       	movw	r30, r18
     2fc:	20 81       	ld	r18, Z
     2fe:	62 2f       	mov	r22, r18
     300:	29 81       	ldd	r18, Y+1	; 0x01
     302:	42 2f       	mov	r20, r18
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	04 2e       	mov	r0, r20
     30c:	02 c0       	rjmp	.+4      	; 0x312 <toggle_d+0x54>
     30e:	22 0f       	add	r18, r18
     310:	33 1f       	adc	r19, r19
     312:	0a 94       	dec	r0
     314:	e2 f7       	brpl	.-8      	; 0x30e <toggle_d+0x50>
     316:	26 27       	eor	r18, r22
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
}
     31c:	0f 90       	pop	r0
     31e:	cf 91       	pop	r28
     320:	df 91       	pop	r29
     322:	08 95       	ret

00000324 <in_a>:
char in_a(char _bit)
{
     324:	df 93       	push	r29
     326:	cf 93       	push	r28
     328:	0f 92       	push	r0
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	89 83       	std	Y+1, r24	; 0x01
	DDRA &= ~(1<<_bit);
     330:	8a e3       	ldi	r24, 0x3A	; 58
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	2a e3       	ldi	r18, 0x3A	; 58
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	f9 01       	movw	r30, r18
     33a:	20 81       	ld	r18, Z
     33c:	62 2f       	mov	r22, r18
     33e:	29 81       	ldd	r18, Y+1	; 0x01
     340:	42 2f       	mov	r20, r18
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	21 e0       	ldi	r18, 0x01	; 1
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <in_a+0x2a>
     34a:	22 0f       	add	r18, r18
     34c:	33 1f       	adc	r19, r19
     34e:	4a 95       	dec	r20
     350:	e2 f7       	brpl	.-8      	; 0x34a <in_a+0x26>
     352:	20 95       	com	r18
     354:	26 23       	and	r18, r22
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18
	return((PINA & _BV(_bit))>>_bit);	
     35a:	89 e3       	ldi	r24, 0x39	; 57
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	fc 01       	movw	r30, r24
     360:	80 81       	ld	r24, Z
     362:	28 2f       	mov	r18, r24
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	48 2f       	mov	r20, r24
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	04 2e       	mov	r0, r20
     372:	02 c0       	rjmp	.+4      	; 0x378 <in_a+0x54>
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	0a 94       	dec	r0
     37a:	e2 f7       	brpl	.-8      	; 0x374 <in_a+0x50>
     37c:	82 23       	and	r24, r18
     37e:	93 23       	and	r25, r19
     380:	29 81       	ldd	r18, Y+1	; 0x01
     382:	22 2f       	mov	r18, r18
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	02 2e       	mov	r0, r18
     388:	02 c0       	rjmp	.+4      	; 0x38e <in_a+0x6a>
     38a:	95 95       	asr	r25
     38c:	87 95       	ror	r24
     38e:	0a 94       	dec	r0
     390:	e2 f7       	brpl	.-8      	; 0x38a <in_a+0x66>
}
     392:	0f 90       	pop	r0
     394:	cf 91       	pop	r28
     396:	df 91       	pop	r29
     398:	08 95       	ret

0000039a <in_b>:
char in_b(char _bit)
{
     39a:	df 93       	push	r29
     39c:	cf 93       	push	r28
     39e:	0f 92       	push	r0
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	89 83       	std	Y+1, r24	; 0x01
	DDRB &= ~(1<<_bit);
     3a6:	87 e3       	ldi	r24, 0x37	; 55
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	27 e3       	ldi	r18, 0x37	; 55
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	f9 01       	movw	r30, r18
     3b0:	20 81       	ld	r18, Z
     3b2:	62 2f       	mov	r22, r18
     3b4:	29 81       	ldd	r18, Y+1	; 0x01
     3b6:	42 2f       	mov	r20, r18
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <in_b+0x2a>
     3c0:	22 0f       	add	r18, r18
     3c2:	33 1f       	adc	r19, r19
     3c4:	4a 95       	dec	r20
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <in_b+0x26>
     3c8:	20 95       	com	r18
     3ca:	26 23       	and	r18, r22
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18
	return((PINB & _BV(_bit))>>_bit);	
     3d0:	86 e3       	ldi	r24, 0x36	; 54
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	fc 01       	movw	r30, r24
     3d6:	80 81       	ld	r24, Z
     3d8:	28 2f       	mov	r18, r24
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	48 2f       	mov	r20, r24
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	04 2e       	mov	r0, r20
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <in_b+0x54>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	0a 94       	dec	r0
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <in_b+0x50>
     3f2:	82 23       	and	r24, r18
     3f4:	93 23       	and	r25, r19
     3f6:	29 81       	ldd	r18, Y+1	; 0x01
     3f8:	22 2f       	mov	r18, r18
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	02 2e       	mov	r0, r18
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <in_b+0x6a>
     400:	95 95       	asr	r25
     402:	87 95       	ror	r24
     404:	0a 94       	dec	r0
     406:	e2 f7       	brpl	.-8      	; 0x400 <in_b+0x66>
}
     408:	0f 90       	pop	r0
     40a:	cf 91       	pop	r28
     40c:	df 91       	pop	r29
     40e:	08 95       	ret

00000410 <in_c>:
char in_c(char _bit)
{
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	0f 92       	push	r0
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	89 83       	std	Y+1, r24	; 0x01
	DDRC &= ~(1<<_bit);
     41c:	84 e3       	ldi	r24, 0x34	; 52
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	24 e3       	ldi	r18, 0x34	; 52
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	f9 01       	movw	r30, r18
     426:	20 81       	ld	r18, Z
     428:	62 2f       	mov	r22, r18
     42a:	29 81       	ldd	r18, Y+1	; 0x01
     42c:	42 2f       	mov	r20, r18
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <in_c+0x2a>
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	4a 95       	dec	r20
     43c:	e2 f7       	brpl	.-8      	; 0x436 <in_c+0x26>
     43e:	20 95       	com	r18
     440:	26 23       	and	r18, r22
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18
	return((PINC & _BV(_bit))>>_bit);	
     446:	83 e3       	ldi	r24, 0x33	; 51
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	fc 01       	movw	r30, r24
     44c:	80 81       	ld	r24, Z
     44e:	28 2f       	mov	r18, r24
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	48 2f       	mov	r20, r24
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	04 2e       	mov	r0, r20
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__stack+0x5>
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	0a 94       	dec	r0
     466:	e2 f7       	brpl	.-8      	; 0x460 <__stack+0x1>
     468:	82 23       	and	r24, r18
     46a:	93 23       	and	r25, r19
     46c:	29 81       	ldd	r18, Y+1	; 0x01
     46e:	22 2f       	mov	r18, r18
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	02 2e       	mov	r0, r18
     474:	02 c0       	rjmp	.+4      	; 0x47a <__stack+0x1b>
     476:	95 95       	asr	r25
     478:	87 95       	ror	r24
     47a:	0a 94       	dec	r0
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__stack+0x17>
}
     47e:	0f 90       	pop	r0
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <in_d>:
char in_d(char _bit)
{
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	0f 92       	push	r0
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= ~(1<<_bit);
     492:	81 e3       	ldi	r24, 0x31	; 49
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	21 e3       	ldi	r18, 0x31	; 49
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	f9 01       	movw	r30, r18
     49c:	20 81       	ld	r18, Z
     49e:	62 2f       	mov	r22, r18
     4a0:	29 81       	ldd	r18, Y+1	; 0x01
     4a2:	42 2f       	mov	r20, r18
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <in_d+0x2a>
     4ac:	22 0f       	add	r18, r18
     4ae:	33 1f       	adc	r19, r19
     4b0:	4a 95       	dec	r20
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <in_d+0x26>
     4b4:	20 95       	com	r18
     4b6:	26 23       	and	r18, r22
     4b8:	fc 01       	movw	r30, r24
     4ba:	20 83       	st	Z, r18
	return((PIND & _BV(_bit))>>_bit);	
     4bc:	80 e3       	ldi	r24, 0x30	; 48
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	fc 01       	movw	r30, r24
     4c2:	80 81       	ld	r24, Z
     4c4:	28 2f       	mov	r18, r24
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	48 2f       	mov	r20, r24
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	04 2e       	mov	r0, r20
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <in_d+0x54>
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	0a 94       	dec	r0
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <in_d+0x50>
     4de:	82 23       	and	r24, r18
     4e0:	93 23       	and	r25, r19
     4e2:	29 81       	ldd	r18, Y+1	; 0x01
     4e4:	22 2f       	mov	r18, r18
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	02 2e       	mov	r0, r18
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <in_d+0x6a>
     4ec:	95 95       	asr	r25
     4ee:	87 95       	ror	r24
     4f0:	0a 94       	dec	r0
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <in_d+0x66>
}
     4f4:	0f 90       	pop	r0
     4f6:	cf 91       	pop	r28
     4f8:	df 91       	pop	r29
     4fa:	08 95       	ret

000004fc <out_a>:


void out_a(char _bit,char _dat)
{
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	00 d0       	rcall	.+0      	; 0x502 <out_a+0x6>
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	6a 83       	std	Y+2, r22	; 0x02
	DDRA |= _BV(_bit);
     50a:	8a e3       	ldi	r24, 0x3A	; 58
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	2a e3       	ldi	r18, 0x3A	; 58
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	f9 01       	movw	r30, r18
     514:	20 81       	ld	r18, Z
     516:	62 2f       	mov	r22, r18
     518:	29 81       	ldd	r18, Y+1	; 0x01
     51a:	42 2f       	mov	r20, r18
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	21 e0       	ldi	r18, 0x01	; 1
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	04 2e       	mov	r0, r20
     524:	02 c0       	rjmp	.+4      	; 0x52a <out_a+0x2e>
     526:	22 0f       	add	r18, r18
     528:	33 1f       	adc	r19, r19
     52a:	0a 94       	dec	r0
     52c:	e2 f7       	brpl	.-8      	; 0x526 <out_a+0x2a>
     52e:	26 2b       	or	r18, r22
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
	if(_dat)
     534:	8a 81       	ldd	r24, Y+2	; 0x02
     536:	88 23       	and	r24, r24
     538:	b1 f0       	breq	.+44     	; 0x566 <out_a+0x6a>
		PORTA |= _BV(_bit);
     53a:	8b e3       	ldi	r24, 0x3B	; 59
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	2b e3       	ldi	r18, 0x3B	; 59
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	f9 01       	movw	r30, r18
     544:	20 81       	ld	r18, Z
     546:	62 2f       	mov	r22, r18
     548:	29 81       	ldd	r18, Y+1	; 0x01
     54a:	42 2f       	mov	r20, r18
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	04 2e       	mov	r0, r20
     554:	02 c0       	rjmp	.+4      	; 0x55a <out_a+0x5e>
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	0a 94       	dec	r0
     55c:	e2 f7       	brpl	.-8      	; 0x556 <out_a+0x5a>
     55e:	26 2b       	or	r18, r22
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
     564:	16 c0       	rjmp	.+44     	; 0x592 <out_a+0x96>
	else
		PORTA &= ~_BV(_bit);
     566:	8b e3       	ldi	r24, 0x3B	; 59
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	2b e3       	ldi	r18, 0x3B	; 59
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	62 2f       	mov	r22, r18
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	42 2f       	mov	r20, r18
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	04 2e       	mov	r0, r20
     580:	02 c0       	rjmp	.+4      	; 0x586 <out_a+0x8a>
     582:	22 0f       	add	r18, r18
     584:	33 1f       	adc	r19, r19
     586:	0a 94       	dec	r0
     588:	e2 f7       	brpl	.-8      	; 0x582 <out_a+0x86>
     58a:	20 95       	com	r18
     58c:	26 23       	and	r18, r22
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18

}
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	08 95       	ret

0000059c <out_b>:
void out_b(char _bit,char _dat)
{
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <out_b+0x6>
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	89 83       	std	Y+1, r24	; 0x01
     5a8:	6a 83       	std	Y+2, r22	; 0x02
	DDRB |= _BV(_bit);
     5aa:	87 e3       	ldi	r24, 0x37	; 55
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	27 e3       	ldi	r18, 0x37	; 55
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	62 2f       	mov	r22, r18
     5b8:	29 81       	ldd	r18, Y+1	; 0x01
     5ba:	42 2f       	mov	r20, r18
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	21 e0       	ldi	r18, 0x01	; 1
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	04 2e       	mov	r0, r20
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <out_b+0x2e>
     5c6:	22 0f       	add	r18, r18
     5c8:	33 1f       	adc	r19, r19
     5ca:	0a 94       	dec	r0
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <out_b+0x2a>
     5ce:	26 2b       	or	r18, r22
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18
	if(_dat)
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
     5d6:	88 23       	and	r24, r24
     5d8:	b1 f0       	breq	.+44     	; 0x606 <out_b+0x6a>
		PORTB |= _BV(_bit);
     5da:	88 e3       	ldi	r24, 0x38	; 56
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	28 e3       	ldi	r18, 0x38	; 56
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	f9 01       	movw	r30, r18
     5e4:	20 81       	ld	r18, Z
     5e6:	62 2f       	mov	r22, r18
     5e8:	29 81       	ldd	r18, Y+1	; 0x01
     5ea:	42 2f       	mov	r20, r18
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	04 2e       	mov	r0, r20
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <out_b+0x5e>
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	0a 94       	dec	r0
     5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <out_b+0x5a>
     5fe:	26 2b       	or	r18, r22
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
     604:	16 c0       	rjmp	.+44     	; 0x632 <out_b+0x96>
	else
		PORTB &= ~_BV(_bit);
     606:	88 e3       	ldi	r24, 0x38	; 56
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	28 e3       	ldi	r18, 0x38	; 56
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f9 01       	movw	r30, r18
     610:	20 81       	ld	r18, Z
     612:	62 2f       	mov	r22, r18
     614:	29 81       	ldd	r18, Y+1	; 0x01
     616:	42 2f       	mov	r20, r18
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	04 2e       	mov	r0, r20
     620:	02 c0       	rjmp	.+4      	; 0x626 <out_b+0x8a>
     622:	22 0f       	add	r18, r18
     624:	33 1f       	adc	r19, r19
     626:	0a 94       	dec	r0
     628:	e2 f7       	brpl	.-8      	; 0x622 <out_b+0x86>
     62a:	20 95       	com	r18
     62c:	26 23       	and	r18, r22
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18

}
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	cf 91       	pop	r28
     638:	df 91       	pop	r29
     63a:	08 95       	ret

0000063c <out_c>:
void out_c(char _bit,char _dat)
{
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	00 d0       	rcall	.+0      	; 0x642 <out_c+0x6>
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	6a 83       	std	Y+2, r22	; 0x02
	DDRC |= _BV(_bit);
     64a:	84 e3       	ldi	r24, 0x34	; 52
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	24 e3       	ldi	r18, 0x34	; 52
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	f9 01       	movw	r30, r18
     654:	20 81       	ld	r18, Z
     656:	62 2f       	mov	r22, r18
     658:	29 81       	ldd	r18, Y+1	; 0x01
     65a:	42 2f       	mov	r20, r18
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	04 2e       	mov	r0, r20
     664:	02 c0       	rjmp	.+4      	; 0x66a <out_c+0x2e>
     666:	22 0f       	add	r18, r18
     668:	33 1f       	adc	r19, r19
     66a:	0a 94       	dec	r0
     66c:	e2 f7       	brpl	.-8      	; 0x666 <out_c+0x2a>
     66e:	26 2b       	or	r18, r22
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18
	if(_dat)
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	88 23       	and	r24, r24
     678:	b1 f0       	breq	.+44     	; 0x6a6 <out_c+0x6a>
		PORTC |= _BV(_bit);
     67a:	85 e3       	ldi	r24, 0x35	; 53
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	25 e3       	ldi	r18, 0x35	; 53
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	f9 01       	movw	r30, r18
     684:	20 81       	ld	r18, Z
     686:	62 2f       	mov	r22, r18
     688:	29 81       	ldd	r18, Y+1	; 0x01
     68a:	42 2f       	mov	r20, r18
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	21 e0       	ldi	r18, 0x01	; 1
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	04 2e       	mov	r0, r20
     694:	02 c0       	rjmp	.+4      	; 0x69a <out_c+0x5e>
     696:	22 0f       	add	r18, r18
     698:	33 1f       	adc	r19, r19
     69a:	0a 94       	dec	r0
     69c:	e2 f7       	brpl	.-8      	; 0x696 <out_c+0x5a>
     69e:	26 2b       	or	r18, r22
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
     6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <out_c+0x96>
	else
		PORTC &= ~_BV(_bit);
     6a6:	85 e3       	ldi	r24, 0x35	; 53
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	25 e3       	ldi	r18, 0x35	; 53
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	f9 01       	movw	r30, r18
     6b0:	20 81       	ld	r18, Z
     6b2:	62 2f       	mov	r22, r18
     6b4:	29 81       	ldd	r18, Y+1	; 0x01
     6b6:	42 2f       	mov	r20, r18
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	21 e0       	ldi	r18, 0x01	; 1
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	04 2e       	mov	r0, r20
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <out_c+0x8a>
     6c2:	22 0f       	add	r18, r18
     6c4:	33 1f       	adc	r19, r19
     6c6:	0a 94       	dec	r0
     6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <out_c+0x86>
     6ca:	20 95       	com	r18
     6cc:	26 23       	and	r18, r22
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 83       	st	Z, r18

}
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	cf 91       	pop	r28
     6d8:	df 91       	pop	r29
     6da:	08 95       	ret

000006dc <out_d>:
void out_d(char _bit,char _dat) 
{
     6dc:	df 93       	push	r29
     6de:	cf 93       	push	r28
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <out_d+0x6>
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	89 83       	std	Y+1, r24	; 0x01
     6e8:	6a 83       	std	Y+2, r22	; 0x02
	DDRD |= _BV(_bit);
     6ea:	81 e3       	ldi	r24, 0x31	; 49
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	21 e3       	ldi	r18, 0x31	; 49
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	62 2f       	mov	r22, r18
     6f8:	29 81       	ldd	r18, Y+1	; 0x01
     6fa:	42 2f       	mov	r20, r18
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	21 e0       	ldi	r18, 0x01	; 1
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	04 2e       	mov	r0, r20
     704:	02 c0       	rjmp	.+4      	; 0x70a <out_d+0x2e>
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	0a 94       	dec	r0
     70c:	e2 f7       	brpl	.-8      	; 0x706 <out_d+0x2a>
     70e:	26 2b       	or	r18, r22
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
	if(_dat)
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	88 23       	and	r24, r24
     718:	b1 f0       	breq	.+44     	; 0x746 <out_d+0x6a>
		PORTD |= _BV(_bit);
     71a:	82 e3       	ldi	r24, 0x32	; 50
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	22 e3       	ldi	r18, 0x32	; 50
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	f9 01       	movw	r30, r18
     724:	20 81       	ld	r18, Z
     726:	62 2f       	mov	r22, r18
     728:	29 81       	ldd	r18, Y+1	; 0x01
     72a:	42 2f       	mov	r20, r18
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	04 2e       	mov	r0, r20
     734:	02 c0       	rjmp	.+4      	; 0x73a <out_d+0x5e>
     736:	22 0f       	add	r18, r18
     738:	33 1f       	adc	r19, r19
     73a:	0a 94       	dec	r0
     73c:	e2 f7       	brpl	.-8      	; 0x736 <out_d+0x5a>
     73e:	26 2b       	or	r18, r22
     740:	fc 01       	movw	r30, r24
     742:	20 83       	st	Z, r18
     744:	16 c0       	rjmp	.+44     	; 0x772 <out_d+0x96>
	else
		PORTD &= ~_BV(_bit);
     746:	82 e3       	ldi	r24, 0x32	; 50
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	22 e3       	ldi	r18, 0x32	; 50
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	f9 01       	movw	r30, r18
     750:	20 81       	ld	r18, Z
     752:	62 2f       	mov	r22, r18
     754:	29 81       	ldd	r18, Y+1	; 0x01
     756:	42 2f       	mov	r20, r18
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	04 2e       	mov	r0, r20
     760:	02 c0       	rjmp	.+4      	; 0x766 <out_d+0x8a>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	0a 94       	dec	r0
     768:	e2 f7       	brpl	.-8      	; 0x762 <out_d+0x86>
     76a:	20 95       	com	r18
     76c:	26 23       	and	r18, r22
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
	
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	cf 91       	pop	r28
     778:	df 91       	pop	r29
     77a:	08 95       	ret

0000077c <__vector_8>:
#define all 3
unsigned char _duty1=0,_duty2=0; 
char pwm_ini =0;

SIGNAL (SIG_OVERFLOW1) // Interval 1 ms
{
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	2f 93       	push	r18
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	OCR1AL = _duty1; 
     798:	8a e4       	ldi	r24, 0x4A	; 74
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	20 91 70 00 	lds	r18, 0x0070
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
	OCR1BL = _duty2;
     7a4:	88 e4       	ldi	r24, 0x48	; 72
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	20 91 71 00 	lds	r18, 0x0071
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
}
     7b0:	cf 91       	pop	r28
     7b2:	df 91       	pop	r29
     7b4:	ff 91       	pop	r31
     7b6:	ef 91       	pop	r30
     7b8:	9f 91       	pop	r25
     7ba:	8f 91       	pop	r24
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <pwm_init>:

void pwm_init()
{
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |= (1<<WGM10);
     7d0:	8f e4       	ldi	r24, 0x4F	; 79
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	2f e4       	ldi	r18, 0x4F	; 79
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	f9 01       	movw	r30, r18
     7da:	20 81       	ld	r18, Z
     7dc:	21 60       	ori	r18, 0x01	; 1
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
	TCCR1B = (1<<CS12)|(1<<CS10)|(1<<WGM12);
     7e2:	8e e4       	ldi	r24, 0x4E	; 78
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	2d e0       	ldi	r18, 0x0D	; 13
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18
	TIFR |= 1<<TOV1; 	//Clear TOV1 / clear
     7ec:	88 e5       	ldi	r24, 0x58	; 88
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	28 e5       	ldi	r18, 0x58	; 88
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	f9 01       	movw	r30, r18
     7f6:	20 81       	ld	r18, Z
     7f8:	24 60       	ori	r18, 0x04	; 4
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18
	TIMSK |= 1<<TOIE1; 	//Enable Timer0 Overflow Interrupt
     7fe:	89 e5       	ldi	r24, 0x59	; 89
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	29 e5       	ldi	r18, 0x59	; 89
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	f9 01       	movw	r30, r18
     808:	20 81       	ld	r18, Z
     80a:	24 60       	ori	r18, 0x04	; 4
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18
	//timer_enable_int(_BV(TOIE1));
	sei();
     810:	78 94       	sei
}
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <pwm>:
void pwm(char channel,unsigned int duty)
{
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	00 d0       	rcall	.+0      	; 0x81e <pwm+0x6>
     81e:	0f 92       	push	r0
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	89 83       	std	Y+1, r24	; 0x01
     826:	7b 83       	std	Y+3, r23	; 0x03
     828:	6a 83       	std	Y+2, r22	; 0x02
	duty = (duty*255)/100;
     82a:	2a 81       	ldd	r18, Y+2	; 0x02
     82c:	3b 81       	ldd	r19, Y+3	; 0x03
     82e:	c9 01       	movw	r24, r18
     830:	ac 01       	movw	r20, r24
     832:	44 0f       	add	r20, r20
     834:	55 1f       	adc	r21, r21
     836:	ca 01       	movw	r24, r20
     838:	96 95       	lsr	r25
     83a:	98 2f       	mov	r25, r24
     83c:	88 27       	eor	r24, r24
     83e:	97 95       	ror	r25
     840:	87 95       	ror	r24
     842:	84 1b       	sub	r24, r20
     844:	95 0b       	sbc	r25, r21
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	24 e6       	ldi	r18, 0x64	; 100
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	b9 01       	movw	r22, r18
     850:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__udivmodhi4>
     854:	9b 01       	movw	r18, r22
     856:	3b 83       	std	Y+3, r19	; 0x03
     858:	2a 83       	std	Y+2, r18	; 0x02
	if(pwm_ini==0)
     85a:	80 91 72 00 	lds	r24, 0x0072
     85e:	88 23       	and	r24, r24
     860:	29 f4       	brne	.+10     	; 0x86c <pwm+0x54>
	{
		pwm_init();
     862:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pwm_init>
		pwm_ini=1;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 72 00 	sts	0x0072, r24
	}
	if(channel==2)
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	d9 f4       	brne	.+54     	; 0x8a8 <pwm+0x90>
	{
		TCCR1A |= _BV(COM1A1);
     872:	8f e4       	ldi	r24, 0x4F	; 79
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	2f e4       	ldi	r18, 0x4F	; 79
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	f9 01       	movw	r30, r18
     87c:	20 81       	ld	r18, Z
     87e:	20 68       	ori	r18, 0x80	; 128
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
		DDRD |= _BV(PD5);
     884:	81 e3       	ldi	r24, 0x31	; 49
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	21 e3       	ldi	r18, 0x31	; 49
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	f9 01       	movw	r30, r18
     88e:	20 81       	ld	r18, Z
     890:	20 62       	ori	r18, 0x20	; 32
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
		OCR1AL = duty;
     896:	8a e4       	ldi	r24, 0x4A	; 74
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	2a 81       	ldd	r18, Y+2	; 0x02
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
		_duty1 = duty;
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	80 93 70 00 	sts	0x0070, r24
     8a6:	1d c0       	rjmp	.+58     	; 0x8e2 <pwm+0xca>
	}
	else if(channel==1)
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	d1 f4       	brne	.+52     	; 0x8e2 <pwm+0xca>
	{
		TCCR1A |= _BV(COM1B1);
     8ae:	8f e4       	ldi	r24, 0x4F	; 79
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	2f e4       	ldi	r18, 0x4F	; 79
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	f9 01       	movw	r30, r18
     8b8:	20 81       	ld	r18, Z
     8ba:	20 62       	ori	r18, 0x20	; 32
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
		DDRD |= _BV(PD4);
     8c0:	81 e3       	ldi	r24, 0x31	; 49
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	21 e3       	ldi	r18, 0x31	; 49
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	f9 01       	movw	r30, r18
     8ca:	20 81       	ld	r18, Z
     8cc:	20 61       	ori	r18, 0x10	; 16
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
		OCR1BL = duty;
     8d2:	88 e4       	ldi	r24, 0x48	; 72
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	2a 81       	ldd	r18, Y+2	; 0x02
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
		_duty2 = duty;
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	80 93 71 00 	sts	0x0071, r24
	}
}
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	08 95       	ret

000008ee <motor>:
void motor(char _channel,int _power)
{
     8ee:	df 93       	push	r29
     8f0:	cf 93       	push	r28
     8f2:	00 d0       	rcall	.+0      	; 0x8f4 <motor+0x6>
     8f4:	0f 92       	push	r0
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	89 83       	std	Y+1, r24	; 0x01
     8fc:	7b 83       	std	Y+3, r23	; 0x03
     8fe:	6a 83       	std	Y+2, r22	; 0x02
	if(_power>0)
     900:	8a 81       	ldd	r24, Y+2	; 0x02
     902:	9b 81       	ldd	r25, Y+3	; 0x03
     904:	18 16       	cp	r1, r24
     906:	19 06       	cpc	r1, r25
     908:	f4 f4       	brge	.+60     	; 0x946 <motor+0x58>
	{
		pwm(_channel,_power);
     90a:	2a 81       	ldd	r18, Y+2	; 0x02
     90c:	3b 81       	ldd	r19, Y+3	; 0x03
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	b9 01       	movw	r22, r18
     912:	0e 94 0c 04 	call	0x818	; 0x818 <pwm>
		if(_channel==2)
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	82 30       	cpi	r24, 0x02	; 2
     91a:	49 f4       	brne	.+18     	; 0x92e <motor+0x40>
		{
			out_d(7,1);		
     91c:	87 e0       	ldi	r24, 0x07	; 7
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
			out_d(6,0);
     924:	86 e0       	ldi	r24, 0x06	; 6
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
     92c:	2f c0       	rjmp	.+94     	; 0x98c <motor+0x9e>
		}
		else if(_channel==1)
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	61 f5       	brne	.+88     	; 0x98c <motor+0x9e>
		{
			out_d(2,1);		
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
			out_d(3,0);
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
     944:	23 c0       	rjmp	.+70     	; 0x98c <motor+0x9e>
		}
	}
	else
	{
		
		pwm(_channel,abs(_power));
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	9b 81       	ldd	r25, Y+3	; 0x03
     94a:	99 23       	and	r25, r25
     94c:	1c f4       	brge	.+6      	; 0x954 <motor+0x66>
     94e:	90 95       	com	r25
     950:	81 95       	neg	r24
     952:	9f 4f       	sbci	r25, 0xFF	; 255
     954:	9c 01       	movw	r18, r24
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	b9 01       	movw	r22, r18
     95a:	0e 94 0c 04 	call	0x818	; 0x818 <pwm>
		if(_channel==2)
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	49 f4       	brne	.+18     	; 0x976 <motor+0x88>
		{
			out_d(7,0);
     964:	87 e0       	ldi	r24, 0x07	; 7
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
			out_d(6,1);
     96c:	86 e0       	ldi	r24, 0x06	; 6
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
     974:	0b c0       	rjmp	.+22     	; 0x98c <motor+0x9e>
		}
		else if(_channel==1)
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	41 f4       	brne	.+16     	; 0x98c <motor+0x9e>
		{
			out_d(2,0);
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
			out_d(3,1);
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
		}	
	
	}
}
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	08 95       	ret

00000998 <motor_stop>:
void motor_stop(char _channel)
{
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	0f 92       	push	r0
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	89 83       	std	Y+1, r24	; 0x01
	pwm(_channel,0);
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	0e 94 0c 04 	call	0x818	; 0x818 <pwm>
	if(_channel==2 ||_channel==3)
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	19 f0       	breq	.+6      	; 0x9ba <motor_stop+0x22>
     9b4:	89 81       	ldd	r24, Y+1	; 0x01
     9b6:	83 30       	cpi	r24, 0x03	; 3
     9b8:	41 f4       	brne	.+16     	; 0x9ca <motor_stop+0x32>
	{
		out_d(7,0);		
     9ba:	87 e0       	ldi	r24, 0x07	; 7
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
		out_d(6,0);
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
	}
	if(_channel==1||_channel==3)
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	19 f0       	breq	.+6      	; 0x9d6 <motor_stop+0x3e>
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	83 30       	cpi	r24, 0x03	; 3
     9d4:	41 f4       	brne	.+16     	; 0x9e6 <motor_stop+0x4e>
	{
		out_d(2,0);		
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
		out_d(3,0);
     9de:	83 e0       	ldi	r24, 0x03	; 3
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
	}

	
}
     9e6:	0f 90       	pop	r0
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <sleep>:
#ifndef _SLEEP_H_
#define _SLEEP_H_

void sleep(unsigned int ms)
{
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <sleep+0x6>
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <sleep+0x8>
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <sleep+0xa>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	9e 83       	std	Y+6, r25	; 0x06
     9fe:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i,j;
	for(i=0;i<ms;i++)
     a00:	1a 82       	std	Y+2, r1	; 0x02
     a02:	19 82       	std	Y+1, r1	; 0x01
     a04:	13 c0       	rjmp	.+38     	; 0xa2c <sleep+0x3e>
		for(j=0;j<795;j++);
     a06:	1c 82       	std	Y+4, r1	; 0x04
     a08:	1b 82       	std	Y+3, r1	; 0x03
     a0a:	05 c0       	rjmp	.+10     	; 0xa16 <sleep+0x28>
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	9c 83       	std	Y+4, r25	; 0x04
     a14:	8b 83       	std	Y+3, r24	; 0x03
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	23 e0       	ldi	r18, 0x03	; 3
     a1c:	8b 31       	cpi	r24, 0x1B	; 27
     a1e:	92 07       	cpc	r25, r18
     a20:	a8 f3       	brcs	.-22     	; 0xa0c <sleep+0x1e>
#define _SLEEP_H_

void sleep(unsigned int ms)
{
	unsigned int i,j;
	for(i=0;i<ms;i++)
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9a 81       	ldd	r25, Y+2	; 0x02
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	29 81       	ldd	r18, Y+1	; 0x01
     a2e:	3a 81       	ldd	r19, Y+2	; 0x02
     a30:	8d 81       	ldd	r24, Y+5	; 0x05
     a32:	9e 81       	ldd	r25, Y+6	; 0x06
     a34:	28 17       	cp	r18, r24
     a36:	39 07       	cpc	r19, r25
     a38:	30 f3       	brcs	.-52     	; 0xa06 <sleep+0x18>
		for(j=0;j<795;j++);
}
     a3a:	26 96       	adiw	r28, 0x06	; 6
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	cf 91       	pop	r28
     a48:	df 91       	pop	r29
     a4a:	08 95       	ret

00000a4c <analog>:

#include <avr/io.h>
#define knob() analog(7)
#define KNOB knob
unsigned int analog(unsigned char channel)
{
     a4c:	df 93       	push	r29
     a4e:	cf 93       	push	r28
     a50:	00 d0       	rcall	.+0      	; 0xa52 <analog+0x6>
     a52:	0f 92       	push	r0
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int adc_val;
	ADMUX = 0x40; 
     a5a:	87 e2       	ldi	r24, 0x27	; 39
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	20 e4       	ldi	r18, 0x40	; 64
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
	ADMUX |= channel;	// Sigle end mode
     a64:	87 e2       	ldi	r24, 0x27	; 39
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	27 e2       	ldi	r18, 0x27	; 39
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	f9 01       	movw	r30, r18
     a6e:	30 81       	ld	r19, Z
     a70:	2b 81       	ldd	r18, Y+3	; 0x03
     a72:	23 2b       	or	r18, r19
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
	ADCSRA = 0xC6;
     a78:	86 e2       	ldi	r24, 0x26	; 38
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	26 ec       	ldi	r18, 0xC6	; 198
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
	while((ADCSRA & (1<<ADSC)));
     a82:	00 00       	nop
     a84:	86 e2       	ldi	r24, 0x26	; 38
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	fc 01       	movw	r30, r24
     a8a:	80 81       	ld	r24, Z
     a8c:	88 2f       	mov	r24, r24
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	80 74       	andi	r24, 0x40	; 64
     a92:	90 70       	andi	r25, 0x00	; 0
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	b1 f7       	brne	.-20     	; 0xa84 <analog+0x38>
	adc_val = ADCL; 
     a98:	84 e2       	ldi	r24, 0x24	; 36
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 81       	ld	r24, Z
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9a 83       	std	Y+2, r25	; 0x02
     aa6:	89 83       	std	Y+1, r24	; 0x01
	adc_val += (ADCH*256);
     aa8:	85 e2       	ldi	r24, 0x25	; 37
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	fc 01       	movw	r30, r24
     aae:	80 81       	ld	r24, Z
     ab0:	88 2f       	mov	r24, r24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	98 2f       	mov	r25, r24
     ab6:	88 27       	eor	r24, r24
     ab8:	29 81       	ldd	r18, Y+1	; 0x01
     aba:	3a 81       	ldd	r19, Y+2	; 0x02
     abc:	82 0f       	add	r24, r18
     abe:	93 1f       	adc	r25, r19
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	89 83       	std	Y+1, r24	; 0x01
	return(adc_val);
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	cf 91       	pop	r28
     ad0:	df 91       	pop	r29
     ad2:	08 95       	ret

00000ad4 <lcd_clk>:
//------------------------------------------------------------------------------------//
void lcd_init(void);
char lcd_ini=0,_lcd_clear_display=0;

void lcd_clk(void)				/* Pulse LCD clock on EN*/
{
     ad4:	df 93       	push	r29
     ad6:	cf 93       	push	r28
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
  EN(1);
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
  sleep(1);
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
  EN(0);
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
  sleep(1);
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
     afc:	cf 91       	pop	r28
     afe:	df 91       	pop	r29
     b00:	08 95       	ret

00000b02 <lcd_command>:

void lcd_command(unsigned char outbyte)	/* Send command (4bit operation) */
{
     b02:	df 93       	push	r29
     b04:	cf 93       	push	r28
     b06:	0f 92       	push	r0
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	89 83       	std	Y+1, r24	; 0x01
  if(lcd_ini==0)
     b0e:	80 91 73 00 	lds	r24, 0x0073
     b12:	88 23       	and	r24, r24
     b14:	29 f4       	brne	.+10     	; 0xb20 <lcd_command+0x1e>
  {
  	lcd_ini=1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 73 00 	sts	0x0073, r24
	lcd_init();
     b1c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <lcd_init>
  }
  RS(0);		// Command
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
  PORTC=(PORTC&0x0f)|(outbyte&0xf0);
     b28:	85 e3       	ldi	r24, 0x35	; 53
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	25 e3       	ldi	r18, 0x35	; 53
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	f9 01       	movw	r30, r18
     b32:	20 81       	ld	r18, Z
     b34:	32 2f       	mov	r19, r18
     b36:	3f 70       	andi	r19, 0x0F	; 15
     b38:	29 81       	ldd	r18, Y+1	; 0x01
     b3a:	20 7f       	andi	r18, 0xF0	; 240
     b3c:	23 2b       	or	r18, r19
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
  lcd_clk();
     b42:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
  PORTC=(PORTC&0x0f)|((outbyte<<4)&0xf0);
     b46:	85 e3       	ldi	r24, 0x35	; 53
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	25 e3       	ldi	r18, 0x35	; 53
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	42 2f       	mov	r20, r18
     b54:	4f 70       	andi	r20, 0x0F	; 15
     b56:	29 81       	ldd	r18, Y+1	; 0x01
     b58:	22 2f       	mov	r18, r18
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	22 95       	swap	r18
     b5e:	32 95       	swap	r19
     b60:	30 7f       	andi	r19, 0xF0	; 240
     b62:	32 27       	eor	r19, r18
     b64:	20 7f       	andi	r18, 0xF0	; 240
     b66:	32 27       	eor	r19, r18
     b68:	24 2b       	or	r18, r20
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
  lcd_clk();
     b6e:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
}
     b72:	0f 90       	pop	r0
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <lcd_text>:

void lcd_text(unsigned char outbyte) /* Send Data (4bit operation) */
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	0f 92       	push	r0
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	89 83       	std	Y+1, r24	; 0x01
  if(lcd_ini==0)
     b86:	80 91 73 00 	lds	r24, 0x0073
     b8a:	88 23       	and	r24, r24
     b8c:	29 f4       	brne	.+10     	; 0xb98 <lcd_text+0x1e>
  {
  	lcd_ini=1;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 73 00 	sts	0x0073, r24
	lcd_init();
     b94:	0e 94 4d 06 	call	0xc9a	; 0xc9a <lcd_init>
  }
  RS(1);		// Display
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
  PORTC=(PORTC&0x0f)|(outbyte&0xf0);
     ba0:	85 e3       	ldi	r24, 0x35	; 53
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	25 e3       	ldi	r18, 0x35	; 53
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	f9 01       	movw	r30, r18
     baa:	20 81       	ld	r18, Z
     bac:	32 2f       	mov	r19, r18
     bae:	3f 70       	andi	r19, 0x0F	; 15
     bb0:	29 81       	ldd	r18, Y+1	; 0x01
     bb2:	20 7f       	andi	r18, 0xF0	; 240
     bb4:	23 2b       	or	r18, r19
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
  lcd_clk();
     bba:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
  PORTC=(PORTC&0x0f)|((outbyte<<4)&0xf0);
     bbe:	85 e3       	ldi	r24, 0x35	; 53
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	25 e3       	ldi	r18, 0x35	; 53
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	f9 01       	movw	r30, r18
     bc8:	20 81       	ld	r18, Z
     bca:	42 2f       	mov	r20, r18
     bcc:	4f 70       	andi	r20, 0x0F	; 15
     bce:	29 81       	ldd	r18, Y+1	; 0x01
     bd0:	22 2f       	mov	r18, r18
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	22 95       	swap	r18
     bd6:	32 95       	swap	r19
     bd8:	30 7f       	andi	r19, 0xF0	; 240
     bda:	32 27       	eor	r19, r18
     bdc:	20 7f       	andi	r18, 0xF0	; 240
     bde:	32 27       	eor	r19, r18
     be0:	24 2b       	or	r18, r20
     be2:	fc 01       	movw	r30, r24
     be4:	20 83       	st	Z, r18
  lcd_clk();
     be6:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
}
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <lcd_puts>:
//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------------------ Function show string message ----------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd_puts(unsigned char line,char *p)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <lcd_puts+0x6>
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	7b 83       	std	Y+3, r23	; 0x03
     c02:	6a 83       	std	Y+2, r22	; 0x02
	lcd_origin();         // Set origin address of LCD
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
	lcd_command(line);			// Set address 00H of LCD
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
	while(*p)                  // Check data pointer = 0?
     c10:	0b c0       	rjmp	.+22     	; 0xc28 <lcd_puts+0x36>
	{
	 lcd_text(*p);             // Send data to LCD
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	9b 81       	ldd	r25, Y+3	; 0x03
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
     c1a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 p++;                      // Increase address 1 time 
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	9b 83       	std	Y+3, r25	; 0x03
     c26:	8a 83       	std	Y+2, r24	; 0x02
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd_puts(unsigned char line,char *p)
{
	lcd_origin();         // Set origin address of LCD
	lcd_command(line);			// Set address 00H of LCD
	while(*p)                  // Check data pointer = 0?
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	9b 81       	ldd	r25, Y+3	; 0x03
     c2c:	fc 01       	movw	r30, r24
     c2e:	80 81       	ld	r24, Z
     c30:	88 23       	and	r24, r24
     c32:	79 f7       	brne	.-34     	; 0xc12 <lcd_puts+0x20>
	{
	 lcd_text(*p);             // Send data to LCD
	 p++;                      // Increase address 1 time 
	}
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <inttolcd>:

//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------- Convert integer to ascii for display on LCD ---------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void inttolcd(unsigned char posi, long value)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	65 97       	sbiw	r28, 0x15	; 21
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	89 8b       	std	Y+17, r24	; 0x11
     c56:	4a 8b       	std	Y+18, r20	; 0x12
     c58:	5b 8b       	std	Y+19, r21	; 0x13
     c5a:	6c 8b       	std	Y+20, r22	; 0x14
     c5c:	7d 8b       	std	Y+21, r23	; 0x15
	char buff[16];			// For keep string send to LCD 
	ltoa(value,&buff[0],10);
     c5e:	8a 89       	ldd	r24, Y+18	; 0x12
     c60:	9b 89       	ldd	r25, Y+19	; 0x13
     c62:	ac 89       	ldd	r26, Y+20	; 0x14
     c64:	bd 89       	ldd	r27, Y+21	; 0x15
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	9e 01       	movw	r18, r28
     c6c:	2f 5f       	subi	r18, 0xFF	; 255
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
     c70:	a9 01       	movw	r20, r18
     c72:	2a e0       	ldi	r18, 0x0A	; 10
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <ltoa>
	lcd_puts(posi,buff);  	// Send integer to LCD
     c7a:	89 89       	ldd	r24, Y+17	; 0x11
     c7c:	9e 01       	movw	r18, r28
     c7e:	2f 5f       	subi	r18, 0xFF	; 255
     c80:	3f 4f       	sbci	r19, 0xFF	; 255
     c82:	b9 01       	movw	r22, r18
     c84:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <lcd_puts>
}
     c88:	65 96       	adiw	r28, 0x15	; 21
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <lcd_init>:


void lcd_init(void)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
  PORTC = 0x00;
     ca2:	85 e3       	ldi	r24, 0x35	; 53
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	fc 01       	movw	r30, r24
     ca8:	10 82       	st	Z, r1
  DDRC = 0xFC;
     caa:	84 e3       	ldi	r24, 0x34	; 52
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	2c ef       	ldi	r18, 0xFC	; 252
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18
  EN(0);						// Init. EN = 0
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
  RS(0);						// Init. RS = 0
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>

  sleep(500);
     cc4:	84 ef       	ldi	r24, 0xF4	; 244
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
  PORTC=(PORTC&0x0f)|0x30;	// Force LCD receive 1 times command per pulse
     ccc:	85 e3       	ldi	r24, 0x35	; 53
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	25 e3       	ldi	r18, 0x35	; 53
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	f9 01       	movw	r30, r18
     cd6:	20 81       	ld	r18, Z
     cd8:	2f 70       	andi	r18, 0x0F	; 15
     cda:	20 63       	ori	r18, 0x30	; 48
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
  lcd_clk();
     ce0:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
  PORTC=(PORTC&0x0f)|0x30;	// (do 3 times for ensure LCD operation forced)
     ce4:	85 e3       	ldi	r24, 0x35	; 53
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	25 e3       	ldi	r18, 0x35	; 53
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	f9 01       	movw	r30, r18
     cee:	20 81       	ld	r18, Z
     cf0:	2f 70       	andi	r18, 0x0F	; 15
     cf2:	20 63       	ori	r18, 0x30	; 48
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
  lcd_clk();
     cf8:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
  PORTC=(PORTC&0x0f)|0x30;
     cfc:	85 e3       	ldi	r24, 0x35	; 53
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	25 e3       	ldi	r18, 0x35	; 53
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	2f 70       	andi	r18, 0x0F	; 15
     d0a:	20 63       	ori	r18, 0x30	; 48
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 83       	st	Z, r18
  lcd_clk();
     d10:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>

  PORTC=(PORTC&0x0f)|0x20;	// Switch to real 4 bit transfer mode on first
     d14:	85 e3       	ldi	r24, 0x35	; 53
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	25 e3       	ldi	r18, 0x35	; 53
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	f9 01       	movw	r30, r18
     d1e:	20 81       	ld	r18, Z
     d20:	2f 70       	andi	r18, 0x0F	; 15
     d22:	20 62       	ori	r18, 0x20	; 32
     d24:	fc 01       	movw	r30, r24
     d26:	20 83       	st	Z, r18
  lcd_clk();
     d28:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>

  lcd_command(0x28);		// Send real command to 4 bit operation and set N=1, F=0
     d2c:	88 e2       	ldi	r24, 0x28	; 40
     d2e:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
  lcd_command(0x01);		// Clear all
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
  lcd_command(0x06);		// Increase cursor automatic after byte
     d38:	86 e0       	ldi	r24, 0x06	; 6
     d3a:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
  lcd_command(0x0C);		// Display on, no cursor, not blink
     d3e:	8c e0       	ldi	r24, 0x0C	; 12
     d40:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
  lcd_command(0x02);		// Home position
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
  lcd_command(0x01);		// Clear all again
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
}
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <lcd>:
//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------------------ Function LCD display and %d support(Beta version) ----------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd(char *p,...)
{
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	67 97       	sbiw	r28, 0x17	; 23
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
	char *arg,**pp;	// Poter of point
	char *ptr,char_count=0,buff[16];
     d6e:	1d 82       	std	Y+5, r1	; 0x05
	pp = &p;
     d70:	8e e1       	ldi	r24, 0x1E	; 30
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	8c 0f       	add	r24, r28
     d76:	9d 1f       	adc	r25, r29
     d78:	9f 83       	std	Y+7, r25	; 0x07
     d7a:	8e 83       	std	Y+6, r24	; 0x06
	ptr = p;	// Copy address
     d7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d80:	9c 83       	std	Y+4, r25	; 0x04
     d82:	8b 83       	std	Y+3, r24	; 0x03
	arg = pp;	// Copy address of p point	
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	9f 81       	ldd	r25, Y+7	; 0x07
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
	
	lcd_origin();       // Set origin address of LCD
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
	lcd_command(0x80);	// Set address 00H of LCD
     d92:	80 e8       	ldi	r24, 0x80	; 128
     d94:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
	if(_lcd_clear_display)
     d98:	80 91 74 00 	lds	r24, 0x0074
     d9c:	88 23       	and	r24, r24
     d9e:	29 f0       	breq	.+10     	; 0xdaa <lcd+0x54>
	{
		_lcd_clear_display = 0;
     da0:	10 92 74 00 	sts	0x0074, r1
		lcd_clear();
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
	}
	arg += 2;	// Cross 2 time go to Origin of first parameter 
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	02 96       	adiw	r24, 0x02	; 2
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
	
	while(*ptr)                 // Check data pointer = 0?
     db4:	85 c1       	rjmp	.+778    	; 0x10c0 <lcd+0x36a>
	{
	 	if(TEST_CHAR_TYPE(ptr))
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	fc 01       	movw	r30, r24
     dbc:	80 81       	ld	r24, Z
     dbe:	85 32       	cpi	r24, 0x25	; 37
     dc0:	81 f5       	brne	.+96     	; 0xe22 <lcd+0xcc>
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	fc 01       	movw	r30, r24
     dca:	80 81       	ld	r24, Z
     dcc:	83 36       	cpi	r24, 0x63	; 99
     dce:	39 f0       	breq	.+14     	; 0xdde <lcd+0x88>
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	fc 01       	movw	r30, r24
     dd8:	80 81       	ld	r24, Z
     dda:	83 34       	cpi	r24, 0x43	; 67
     ddc:	11 f5       	brne	.+68     	; 0xe22 <lcd+0xcc>
		{
			char_count++;
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	8d 83       	std	Y+5, r24	; 0x05
			if(char_count==17)
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	81 31       	cpi	r24, 0x11	; 17
     de8:	31 f4       	brne	.+12     	; 0xdf6 <lcd+0xa0>
			{
				lcd_origin();
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
				lcd_command(0xC0);
     df0:	80 ec       	ldi	r24, 0xC0	; 192
     df2:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
			}
			if(char_count>32)
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	81 32       	cpi	r24, 0x21	; 33
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <lcd+0xa8>
			{
				char_count = 0;
     dfc:	1d 82       	std	Y+5, r1	; 0x05
			}
			lcd_text(toascii(*arg));             // Send data to LCD
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	fc 01       	movw	r30, r24
     e04:	80 81       	ld	r24, Z
     e06:	8f 77       	andi	r24, 0x7F	; 127
     e08:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 	
			arg+=2;	// Cross address char type
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	02 96       	adiw	r24, 0x02	; 2
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	9c 83       	std	Y+4, r25	; 0x04
     e1e:	8b 83       	std	Y+3, r24	; 0x03
     e20:	4a c1       	rjmp	.+660    	; 0x10b6 <lcd+0x360>
		}
		else if(TEST_INT_TYPE(ptr))
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	85 32       	cpi	r24, 0x25	; 37
     e2c:	09 f0       	breq	.+2      	; 0xe30 <lcd+0xda>
     e2e:	51 c0       	rjmp	.+162    	; 0xed2 <lcd+0x17c>
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	fc 01       	movw	r30, r24
     e38:	80 81       	ld	r24, Z
     e3a:	84 36       	cpi	r24, 0x64	; 100
     e3c:	41 f0       	breq	.+16     	; 0xe4e <lcd+0xf8>
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	fc 01       	movw	r30, r24
     e46:	80 81       	ld	r24, Z
     e48:	84 34       	cpi	r24, 0x44	; 68
     e4a:	09 f0       	breq	.+2      	; 0xe4e <lcd+0xf8>
     e4c:	42 c0       	rjmp	.+132    	; 0xed2 <lcd+0x17c>
		{
			p = ltoa(*(int *)arg,&buff[0],10);
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	fc 01       	movw	r30, r24
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	aa 27       	eor	r26, r26
     e5a:	97 fd       	sbrc	r25, 7
     e5c:	a0 95       	com	r26
     e5e:	ba 2f       	mov	r27, r26
     e60:	9e 01       	movw	r18, r28
     e62:	28 5f       	subi	r18, 0xF8	; 248
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	a9 01       	movw	r20, r18
     e6c:	2a e0       	ldi	r18, 0x0A	; 10
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <ltoa>
     e74:	9f 8f       	std	Y+31, r25	; 0x1f
     e76:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     e78:	1b c0       	rjmp	.+54     	; 0xeb0 <lcd+0x15a>
			{
	 			char_count++;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	8d 83       	std	Y+5, r24	; 0x05
				if(char_count==17)
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	81 31       	cpi	r24, 0x11	; 17
     e84:	31 f4       	brne	.+12     	; 0xe92 <lcd+0x13c>
				{
					lcd_origin();
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
					lcd_command(0xC0);
     e8c:	80 ec       	ldi	r24, 0xC0	; 192
     e8e:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
				}
				if(char_count>32)
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	81 32       	cpi	r24, 0x21	; 33
     e96:	08 f0       	brcs	.+2      	; 0xe9a <lcd+0x144>
				{
					char_count = 0;
     e98:	1d 82       	std	Y+5, r1	; 0x05
				}
				lcd_text(*p);             // Send data to LCD
     e9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e9c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e9e:	fc 01       	movw	r30, r24
     ea0:	80 81       	ld	r24, Z
     ea2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 			p++;                     // Increase address 1 time 
     ea6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	9f 8f       	std	Y+31, r25	; 0x1f
     eae:	8e 8f       	std	Y+30, r24	; 0x1e
			ptr++;	// Cross %d parameter
		}
		else if(TEST_INT_TYPE(ptr))
		{
			p = ltoa(*(int *)arg,&buff[0],10);
			while(*p)           // Check data pointer = 0?
     eb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     eb4:	fc 01       	movw	r30, r24
     eb6:	80 81       	ld	r24, Z
     eb8:	88 23       	and	r24, r24
     eba:	f9 f6       	brne	.-66     	; 0xe7a <lcd+0x124>
					char_count = 0;
				}
				lcd_text(*p);             // Send data to LCD
	 			p++;                     // Increase address 1 time 
			}
			arg+=2;	// Cross address int type
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	02 96       	adiw	r24, 0x02	; 2
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	9c 83       	std	Y+4, r25	; 0x04
     ece:	8b 83       	std	Y+3, r24	; 0x03
     ed0:	f2 c0       	rjmp	.+484    	; 0x10b6 <lcd+0x360>
		}
		else if(TEST_LONG_TYPE(ptr))
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	85 32       	cpi	r24, 0x25	; 37
     edc:	09 f0       	breq	.+2      	; 0xee0 <lcd+0x18a>
     ede:	4f c0       	rjmp	.+158    	; 0xf7e <lcd+0x228>
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	fc 01       	movw	r30, r24
     ee8:	80 81       	ld	r24, Z
     eea:	8c 36       	cpi	r24, 0x6C	; 108
     eec:	41 f0       	breq	.+16     	; 0xefe <lcd+0x1a8>
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	fc 01       	movw	r30, r24
     ef6:	80 81       	ld	r24, Z
     ef8:	8c 34       	cpi	r24, 0x4C	; 76
     efa:	09 f0       	breq	.+2      	; 0xefe <lcd+0x1a8>
     efc:	40 c0       	rjmp	.+128    	; 0xf7e <lcd+0x228>
		{
			p = ltoa(*(long *)arg,&buff[0],10);
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	fc 01       	movw	r30, r24
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	a2 81       	ldd	r26, Z+2	; 0x02
     f0a:	b3 81       	ldd	r27, Z+3	; 0x03
     f0c:	9e 01       	movw	r18, r28
     f0e:	28 5f       	subi	r18, 0xF8	; 248
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	a9 01       	movw	r20, r18
     f18:	2a e0       	ldi	r18, 0x0A	; 10
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <ltoa>
     f20:	9f 8f       	std	Y+31, r25	; 0x1f
     f22:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     f24:	1b c0       	rjmp	.+54     	; 0xf5c <lcd+0x206>
			{
	 			char_count++;
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	8d 83       	std	Y+5, r24	; 0x05
				if(char_count==17)
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	81 31       	cpi	r24, 0x11	; 17
     f30:	31 f4       	brne	.+12     	; 0xf3e <lcd+0x1e8>
				{
					lcd_origin();
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
					lcd_command(0xC0);
     f38:	80 ec       	ldi	r24, 0xC0	; 192
     f3a:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
				}
				if(char_count>32)
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	81 32       	cpi	r24, 0x21	; 33
     f42:	08 f0       	brcs	.+2      	; 0xf46 <lcd+0x1f0>
				{
					char_count = 0;
     f44:	1d 82       	std	Y+5, r1	; 0x05
				}
				lcd_text(*p);             // Send data to LCD
     f46:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f48:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f4a:	fc 01       	movw	r30, r24
     f4c:	80 81       	ld	r24, Z
     f4e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 			p++;                     // Increase address 1 time 
     f52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f54:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	9f 8f       	std	Y+31, r25	; 0x1f
     f5a:	8e 8f       	std	Y+30, r24	; 0x1e
			ptr++;	// Cross %d parameter
		}
		else if(TEST_LONG_TYPE(ptr))
		{
			p = ltoa(*(long *)arg,&buff[0],10);
			while(*p)           // Check data pointer = 0?
     f5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f5e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f60:	fc 01       	movw	r30, r24
     f62:	80 81       	ld	r24, Z
     f64:	88 23       	and	r24, r24
     f66:	f9 f6       	brne	.-66     	; 0xf26 <lcd+0x1d0>
					char_count = 0;
				}
				lcd_text(*p);             // Send data to LCD
	 			p++;                     // Increase address 1 time 
			}
			arg+=4;	// Cross address long type
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	04 96       	adiw	r24, 0x04	; 4
     f6e:	9a 83       	std	Y+2, r25	; 0x02
     f70:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	8b 83       	std	Y+3, r24	; 0x03
     f7c:	9c c0       	rjmp	.+312    	; 0x10b6 <lcd+0x360>
		}
		else if(TEST_FLOAT_TYPE(ptr))
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	fc 01       	movw	r30, r24
     f84:	80 81       	ld	r24, Z
     f86:	85 32       	cpi	r24, 0x25	; 37
     f88:	09 f0       	breq	.+2      	; 0xf8c <lcd+0x236>
     f8a:	4e c0       	rjmp	.+156    	; 0x1028 <lcd+0x2d2>
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	fc 01       	movw	r30, r24
     f94:	80 81       	ld	r24, Z
     f96:	86 36       	cpi	r24, 0x66	; 102
     f98:	41 f0       	breq	.+16     	; 0xfaa <lcd+0x254>
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	fc 01       	movw	r30, r24
     fa2:	80 81       	ld	r24, Z
     fa4:	86 34       	cpi	r24, 0x46	; 70
     fa6:	09 f0       	breq	.+2      	; 0xfaa <lcd+0x254>
     fa8:	3f c0       	rjmp	.+126    	; 0x1028 <lcd+0x2d2>
		{
			p = dtostrf(*(float *)arg,2,F_PREC,&buff[0]);	// Convert float to string(used libm.a)
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	a2 81       	ldd	r26, Z+2	; 0x02
     fb6:	b3 81       	ldd	r27, Z+3	; 0x03
     fb8:	fe 01       	movw	r30, r28
     fba:	38 96       	adiw	r30, 0x08	; 8
     fbc:	bc 01       	movw	r22, r24
     fbe:	cd 01       	movw	r24, r26
     fc0:	42 e0       	ldi	r20, 0x02	; 2
     fc2:	23 e0       	ldi	r18, 0x03	; 3
     fc4:	8f 01       	movw	r16, r30
     fc6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <dtostrf>
     fca:	9f 8f       	std	Y+31, r25	; 0x1f
     fcc:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     fce:	1b c0       	rjmp	.+54     	; 0x1006 <lcd+0x2b0>
			{
	 			char_count++;
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	8d 83       	std	Y+5, r24	; 0x05
				if(char_count==17)
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	81 31       	cpi	r24, 0x11	; 17
     fda:	31 f4       	brne	.+12     	; 0xfe8 <lcd+0x292>
				{
					lcd_origin();
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
					lcd_command(0xC0);
     fe2:	80 ec       	ldi	r24, 0xC0	; 192
     fe4:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
				}
				if(char_count>32)
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	81 32       	cpi	r24, 0x21	; 33
     fec:	08 f0       	brcs	.+2      	; 0xff0 <lcd+0x29a>
				{
					char_count = 0;
     fee:	1d 82       	std	Y+5, r1	; 0x05
				}
				lcd_text(*p);             // Send data to LCD
     ff0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ff4:	fc 01       	movw	r30, r24
     ff6:	80 81       	ld	r24, Z
     ff8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 			p++;                     // Increase address 1 time 
     ffc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	9f 8f       	std	Y+31, r25	; 0x1f
    1004:	8e 8f       	std	Y+30, r24	; 0x1e
			ptr++;	// Cross %l parameter
		}
		else if(TEST_FLOAT_TYPE(ptr))
		{
			p = dtostrf(*(float *)arg,2,F_PREC,&buff[0]);	// Convert float to string(used libm.a)
			while(*p)           // Check data pointer = 0?
    1006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1008:	9f 8d       	ldd	r25, Y+31	; 0x1f
    100a:	fc 01       	movw	r30, r24
    100c:	80 81       	ld	r24, Z
    100e:	88 23       	and	r24, r24
    1010:	f9 f6       	brne	.-66     	; 0xfd0 <lcd+0x27a>
					char_count = 0;
				}
				lcd_text(*p);             // Send data to LCD
	 			p++;                     // Increase address 1 time 
			}
			arg+=4;	// Cross address long type
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	9a 81       	ldd	r25, Y+2	; 0x02
    1016:	04 96       	adiw	r24, 0x04	; 4
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	47 c0       	rjmp	.+142    	; 0x10b6 <lcd+0x360>
		}
		else if(TEST_CLEAR_NEXT_TYPE(ptr))
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	fc 01       	movw	r30, r24
    102e:	80 81       	ld	r24, Z
    1030:	83 32       	cpi	r24, 0x23	; 35
    1032:	81 f4       	brne	.+32     	; 0x1054 <lcd+0x2fe>
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	fc 01       	movw	r30, r24
    103c:	80 81       	ld	r24, Z
    103e:	83 36       	cpi	r24, 0x63	; 99
    1040:	49 f4       	brne	.+18     	; 0x1054 <lcd+0x2fe>
		{
			_lcd_clear_display = 1;	// Clear display next time 
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	80 93 74 00 	sts	0x0074, r24
			
			ptr++;	// Cross %l parameter
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	31 c0       	rjmp	.+98     	; 0x10b6 <lcd+0x360>
		}
		else if(TEST_NEW_LINE_TYPE(ptr))
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	fc 01       	movw	r30, r24
    105a:	80 81       	ld	r24, Z
    105c:	83 32       	cpi	r24, 0x23	; 35
    105e:	a9 f4       	brne	.+42     	; 0x108a <lcd+0x334>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	fc 01       	movw	r30, r24
    1068:	80 81       	ld	r24, Z
    106a:	8e 36       	cpi	r24, 0x6E	; 110
    106c:	71 f4       	brne	.+28     	; 0x108a <lcd+0x334>
		{
			
			char_count = 17;	// Character start line 2 
    106e:	81 e1       	ldi	r24, 0x11	; 17
    1070:	8d 83       	std	Y+5, r24	; 0x05
			lcd_origin();
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
			lcd_command(0xC0);		
    1078:	80 ec       	ldi	r24, 0xC0	; 192
    107a:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
			ptr++;	// Cross %l parameter
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	9c 83       	std	Y+4, r25	; 0x04
    1086:	8b 83       	std	Y+3, r24	; 0x03
    1088:	16 c0       	rjmp	.+44     	; 0x10b6 <lcd+0x360>
		}
		else
		{
			char_count++;
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	8d 83       	std	Y+5, r24	; 0x05
			if(char_count==17)
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	81 31       	cpi	r24, 0x11	; 17
    1094:	31 f4       	brne	.+12     	; 0x10a2 <lcd+0x34c>
			{
				lcd_origin();
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
				lcd_command(0xC0);
    109c:	80 ec       	ldi	r24, 0xC0	; 192
    109e:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
			}
			if(char_count>32)
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	81 32       	cpi	r24, 0x21	; 33
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <lcd+0x354>
			{
				char_count = 0;
    10a8:	1d 82       	std	Y+5, r1	; 0x05
			}
			lcd_text(*ptr);             // Send data to LCD
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 	}
		
		ptr++;                      // Increase address 1 time 
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
		_lcd_clear_display = 0;
		lcd_clear();
	}
	arg += 2;	// Cross 2 time go to Origin of first parameter 
	
	while(*ptr)                 // Check data pointer = 0?
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	fc 01       	movw	r30, r24
    10c6:	80 81       	ld	r24, Z
    10c8:	88 23       	and	r24, r24
    10ca:	09 f0       	breq	.+2      	; 0x10ce <lcd+0x378>
    10cc:	74 ce       	rjmp	.-792    	; 0xdb6 <lcd+0x60>
	 	}
		
		ptr++;                      // Increase address 1 time 
	}

}
    10ce:	67 96       	adiw	r28, 0x17	; 23
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	08 95       	ret

000010e4 <__vector_9>:
unsigned char activeServo[5]={0,0,0,0,0,0};
unsigned char timeBaseServo[5]={0,0,0,0,0};
unsigned long timerTick=0;

SIGNAL(SIG_OVERFLOW0) // Interval 50 us
{
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	//TCNT0 = 156;	// Reload Interval 50 us  
	TCNT0 = 206;	// Reload Interval 25 us  
    110a:	82 e5       	ldi	r24, 0x52	; 82
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	2e ec       	ldi	r18, 0xCE	; 206
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
	timerTick++;
    1114:	80 91 80 00 	lds	r24, 0x0080
    1118:	90 91 81 00 	lds	r25, 0x0081
    111c:	a0 91 82 00 	lds	r26, 0x0082
    1120:	b0 91 83 00 	lds	r27, 0x0083
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	a1 1d       	adc	r26, r1
    1128:	b1 1d       	adc	r27, r1
    112a:	80 93 80 00 	sts	0x0080, r24
    112e:	90 93 81 00 	sts	0x0081, r25
    1132:	a0 93 82 00 	sts	0x0082, r26
    1136:	b0 93 83 00 	sts	0x0083, r27
	if(timerTick>=1000)
    113a:	80 91 80 00 	lds	r24, 0x0080
    113e:	90 91 81 00 	lds	r25, 0x0081
    1142:	a0 91 82 00 	lds	r26, 0x0082
    1146:	b0 91 83 00 	lds	r27, 0x0083
    114a:	88 3e       	cpi	r24, 0xE8	; 232
    114c:	f3 e0       	ldi	r31, 0x03	; 3
    114e:	9f 07       	cpc	r25, r31
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	af 07       	cpc	r26, r31
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	bf 07       	cpc	r27, r31
    1158:	40 f0       	brcs	.+16     	; 0x116a <__vector_9+0x86>
	{
		timerTick = 0;
    115a:	10 92 80 00 	sts	0x0080, r1
    115e:	10 92 81 00 	sts	0x0081, r1
    1162:	10 92 82 00 	sts	0x0082, r1
    1166:	10 92 83 00 	sts	0x0083, r1
	}
	if(activeServo[0]==1)
    116a:	80 91 76 00 	lds	r24, 0x0076
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	31 f5       	brne	.+76     	; 0x11be <__vector_9+0xda>
	{
		if(timerTick<=timeBaseServo[0])
    1172:	80 91 7b 00 	lds	r24, 0x007B
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	80 91 80 00 	lds	r24, 0x0080
    1182:	90 91 81 00 	lds	r25, 0x0081
    1186:	a0 91 82 00 	lds	r26, 0x0082
    118a:	b0 91 83 00 	lds	r27, 0x0083
    118e:	28 17       	cp	r18, r24
    1190:	39 07       	cpc	r19, r25
    1192:	4a 07       	cpc	r20, r26
    1194:	5b 07       	cpc	r21, r27
    1196:	50 f0       	brcs	.+20     	; 0x11ac <__vector_9+0xc8>
			PORTB |= 0x01;
    1198:	88 e3       	ldi	r24, 0x38	; 56
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	28 e3       	ldi	r18, 0x38	; 56
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	f9 01       	movw	r30, r18
    11a2:	20 81       	ld	r18, Z
    11a4:	21 60       	ori	r18, 0x01	; 1
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
    11aa:	09 c0       	rjmp	.+18     	; 0x11be <__vector_9+0xda>
		else
			PORTB &= 0xFE;
    11ac:	88 e3       	ldi	r24, 0x38	; 56
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	28 e3       	ldi	r18, 0x38	; 56
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	f9 01       	movw	r30, r18
    11b6:	20 81       	ld	r18, Z
    11b8:	2e 7f       	andi	r18, 0xFE	; 254
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
	}
	if(activeServo[1]==1)
    11be:	80 91 77 00 	lds	r24, 0x0077
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	31 f5       	brne	.+76     	; 0x1212 <__vector_9+0x12e>
	{
		if(timerTick<=timeBaseServo[1])
    11c6:	80 91 7c 00 	lds	r24, 0x007C
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	80 91 80 00 	lds	r24, 0x0080
    11d6:	90 91 81 00 	lds	r25, 0x0081
    11da:	a0 91 82 00 	lds	r26, 0x0082
    11de:	b0 91 83 00 	lds	r27, 0x0083
    11e2:	28 17       	cp	r18, r24
    11e4:	39 07       	cpc	r19, r25
    11e6:	4a 07       	cpc	r20, r26
    11e8:	5b 07       	cpc	r21, r27
    11ea:	50 f0       	brcs	.+20     	; 0x1200 <__vector_9+0x11c>
			PORTB |= 0x02;
    11ec:	88 e3       	ldi	r24, 0x38	; 56
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	28 e3       	ldi	r18, 0x38	; 56
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	f9 01       	movw	r30, r18
    11f6:	20 81       	ld	r18, Z
    11f8:	22 60       	ori	r18, 0x02	; 2
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18
    11fe:	09 c0       	rjmp	.+18     	; 0x1212 <__vector_9+0x12e>
		else
			PORTB &= 0xFD;
    1200:	88 e3       	ldi	r24, 0x38	; 56
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	28 e3       	ldi	r18, 0x38	; 56
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	f9 01       	movw	r30, r18
    120a:	20 81       	ld	r18, Z
    120c:	2d 7f       	andi	r18, 0xFD	; 253
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
	}
	if(activeServo[2]==1)
    1212:	80 91 78 00 	lds	r24, 0x0078
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	31 f5       	brne	.+76     	; 0x1266 <__vector_9+0x182>
	{
		if(timerTick<=timeBaseServo[2])
    121a:	80 91 7d 00 	lds	r24, 0x007D
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	80 91 80 00 	lds	r24, 0x0080
    122a:	90 91 81 00 	lds	r25, 0x0081
    122e:	a0 91 82 00 	lds	r26, 0x0082
    1232:	b0 91 83 00 	lds	r27, 0x0083
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	4a 07       	cpc	r20, r26
    123c:	5b 07       	cpc	r21, r27
    123e:	50 f0       	brcs	.+20     	; 0x1254 <__vector_9+0x170>
			PORTB |= 0x04;
    1240:	88 e3       	ldi	r24, 0x38	; 56
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	28 e3       	ldi	r18, 0x38	; 56
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	f9 01       	movw	r30, r18
    124a:	20 81       	ld	r18, Z
    124c:	24 60       	ori	r18, 0x04	; 4
    124e:	fc 01       	movw	r30, r24
    1250:	20 83       	st	Z, r18
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <__vector_9+0x182>
		else
			PORTB &= 0xFB;
    1254:	88 e3       	ldi	r24, 0x38	; 56
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	28 e3       	ldi	r18, 0x38	; 56
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	f9 01       	movw	r30, r18
    125e:	20 81       	ld	r18, Z
    1260:	2b 7f       	andi	r18, 0xFB	; 251
    1262:	fc 01       	movw	r30, r24
    1264:	20 83       	st	Z, r18
	}
	if(activeServo[3]==1)
    1266:	80 91 79 00 	lds	r24, 0x0079
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	31 f5       	brne	.+76     	; 0x12ba <__vector_9+0x1d6>
	{
		if(timerTick<=timeBaseServo[3])
    126e:	80 91 7e 00 	lds	r24, 0x007E
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	80 91 80 00 	lds	r24, 0x0080
    127e:	90 91 81 00 	lds	r25, 0x0081
    1282:	a0 91 82 00 	lds	r26, 0x0082
    1286:	b0 91 83 00 	lds	r27, 0x0083
    128a:	28 17       	cp	r18, r24
    128c:	39 07       	cpc	r19, r25
    128e:	4a 07       	cpc	r20, r26
    1290:	5b 07       	cpc	r21, r27
    1292:	50 f0       	brcs	.+20     	; 0x12a8 <__vector_9+0x1c4>
			PORTB |= 0x08;
    1294:	88 e3       	ldi	r24, 0x38	; 56
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	28 e3       	ldi	r18, 0x38	; 56
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	f9 01       	movw	r30, r18
    129e:	20 81       	ld	r18, Z
    12a0:	28 60       	ori	r18, 0x08	; 8
    12a2:	fc 01       	movw	r30, r24
    12a4:	20 83       	st	Z, r18
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <__vector_9+0x1d6>
		else
			PORTB &= 0xF7;
    12a8:	88 e3       	ldi	r24, 0x38	; 56
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	28 e3       	ldi	r18, 0x38	; 56
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	f9 01       	movw	r30, r18
    12b2:	20 81       	ld	r18, Z
    12b4:	27 7f       	andi	r18, 0xF7	; 247
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
	}
	if(activeServo[4]==1)
    12ba:	80 91 7a 00 	lds	r24, 0x007A
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	31 f5       	brne	.+76     	; 0x130e <__vector_9+0x22a>
	{
		if(timerTick<=timeBaseServo[4])
    12c2:	80 91 7f 00 	lds	r24, 0x007F
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	80 91 80 00 	lds	r24, 0x0080
    12d2:	90 91 81 00 	lds	r25, 0x0081
    12d6:	a0 91 82 00 	lds	r26, 0x0082
    12da:	b0 91 83 00 	lds	r27, 0x0083
    12de:	28 17       	cp	r18, r24
    12e0:	39 07       	cpc	r19, r25
    12e2:	4a 07       	cpc	r20, r26
    12e4:	5b 07       	cpc	r21, r27
    12e6:	50 f0       	brcs	.+20     	; 0x12fc <__vector_9+0x218>
			PORTB |= 0x10;
    12e8:	88 e3       	ldi	r24, 0x38	; 56
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	28 e3       	ldi	r18, 0x38	; 56
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	f9 01       	movw	r30, r18
    12f2:	20 81       	ld	r18, Z
    12f4:	20 61       	ori	r18, 0x10	; 16
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <__vector_9+0x22a>
		else
			PORTB &= 0xEF;
    12fc:	88 e3       	ldi	r24, 0x38	; 56
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	28 e3       	ldi	r18, 0x38	; 56
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	f9 01       	movw	r30, r18
    1306:	20 81       	ld	r18, Z
    1308:	2f 7e       	andi	r18, 0xEF	; 239
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
	}
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	bf 91       	pop	r27
    1318:	af 91       	pop	r26
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	5f 91       	pop	r21
    1320:	4f 91       	pop	r20
    1322:	3f 91       	pop	r19
    1324:	2f 91       	pop	r18
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <servo_start>:
void servo_start(void) // Config. and Start up timer 0 
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
   
	TCCR0 = (1<<CS01); 	// Prescaler 8,16 MHz,1 MC = 8/16M = 0.5 us/count 
    1338:	83 e5       	ldi	r24, 0x53	; 83
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	22 e0       	ldi	r18, 0x02	; 2
    133e:	fc 01       	movw	r30, r24
    1340:	20 83       	st	Z, r18
	TIFR |= 1<<TOV0; 	//Clear TOV0 / clear
    1342:	88 e5       	ldi	r24, 0x58	; 88
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	28 e5       	ldi	r18, 0x58	; 88
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	f9 01       	movw	r30, r18
    134c:	20 81       	ld	r18, Z
    134e:	21 60       	ori	r18, 0x01	; 1
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
	TIMSK |= 1<<TOIE0; 	//Enable Timer0 Overflow Interrupt
    1354:	89 e5       	ldi	r24, 0x59	; 89
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	29 e5       	ldi	r18, 0x59	; 89
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	f9 01       	movw	r30, r18
    135e:	20 81       	ld	r18, Z
    1360:	21 60       	ori	r18, 0x01	; 1
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
	//TCNT0 = 156;	// Interval 50 us  	
    TCNT0 = 206;	// Interval 50 us  	
    1366:	82 e5       	ldi	r24, 0x52	; 82
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	2e ec       	ldi	r18, 0xCE	; 206
    136c:	fc 01       	movw	r30, r24
    136e:	20 83       	st	Z, r18
    
	sei();	// Enable all interrupt
    1370:	78 94       	sei
	timerTick = 0;
    1372:	10 92 80 00 	sts	0x0080, r1
    1376:	10 92 81 00 	sts	0x0081, r1
    137a:	10 92 82 00 	sts	0x0082, r1
    137e:	10 92 83 00 	sts	0x0083, r1
	servo_ini = 1;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	80 93 75 00 	sts	0x0075, r24
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <servo_stop>:
void servo_stop()
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;		// Stop timer and 
    1396:	83 e5       	ldi	r24, 0x53	; 83
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	fc 01       	movw	r30, r24
    139c:	10 82       	st	Z, r1
	TCNT0 = 0;
    139e:	82 e5       	ldi	r24, 0x52	; 82
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	fc 01       	movw	r30, r24
    13a4:	10 82       	st	Z, r1
	TIMSK &= ~_BV(TOIE0);	
    13a6:	89 e5       	ldi	r24, 0x59	; 89
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	29 e5       	ldi	r18, 0x59	; 89
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	f9 01       	movw	r30, r18
    13b0:	20 81       	ld	r18, Z
    13b2:	2e 7f       	andi	r18, 0xFE	; 254
    13b4:	fc 01       	movw	r30, r24
    13b6:	20 83       	st	Z, r18
	timerTick = 0;
    13b8:	10 92 80 00 	sts	0x0080, r1
    13bc:	10 92 81 00 	sts	0x0081, r1
    13c0:	10 92 82 00 	sts	0x0082, r1
    13c4:	10 92 83 00 	sts	0x0083, r1
	servo_ini = 0;
    13c8:	10 92 75 00 	sts	0x0075, r1
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <servo>:
void servo(unsigned char _ch,unsigned int _pos)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <servo+0x6>
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	7b 83       	std	Y+3, r23	; 0x03
    13e2:	6a 83       	std	Y+2, r22	; 0x02
	if(servo_ini==0)
    13e4:	80 91 75 00 	lds	r24, 0x0075
    13e8:	88 23       	and	r24, r24
    13ea:	29 f4       	brne	.+10     	; 0x13f6 <servo+0x24>
	{
		servo_start();
    13ec:	0e 94 98 09 	call	0x1330	; 0x1330 <servo_start>
		servo_ini=1;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	80 93 75 00 	sts	0x0075, r24
	}
	if(_ch>=0 && _ch<=4)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	85 30       	cpi	r24, 0x05	; 5
    13fa:	28 f5       	brcc	.+74     	; 0x1446 <servo+0x74>
	{
		DDRB |= 1<<(_ch);
    13fc:	87 e3       	ldi	r24, 0x37	; 55
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	27 e3       	ldi	r18, 0x37	; 55
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	f9 01       	movw	r30, r18
    1406:	20 81       	ld	r18, Z
    1408:	62 2f       	mov	r22, r18
    140a:	29 81       	ldd	r18, Y+1	; 0x01
    140c:	42 2f       	mov	r20, r18
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	21 e0       	ldi	r18, 0x01	; 1
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	04 2e       	mov	r0, r20
    1416:	02 c0       	rjmp	.+4      	; 0x141c <servo+0x4a>
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <servo+0x46>
    1420:	26 2b       	or	r18, r22
    1422:	fc 01       	movw	r30, r24
    1424:	20 83       	st	Z, r18
		timeBaseServo[_ch] = _pos;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	2a 81       	ldd	r18, Y+2	; 0x02
    142e:	85 58       	subi	r24, 0x85	; 133
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	fc 01       	movw	r30, r24
    1434:	20 83       	st	Z, r18
		activeServo[_ch]=1;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	8a 58       	subi	r24, 0x8A	; 138
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	21 e0       	ldi	r18, 0x01	; 1
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18
	}
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <servo_pause>:
void servo_pause(char _ch)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	0f 92       	push	r0
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	89 83       	std	Y+1, r24	; 0x01
	if(_ch>=0 && _ch<=4)
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	85 30       	cpi	r24, 0x05	; 5
    1462:	38 f4       	brcc	.+14     	; 0x1472 <servo_pause+0x20>
	{
		activeServo[_ch]=0;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	8a 58       	subi	r24, 0x8A	; 138
    146c:	9f 4f       	sbci	r25, 0xFF	; 255
    146e:	fc 01       	movw	r30, r24
    1470:	10 82       	st	Z, r1
	}
}
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <servo_resume>:
void servo_resume(char _ch)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
	if(_ch>=0 && _ch<=4)
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	85 30       	cpi	r24, 0x05	; 5
    148a:	40 f4       	brcc	.+16     	; 0x149c <servo_resume+0x22>
	{
		activeServo[_ch]=1;
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	8a 58       	subi	r24, 0x8A	; 138
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	fc 01       	movw	r30, r24
    149a:	20 83       	st	Z, r18
	}
}
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <servo_get_status>:
unsigned char servo_get_status(char _ch)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
	return(activeServo[_ch]);
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	8a 58       	subi	r24, 0x8A	; 138
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	fc 01       	movw	r30, r24
    14bc:	80 81       	ld	r24, Z
}
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <delay_sound>:
#include <in_out.h>
//------------------------------------------------------------------------------------------------//
//---------------------------- Function delay 100 us per count -----------------------------------//
//------------------------------------------------------------------------------------------------//
void delay_sound(unsigned int ms)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <delay_sound+0x6>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <delay_sound+0x8>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <delay_sound+0xa>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	9e 83       	std	Y+6, r25	; 0x06
    14d6:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i,j;
	for(i=0;i<ms;i++)
    14d8:	1a 82       	std	Y+2, r1	; 0x02
    14da:	19 82       	std	Y+1, r1	; 0x01
    14dc:	12 c0       	rjmp	.+36     	; 0x1502 <delay_sound+0x3c>
		for(j=0;j<80;j++);
    14de:	1c 82       	std	Y+4, r1	; 0x04
    14e0:	1b 82       	std	Y+3, r1	; 0x03
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <delay_sound+0x28>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	80 35       	cpi	r24, 0x50	; 80
    14f4:	91 05       	cpc	r25, r1
    14f6:	b0 f3       	brcs	.-20     	; 0x14e4 <delay_sound+0x1e>
//---------------------------- Function delay 100 us per count -----------------------------------//
//------------------------------------------------------------------------------------------------//
void delay_sound(unsigned int ms)
{
	unsigned int i,j;
	for(i=0;i<ms;i++)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	29 81       	ldd	r18, Y+1	; 0x01
    1504:	3a 81       	ldd	r19, Y+2	; 0x02
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	28 17       	cp	r18, r24
    150c:	39 07       	cpc	r19, r25
    150e:	38 f3       	brcs	.-50     	; 0x14de <delay_sound+0x18>
		for(j=0;j<80;j++);
}
    1510:	26 96       	adiw	r28, 0x06	; 6
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <sound_a>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_a(char ch,int freq,int time)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	29 97       	sbiw	r28, 0x09	; 9
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	7f 83       	std	Y+7, r23	; 0x07
    153a:	6e 83       	std	Y+6, r22	; 0x06
    153c:	59 87       	std	Y+9, r21	; 0x09
    153e:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,sm=0;	// Keep value and 
    1540:	1c 82       	std	Y+4, r1	; 0x04
    1542:	1b 82       	std	Y+3, r1	; 0x03
    1544:	1a 82       	std	Y+2, r1	; 0x02
    1546:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
    1548:	88 e8       	ldi	r24, 0x88	; 136
    154a:	93 e1       	ldi	r25, 0x13	; 19
    154c:	2e 81       	ldd	r18, Y+6	; 0x06
    154e:	3f 81       	ldd	r19, Y+7	; 0x07
    1550:	b9 01       	movw	r22, r18
    1552:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__divmodhi4>
    1556:	9b 01       	movw	r18, r22
    1558:	3c 83       	std	Y+4, r19	; 0x04
    155a:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
    155c:	88 85       	ldd	r24, Y+8	; 0x08
    155e:	99 85       	ldd	r25, Y+9	; 0x09
    1560:	9c 01       	movw	r18, r24
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	22 0f       	add	r18, r18
    1568:	33 1f       	adc	r19, r19
    156a:	82 0f       	add	r24, r18
    156c:	93 1f       	adc	r25, r19
    156e:	2b 81       	ldd	r18, Y+3	; 0x03
    1570:	3c 81       	ldd	r19, Y+4	; 0x04
    1572:	b9 01       	movw	r22, r18
    1574:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__divmodhi4>
    1578:	9b 01       	movw	r18, r22
    157a:	39 87       	std	Y+9, r19	; 0x09
    157c:	28 87       	std	Y+8, r18	; 0x08
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    157e:	1a 82       	std	Y+2, r1	; 0x02
    1580:	19 82       	std	Y+1, r1	; 0x01
    1582:	15 c0       	rjmp	.+42     	; 0x15ae <sound_a+0x8c>
	{
        out_a(ch,1);
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	0e 94 7e 02 	call	0x4fc	; 0x4fc <out_a>
		delay_sound(dt);	// Delay for sound	
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
        out_a(ch,0);
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	0e 94 7e 02 	call	0x4fc	; 0x4fc <out_a>
		delay_sound(dt);	// Delay for sound
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
void sound_a(char ch,int freq,int time)
{
	int dt=0,sm=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	29 81       	ldd	r18, Y+1	; 0x01
    15b0:	3a 81       	ldd	r19, Y+2	; 0x02
    15b2:	88 85       	ldd	r24, Y+8	; 0x08
    15b4:	99 85       	ldd	r25, Y+9	; 0x09
    15b6:	28 17       	cp	r18, r24
    15b8:	39 07       	cpc	r19, r25
    15ba:	24 f3       	brlt	.-56     	; 0x1584 <sound_a+0x62>
        out_a(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_a(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
    15bc:	29 96       	adiw	r28, 0x09	; 9
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <sound_b>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_b(char ch,int freq,int time)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	29 97       	sbiw	r28, 0x09	; 9
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	7f 83       	std	Y+7, r23	; 0x07
    15e6:	6e 83       	std	Y+6, r22	; 0x06
    15e8:	59 87       	std	Y+9, r21	; 0x09
    15ea:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,sm=0;	// Keep value and 
    15ec:	1c 82       	std	Y+4, r1	; 0x04
    15ee:	1b 82       	std	Y+3, r1	; 0x03
    15f0:	1a 82       	std	Y+2, r1	; 0x02
    15f2:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
    15f4:	88 e8       	ldi	r24, 0x88	; 136
    15f6:	93 e1       	ldi	r25, 0x13	; 19
    15f8:	2e 81       	ldd	r18, Y+6	; 0x06
    15fa:	3f 81       	ldd	r19, Y+7	; 0x07
    15fc:	b9 01       	movw	r22, r18
    15fe:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__divmodhi4>
    1602:	9b 01       	movw	r18, r22
    1604:	3c 83       	std	Y+4, r19	; 0x04
    1606:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
    1608:	88 85       	ldd	r24, Y+8	; 0x08
    160a:	99 85       	ldd	r25, Y+9	; 0x09
    160c:	9c 01       	movw	r18, r24
    160e:	22 0f       	add	r18, r18
    1610:	33 1f       	adc	r19, r19
    1612:	22 0f       	add	r18, r18
    1614:	33 1f       	adc	r19, r19
    1616:	82 0f       	add	r24, r18
    1618:	93 1f       	adc	r25, r19
    161a:	2b 81       	ldd	r18, Y+3	; 0x03
    161c:	3c 81       	ldd	r19, Y+4	; 0x04
    161e:	b9 01       	movw	r22, r18
    1620:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__divmodhi4>
    1624:	9b 01       	movw	r18, r22
    1626:	39 87       	std	Y+9, r19	; 0x09
    1628:	28 87       	std	Y+8, r18	; 0x08
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    162a:	1a 82       	std	Y+2, r1	; 0x02
    162c:	19 82       	std	Y+1, r1	; 0x01
    162e:	15 c0       	rjmp	.+42     	; 0x165a <sound_b+0x8c>
	{
        out_b(ch,1);
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	61 e0       	ldi	r22, 0x01	; 1
    1634:	0e 94 ce 02 	call	0x59c	; 0x59c <out_b>
		delay_sound(dt);	// Delay for sound	
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
        out_b(ch,0);
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	0e 94 ce 02 	call	0x59c	; 0x59c <out_b>
		delay_sound(dt);	// Delay for sound
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
void sound_b(char ch,int freq,int time)
{
	int dt=0,sm=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	29 81       	ldd	r18, Y+1	; 0x01
    165c:	3a 81       	ldd	r19, Y+2	; 0x02
    165e:	88 85       	ldd	r24, Y+8	; 0x08
    1660:	99 85       	ldd	r25, Y+9	; 0x09
    1662:	28 17       	cp	r18, r24
    1664:	39 07       	cpc	r19, r25
    1666:	24 f3       	brlt	.-56     	; 0x1630 <sound_b+0x62>
        out_b(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_b(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
    1668:	29 96       	adiw	r28, 0x09	; 9
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <sound_c>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_c(char ch,int freq,int time)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	29 97       	sbiw	r28, 0x09	; 9
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	7f 83       	std	Y+7, r23	; 0x07
    1692:	6e 83       	std	Y+6, r22	; 0x06
    1694:	59 87       	std	Y+9, r21	; 0x09
    1696:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,sm=0;	// Keep value and 
    1698:	1c 82       	std	Y+4, r1	; 0x04
    169a:	1b 82       	std	Y+3, r1	; 0x03
    169c:	1a 82       	std	Y+2, r1	; 0x02
    169e:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
    16a0:	88 e8       	ldi	r24, 0x88	; 136
    16a2:	93 e1       	ldi	r25, 0x13	; 19
    16a4:	2e 81       	ldd	r18, Y+6	; 0x06
    16a6:	3f 81       	ldd	r19, Y+7	; 0x07
    16a8:	b9 01       	movw	r22, r18
    16aa:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__divmodhi4>
    16ae:	9b 01       	movw	r18, r22
    16b0:	3c 83       	std	Y+4, r19	; 0x04
    16b2:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
    16b4:	88 85       	ldd	r24, Y+8	; 0x08
    16b6:	99 85       	ldd	r25, Y+9	; 0x09
    16b8:	9c 01       	movw	r18, r24
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	22 0f       	add	r18, r18
    16c0:	33 1f       	adc	r19, r19
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	2b 81       	ldd	r18, Y+3	; 0x03
    16c8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ca:	b9 01       	movw	r22, r18
    16cc:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__divmodhi4>
    16d0:	9b 01       	movw	r18, r22
    16d2:	39 87       	std	Y+9, r19	; 0x09
    16d4:	28 87       	std	Y+8, r18	; 0x08
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    16d6:	1a 82       	std	Y+2, r1	; 0x02
    16d8:	19 82       	std	Y+1, r1	; 0x01
    16da:	15 c0       	rjmp	.+42     	; 0x1706 <sound_c+0x8c>
	{
        out_c(ch,1);
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
		delay_sound(dt);	// Delay for sound	
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
        out_c(ch,0);
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
		delay_sound(dt);	// Delay for sound
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
void sound_c(char ch,int freq,int time)
{
	int dt=0,sm=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	29 81       	ldd	r18, Y+1	; 0x01
    1708:	3a 81       	ldd	r19, Y+2	; 0x02
    170a:	88 85       	ldd	r24, Y+8	; 0x08
    170c:	99 85       	ldd	r25, Y+9	; 0x09
    170e:	28 17       	cp	r18, r24
    1710:	39 07       	cpc	r19, r25
    1712:	24 f3       	brlt	.-56     	; 0x16dc <sound_c+0x62>
        out_c(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_c(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
    1714:	29 96       	adiw	r28, 0x09	; 9
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <sound_d>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_d(char ch,int freq,int time)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	29 97       	sbiw	r28, 0x09	; 9
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	8d 83       	std	Y+5, r24	; 0x05
    173c:	7f 83       	std	Y+7, r23	; 0x07
    173e:	6e 83       	std	Y+6, r22	; 0x06
    1740:	59 87       	std	Y+9, r21	; 0x09
    1742:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,sm=0;	// Keep value and 
    1744:	1c 82       	std	Y+4, r1	; 0x04
    1746:	1b 82       	std	Y+3, r1	; 0x03
    1748:	1a 82       	std	Y+2, r1	; 0x02
    174a:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
    174c:	88 e8       	ldi	r24, 0x88	; 136
    174e:	93 e1       	ldi	r25, 0x13	; 19
    1750:	2e 81       	ldd	r18, Y+6	; 0x06
    1752:	3f 81       	ldd	r19, Y+7	; 0x07
    1754:	b9 01       	movw	r22, r18
    1756:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__divmodhi4>
    175a:	9b 01       	movw	r18, r22
    175c:	3c 83       	std	Y+4, r19	; 0x04
    175e:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
    1760:	88 85       	ldd	r24, Y+8	; 0x08
    1762:	99 85       	ldd	r25, Y+9	; 0x09
    1764:	9c 01       	movw	r18, r24
    1766:	22 0f       	add	r18, r18
    1768:	33 1f       	adc	r19, r19
    176a:	22 0f       	add	r18, r18
    176c:	33 1f       	adc	r19, r19
    176e:	82 0f       	add	r24, r18
    1770:	93 1f       	adc	r25, r19
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	3c 81       	ldd	r19, Y+4	; 0x04
    1776:	b9 01       	movw	r22, r18
    1778:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__divmodhi4>
    177c:	9b 01       	movw	r18, r22
    177e:	39 87       	std	Y+9, r19	; 0x09
    1780:	28 87       	std	Y+8, r18	; 0x08
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    1782:	1a 82       	std	Y+2, r1	; 0x02
    1784:	19 82       	std	Y+1, r1	; 0x01
    1786:	15 c0       	rjmp	.+42     	; 0x17b2 <sound_d+0x8c>
	{
        out_d(ch,1);
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
		delay_sound(dt);	// Delay for sound	
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
        out_d(ch,0);
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
		delay_sound(dt);	// Delay for sound
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
void sound_d(char ch,int freq,int time)
{
	int dt=0,sm=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	29 81       	ldd	r18, Y+1	; 0x01
    17b4:	3a 81       	ldd	r19, Y+2	; 0x02
    17b6:	88 85       	ldd	r24, Y+8	; 0x08
    17b8:	99 85       	ldd	r25, Y+9	; 0x09
    17ba:	28 17       	cp	r18, r24
    17bc:	39 07       	cpc	r19, r25
    17be:	24 f3       	brlt	.-56     	; 0x1788 <sound_d+0x62>
        out_d(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_d(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
    17c0:	29 96       	adiw	r28, 0x09	; 9
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <beep_a>:

//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_a(char _ch)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	0f 92       	push	r0
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	89 83       	std	Y+1, r24	; 0x01
	sound_a(_ch,3000,100);	// Generate sound default frequency
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	68 eb       	ldi	r22, 0xB8	; 184
    17e2:	7b e0       	ldi	r23, 0x0B	; 11
    17e4:	44 e6       	ldi	r20, 0x64	; 100
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	0e 94 91 0a 	call	0x1522	; 0x1522 <sound_a>
}
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <beep_b>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_b(char _ch)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	0f 92       	push	r0
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	89 83       	std	Y+1, r24	; 0x01
	sound_b(_ch,3000,100);	// Generate sound default frequency
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	68 eb       	ldi	r22, 0xB8	; 184
    1804:	7b e0       	ldi	r23, 0x0B	; 11
    1806:	44 e6       	ldi	r20, 0x64	; 100
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <sound_b>
}
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <beep_c>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_c(char _ch)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	0f 92       	push	r0
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	89 83       	std	Y+1, r24	; 0x01
	sound_c(_ch,3000,100);	// Generate sound default frequency
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	68 eb       	ldi	r22, 0xB8	; 184
    1826:	7b e0       	ldi	r23, 0x0B	; 11
    1828:	44 e6       	ldi	r20, 0x64	; 100
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	0e 94 3d 0b 	call	0x167a	; 0x167a <sound_c>
}
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <beep_d>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_d(char _ch)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01
	sound_d(_ch,2000,100);	// Generate sound default frequency
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	60 ed       	ldi	r22, 0xD0	; 208
    1848:	77 e0       	ldi	r23, 0x07	; 7
    184a:	44 e6       	ldi	r20, 0x64	; 100
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	0e 94 93 0b 	call	0x1726	; 0x1726 <sound_d>
}
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <getdist>:
#include <analog.h>
#define m 2933
#define b 20
#define k 1
unsigned int getdist(char adc_ch)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <getdist+0x6>
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int dist = 0;
    1868:	1a 82       	std	Y+2, r1	; 0x02
    186a:	19 82       	std	Y+1, r1	; 0x01
   dist = (m/(analog(adc_ch)+b)) - k;
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	0e 94 26 05 	call	0xa4c	; 0xa4c <analog>
    1872:	9c 01       	movw	r18, r24
    1874:	2c 5e       	subi	r18, 0xEC	; 236
    1876:	3f 4f       	sbci	r19, 0xFF	; 255
    1878:	85 e7       	ldi	r24, 0x75	; 117
    187a:	9b e0       	ldi	r25, 0x0B	; 11
    187c:	b9 01       	movw	r22, r18
    187e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__udivmodhi4>
    1882:	9b 01       	movw	r18, r22
    1884:	c9 01       	movw	r24, r18
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
	return(dist);
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <main>:
#define BBBBB (L2< REF&&L1< REF&&CT< REF&&R1< REF&&R2< REF)




void main(){
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62


startup();
    18a4:	80 ed       	ldi	r24, 0xD0	; 208
    18a6:	9d e0       	ldi	r25, 0x0D	; 13
    18a8:	fc 01       	movw	r30, r24
    18aa:	09 95       	icall
forward(500);
    18ac:	24 ef       	ldi	r18, 0xF4	; 244
    18ae:	3d e0       	ldi	r19, 0x0D	; 13
    18b0:	84 ef       	ldi	r24, 0xF4	; 244
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	f9 01       	movw	r30, r18
    18b6:	09 95       	icall

step01();
    18b8:	8a e6       	ldi	r24, 0x6A	; 106
    18ba:	9c e0       	ldi	r25, 0x0C	; 12
    18bc:	fc 01       	movw	r30, r24
    18be:	09 95       	icall
step02();
    18c0:	87 e0       	ldi	r24, 0x07	; 7
    18c2:	9d e0       	ldi	r25, 0x0D	; 13
    18c4:	fc 01       	movw	r30, r24
    18c6:	09 95       	icall

motor_stop(ALL);
    18c8:	83 e0       	ldi	r24, 0x03	; 3
    18ca:	0e 94 cc 04 	call	0x998	; 0x998 <motor_stop>

}
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <step01>:

/* STEP */
void step01(){
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <step01+0xc>
			forward(100);
			R90();
		}
		if(CC<REF){break;}
		
	}
    18de:	00 00       	nop
}

/* STEP */
void step01(){
	while(1){
		if(W_W||WWL&&WWR){
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    18e6:	88 23       	and	r24, r24
    18e8:	29 f0       	breq	.+10     	; 0x18f4 <step01+0x20>
    18ea:	83 e0       	ldi	r24, 0x03	; 3
    18ec:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    18f0:	88 23       	and	r24, r24
    18f2:	a1 f4       	brne	.+40     	; 0x191c <step01+0x48>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    18fa:	88 23       	and	r24, r24
    18fc:	b1 f0       	breq	.+44     	; 0x192a <step01+0x56>
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1904:	88 23       	and	r24, r24
    1906:	89 f0       	breq	.+34     	; 0x192a <step01+0x56>
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    190e:	88 23       	and	r24, r24
    1910:	61 f0       	breq	.+24     	; 0x192a <step01+0x56>
    1912:	84 e0       	ldi	r24, 0x04	; 4
    1914:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1918:	88 23       	and	r24, r24
    191a:	39 f0       	breq	.+14     	; 0x192a <step01+0x56>
			forward(10);
    191c:	24 ef       	ldi	r18, 0xF4	; 244
    191e:	3d e0       	ldi	r19, 0x0D	; 13
    1920:	8a e0       	ldi	r24, 0x0A	; 10
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	f9 01       	movw	r30, r18
    1926:	09 95       	icall
}

/* STEP */
void step01(){
	while(1){
		if(W_W||WWL&&WWR){
    1928:	68 c0       	rjmp	.+208    	; 0x19fa <step01+0x126>
			forward(10);
		}
		else if(B_W||BWL){
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1930:	88 23       	and	r24, r24
    1932:	29 f4       	brne	.+10     	; 0x193e <step01+0x6a>
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    193a:	88 23       	and	r24, r24
    193c:	51 f4       	brne	.+20     	; 0x1952 <step01+0x7e>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1944:	88 23       	and	r24, r24
    1946:	61 f4       	brne	.+24     	; 0x1960 <step01+0x8c>
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    194e:	88 23       	and	r24, r24
    1950:	39 f0       	breq	.+14     	; 0x1960 <step01+0x8c>
			turn_left(10);
    1952:	28 e2       	ldi	r18, 0x28	; 40
    1954:	3e e0       	ldi	r19, 0x0E	; 14
    1956:	8a e0       	ldi	r24, 0x0A	; 10
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	f9 01       	movw	r30, r18
    195c:	09 95       	icall
void step01(){
	while(1){
		if(W_W||WWL&&WWR){
			forward(10);
		}
		else if(B_W||BWL){
    195e:	4d c0       	rjmp	.+154    	; 0x19fa <step01+0x126>
			turn_left(10);
		}
		else if(W_B||WBR){
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1966:	88 23       	and	r24, r24
    1968:	29 f0       	breq	.+10     	; 0x1974 <step01+0xa0>
    196a:	83 e0       	ldi	r24, 0x03	; 3
    196c:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1970:	88 23       	and	r24, r24
    1972:	51 f0       	breq	.+20     	; 0x1988 <step01+0xb4>
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    197a:	88 23       	and	r24, r24
    197c:	61 f0       	breq	.+24     	; 0x1996 <step01+0xc2>
    197e:	84 e0       	ldi	r24, 0x04	; 4
    1980:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1984:	88 23       	and	r24, r24
    1986:	39 f4       	brne	.+14     	; 0x1996 <step01+0xc2>
			turn_right(10);
    1988:	22 e4       	ldi	r18, 0x42	; 66
    198a:	3e e0       	ldi	r19, 0x0E	; 14
    198c:	8a e0       	ldi	r24, 0x0A	; 10
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	f9 01       	movw	r30, r18
    1992:	09 95       	icall
			forward(10);
		}
		else if(B_W||BWL){
			turn_left(10);
		}
		else if(W_B||WBR){
    1994:	32 c0       	rjmp	.+100    	; 0x19fa <step01+0x126>
			turn_right(10);
		}
		else if(WBW||BBR||BBB){
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    199c:	88 23       	and	r24, r24
    199e:	51 f0       	breq	.+20     	; 0x19b4 <step01+0xe0>
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    19a6:	88 23       	and	r24, r24
    19a8:	29 f4       	brne	.+10     	; 0x19b4 <step01+0xe0>
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    19b0:	88 23       	and	r24, r24
    19b2:	c9 f4       	brne	.+50     	; 0x19e6 <step01+0x112>
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    19ba:	88 23       	and	r24, r24
    19bc:	29 f4       	brne	.+10     	; 0x19c8 <step01+0xf4>
    19be:	84 e0       	ldi	r24, 0x04	; 4
    19c0:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    19c4:	88 23       	and	r24, r24
    19c6:	79 f0       	breq	.+30     	; 0x19e6 <step01+0x112>
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    19ce:	88 23       	and	r24, r24
    19d0:	a1 f4       	brne	.+40     	; 0x19fa <step01+0x126>
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    19d8:	88 23       	and	r24, r24
    19da:	79 f4       	brne	.+30     	; 0x19fa <step01+0x126>
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    19e2:	88 23       	and	r24, r24
    19e4:	51 f4       	brne	.+20     	; 0x19fa <step01+0x126>
			forward(100);
    19e6:	24 ef       	ldi	r18, 0xF4	; 244
    19e8:	3d e0       	ldi	r19, 0x0D	; 13
    19ea:	84 e6       	ldi	r24, 0x64	; 100
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	f9 01       	movw	r30, r18
    19f0:	09 95       	icall
			R90();
    19f2:	82 ea       	ldi	r24, 0xA2	; 162
    19f4:	9e e0       	ldi	r25, 0x0E	; 14
    19f6:	fc 01       	movw	r30, r24
    19f8:	09 95       	icall
		}
		if(CC<REF){break;}
    19fa:	85 e0       	ldi	r24, 0x05	; 5
    19fc:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1a00:	88 23       	and	r24, r24
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <step01+0x132>
    1a04:	6c cf       	rjmp	.-296    	; 0x18de <step01+0xa>
		
	}
}
    1a06:	00 00       	nop
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <step02>:

void step02(){
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <step02+0x6>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
int dist;

	SIL;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>
	forward(10);
    1a1e:	24 ef       	ldi	r18, 0xF4	; 244
    1a20:	3d e0       	ldi	r19, 0x0D	; 13
    1a22:	8a e0       	ldi	r24, 0x0A	; 10
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	f9 01       	movw	r30, r18
    1a28:	09 95       	icall
    1a2a:	03 c0       	rjmp	.+6      	; 0x1a32 <step02+0x24>
			servo_close();
			break;
		}
		else{lcd("%d  ",dist);break;}
		}
	}
    1a2c:	00 00       	nop
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <step02+0x24>
    1a30:	00 00       	nop
int dist;

	SIL;
	forward(10);
	while(1){
		trackto();
    1a32:	87 e9       	ldi	r24, 0x97	; 151
    1a34:	9d e0       	ldi	r25, 0x0D	; 13
    1a36:	fc 01       	movw	r30, r24
    1a38:	09 95       	icall
dist = INFARED;
    1a3a:	84 e0       	ldi	r24, 0x04	; 4
    1a3c:	0e 94 2d 0c 	call	0x185a	; 0x185a <getdist>
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	89 83       	std	Y+1, r24	; 0x01
		 if(dist>6&&dist<8){
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	87 30       	cpi	r24, 0x07	; 7
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	7c f3       	brlt	.-34     	; 0x1a2c <step02+0x1e>
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	88 30       	cpi	r24, 0x08	; 8
    1a54:	91 05       	cpc	r25, r1
    1a56:	64 f7       	brge	.-40     	; 0x1a30 <step02+0x22>
		if(BC<REF){
    1a58:	86 e0       	ldi	r24, 0x06	; 6
    1a5a:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1a5e:	88 23       	and	r24, r24
    1a60:	09 f5       	brne	.+66     	; 0x1aa4 <step02+0x96>
	backward(100);
    1a62:	2e e0       	ldi	r18, 0x0E	; 14
    1a64:	3e e0       	ldi	r19, 0x0E	; 14
    1a66:	84 e6       	ldi	r24, 0x64	; 100
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	f9 01       	movw	r30, r18
    1a6c:	09 95       	icall
			pause(100);
    1a6e:	2c e5       	ldi	r18, 0x5C	; 92
    1a70:	3e e0       	ldi	r19, 0x0E	; 14
    1a72:	84 e6       	ldi	r24, 0x64	; 100
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	f9 01       	movw	r30, r18
    1a78:	09 95       	icall
			servo_open();
    1a7a:	85 ed       	ldi	r24, 0xD5	; 213
    1a7c:	9e e0       	ldi	r25, 0x0E	; 14
    1a7e:	fc 01       	movw	r30, r24
    1a80:	09 95       	icall
			forward(10);
    1a82:	24 ef       	ldi	r18, 0xF4	; 244
    1a84:	3d e0       	ldi	r19, 0x0D	; 13
    1a86:	8a e0       	ldi	r24, 0x0A	; 10
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	f9 01       	movw	r30, r18
    1a8c:	09 95       	icall
			pause(10);
    1a8e:	2c e5       	ldi	r18, 0x5C	; 92
    1a90:	3e e0       	ldi	r19, 0x0E	; 14
    1a92:	8a e0       	ldi	r24, 0x0A	; 10
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	f9 01       	movw	r30, r18
    1a98:	09 95       	icall
			servo_close();
    1a9a:	89 ef       	ldi	r24, 0xF9	; 249
    1a9c:	9e e0       	ldi	r25, 0x0E	; 14
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	09 95       	icall
			break;
    1aa2:	16 c0       	rjmp	.+44     	; 0x1ad0 <step02+0xc2>
		}
		else{lcd("%d  ",dist);break;}
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <step02+0x98>
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <step02+0x9a>
    1aa8:	8d b7       	in	r24, 0x3d	; 61
    1aaa:	9e b7       	in	r25, 0x3e	; 62
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	20 e6       	ldi	r18, 0x60	; 96
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	31 83       	std	Z+1, r19	; 0x01
    1ab6:	20 83       	st	Z, r18
    1ab8:	29 81       	ldd	r18, Y+1	; 0x01
    1aba:	3a 81       	ldd	r19, Y+2	; 0x02
    1abc:	fc 01       	movw	r30, r24
    1abe:	33 83       	std	Z+3, r19	; 0x03
    1ac0:	22 83       	std	Z+2, r18	; 0x02
    1ac2:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	00 00       	nop
		}
	}

}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <step3>:

void step3(){
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	forward(200);
    1ae2:	24 ef       	ldi	r18, 0xF4	; 244
    1ae4:	3d e0       	ldi	r19, 0x0D	; 13
    1ae6:	88 ec       	ldi	r24, 0xC8	; 200
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	f9 01       	movw	r30, r18
    1aec:	09 95       	icall
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <step3+0x20>
		trackto();
	if(BBB){
		forward(50)	;
	}

}
    1af0:	00 00       	nop
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <step3+0x20>
    1af4:	00 00       	nop
    1af6:	01 c0       	rjmp	.+2      	; 0x1afa <step3+0x20>
    1af8:	00 00       	nop
}

void step3(){
	forward(200);
	while(1){
		trackto();
    1afa:	87 e9       	ldi	r24, 0x97	; 151
    1afc:	9d e0       	ldi	r25, 0x0D	; 13
    1afe:	fc 01       	movw	r30, r24
    1b00:	09 95       	icall
	if(BBB){
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1b08:	88 23       	and	r24, r24
    1b0a:	91 f7       	brne	.-28     	; 0x1af0 <step3+0x16>
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1b12:	88 23       	and	r24, r24
    1b14:	79 f7       	brne	.-34     	; 0x1af4 <step3+0x1a>
    1b16:	83 e0       	ldi	r24, 0x03	; 3
    1b18:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1b1c:	88 23       	and	r24, r24
    1b1e:	61 f7       	brne	.-40     	; 0x1af8 <step3+0x1e>
		forward(50)	;
    1b20:	24 ef       	ldi	r18, 0xF4	; 244
    1b22:	3d e0       	ldi	r19, 0x0D	; 13
    1b24:	82 e3       	ldi	r24, 0x32	; 50
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	f9 01       	movw	r30, r18
    1b2a:	09 95       	icall
	}

}
    1b2c:	e6 cf       	rjmp	.-52     	; 0x1afa <step3+0x20>

00001b2e <trackto>:
}

/* Function */
void trackto(){
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	if(W_W){ forward(10);}
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1b3c:	88 23       	and	r24, r24
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <trackto+0x2a>
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1b46:	88 23       	and	r24, r24
    1b48:	39 f0       	breq	.+14     	; 0x1b58 <trackto+0x2a>
    1b4a:	24 ef       	ldi	r18, 0xF4	; 244
    1b4c:	3d e0       	ldi	r19, 0x0D	; 13
    1b4e:	8a e0       	ldi	r24, 0x0A	; 10
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	f9 01       	movw	r30, r18
    1b54:	09 95       	icall
    1b56:	21 c0       	rjmp	.+66     	; 0x1b9a <trackto+0x6c>
	else if(B_W){turn_right(10);}
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1b5e:	88 23       	and	r24, r24
    1b60:	61 f4       	brne	.+24     	; 0x1b7a <trackto+0x4c>
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1b68:	88 23       	and	r24, r24
    1b6a:	39 f0       	breq	.+14     	; 0x1b7a <trackto+0x4c>
    1b6c:	22 e4       	ldi	r18, 0x42	; 66
    1b6e:	3e e0       	ldi	r19, 0x0E	; 14
    1b70:	8a e0       	ldi	r24, 0x0A	; 10
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	f9 01       	movw	r30, r18
    1b76:	09 95       	icall
    1b78:	10 c0       	rjmp	.+32     	; 0x1b9a <trackto+0x6c>
	else if(W_B){turn_right(10);}
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1b80:	88 23       	and	r24, r24
    1b82:	59 f0       	breq	.+22     	; 0x1b9a <trackto+0x6c>
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1b8a:	88 23       	and	r24, r24
    1b8c:	31 f4       	brne	.+12     	; 0x1b9a <trackto+0x6c>
    1b8e:	22 e4       	ldi	r18, 0x42	; 66
    1b90:	3e e0       	ldi	r19, 0x0E	; 14
    1b92:	8a e0       	ldi	r24, 0x0A	; 10
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	f9 01       	movw	r30, r18
    1b98:	09 95       	icall
}
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <startup>:


/* Basic function */
void startup(){
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
	lcd("Press SW1");
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <startup+0xa>
    1baa:	8d b7       	in	r24, 0x3d	; 61
    1bac:	9e b7       	in	r25, 0x3e	; 62
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	25 e6       	ldi	r18, 0x65	; 101
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	31 83       	std	Z+1, r19	; 0x01
    1bb8:	20 83       	st	Z, r18
    1bba:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
	servo_close();
    1bc2:	89 ef       	ldi	r24, 0xF9	; 249
    1bc4:	9e e0       	ldi	r25, 0x0E	; 14
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	09 95       	icall
	servo_stop();
    1bca:	0e 94 c7 09 	call	0x138e	; 0x138e <servo_stop>
	sw1_press();
    1bce:	85 e0       	ldi	r24, 0x05	; 5
    1bd0:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1bd4:	88 23       	and	r24, r24
    1bd6:	d9 f7       	brne	.-10     	; 0x1bce <startup+0x2e>
    1bd8:	85 e0       	ldi	r24, 0x05	; 5
    1bda:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1bde:	88 23       	and	r24, r24
    1be0:	d9 f3       	breq	.-10     	; 0x1bd8 <startup+0x38>
}
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <forward>:



/* Basic controll */
void forward(unsigned int delay){
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <forward+0x6>
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	89 83       	std	Y+1, r24	; 0x01
	motor(1,POW);
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	6c e3       	ldi	r22, 0x3C	; 60
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	motor(2,POW);
    1c00:	82 e0       	ldi	r24, 0x02	; 2
    1c02:	6c e3       	ldi	r22, 0x3C	; 60
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	sleep(delay);
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <backward>:

void backward(unsigned int delay){
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <backward+0x6>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
	motor(1,-POW);
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	64 ec       	ldi	r22, 0xC4	; 196
    1c2e:	7f ef       	ldi	r23, 0xFF	; 255
    1c30:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	motor(2,-POW);
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	64 ec       	ldi	r22, 0xC4	; 196
    1c38:	7f ef       	ldi	r23, 0xFF	; 255
    1c3a:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	sleep(delay);
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	9a 81       	ldd	r25, Y+2	; 0x02
    1c42:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <turn_left>:

void turn_left(unsigned int delay){
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <turn_left+0x6>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	motor(1,-POW);
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	64 ec       	ldi	r22, 0xC4	; 196
    1c62:	7f ef       	ldi	r23, 0xFF	; 255
    1c64:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	motor(2,POW);
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	6c e3       	ldi	r22, 0x3C	; 60
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	sleep(delay);
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <turn_right>:

void turn_right(unsigned int delay){
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <turn_right+0x6>
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
	motor(1,POW);
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	6c e3       	ldi	r22, 0x3C	; 60
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	motor(2,-POW);
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	64 ec       	ldi	r22, 0xC4	; 196
    1ca0:	7f ef       	ldi	r23, 0xFF	; 255
    1ca2:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	sleep(delay);
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <pause>:

void pause(delay){   
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <pause+0x6>
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
	motor_stop(ALL);
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	0e 94 cc 04 	call	0x998	; 0x998 <motor_stop>
	sleep(delay);
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <L90>:




/* Movement function */  
void L90(){
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
	forward(20);
    1ce6:	84 e1       	ldi	r24, 0x14	; 20
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <forward>
	while(L2>=REF){
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <L90+0x1a>
		turn_left(20);
    1cf0:	84 e1       	ldi	r24, 0x14	; 20
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <turn_left>


/* Movement function */  
void L90(){
	forward(20);
	while(L2>=REF){
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1cfe:	88 23       	and	r24, r24
    1d00:	b9 f7       	brne	.-18     	; 0x1cf0 <L90+0x12>
		turn_left(20);
	}
	while(L2<REF){
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <L90+0x2e>
		turn_left(20);
    1d04:	84 e1       	ldi	r24, 0x14	; 20
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <turn_left>
void L90(){
	forward(20);
	while(L2>=REF){
		turn_left(20);
	}
	while(L2<REF){
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1d12:	88 23       	and	r24, r24
    1d14:	b9 f3       	breq	.-18     	; 0x1d04 <L90+0x26>
		turn_left(20);
	}
	while(L1>=REF){
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <L90+0x42>
		turn_left(20);
    1d18:	84 e1       	ldi	r24, 0x14	; 20
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <turn_left>
		turn_left(20);
	}
	while(L2<REF){
		turn_left(20);
	}
	while(L1>=REF){
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1d26:	88 23       	and	r24, r24
    1d28:	b9 f7       	brne	.-18     	; 0x1d18 <L90+0x3a>
		turn_left(20);
	}
	while(CC<REF){
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <L90+0x56>
		forward(10);
    1d2c:	8a e0       	ldi	r24, 0x0A	; 10
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <forward>
		turn_left(20);
	}
	while(L1>=REF){
		turn_left(20);
	}
	while(CC<REF){
    1d34:	85 e0       	ldi	r24, 0x05	; 5
    1d36:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1d3a:	88 23       	and	r24, r24
    1d3c:	b9 f3       	breq	.-18     	; 0x1d2c <L90+0x4e>
		forward(10);
	}
	//pause(400);
			
}
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <R90>:

void R90(){
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
	forward(20);
    1d4c:	84 e1       	ldi	r24, 0x14	; 20
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <forward>
	while(R2>=REF){
    1d54:	04 c0       	rjmp	.+8      	; 0x1d5e <R90+0x1a>
		turn_right(20);
    1d56:	84 e1       	ldi	r24, 0x14	; 20
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <turn_right>
			
}

void R90(){
	forward(20);
	while(R2>=REF){
    1d5e:	84 e0       	ldi	r24, 0x04	; 4
    1d60:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1d64:	88 23       	and	r24, r24
    1d66:	b9 f7       	brne	.-18     	; 0x1d56 <R90+0x12>
		turn_right(20);
	}
	while(R2<REF){
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <R90+0x2e>
		turn_right(20);
    1d6a:	84 e1       	ldi	r24, 0x14	; 20
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <turn_right>
void R90(){
	forward(20);
	while(R2>=REF){
		turn_right(20);
	}
	while(R2<REF){
    1d72:	84 e0       	ldi	r24, 0x04	; 4
    1d74:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1d78:	88 23       	and	r24, r24
    1d7a:	b9 f3       	breq	.-18     	; 0x1d6a <R90+0x26>
		turn_right(20);
	}
	while(R1>=REF){
    1d7c:	04 c0       	rjmp	.+8      	; 0x1d86 <R90+0x42>
		turn_left(20);
    1d7e:	84 e1       	ldi	r24, 0x14	; 20
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <turn_left>
		turn_right(20);
	}
	while(R2<REF){
		turn_right(20);
	}
	while(R1>=REF){
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1d8c:	88 23       	and	r24, r24
    1d8e:	b9 f7       	brne	.-18     	; 0x1d7e <R90+0x3a>
		turn_left(20);
	}
	while(CC<REF){
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <R90+0x56>
		forward(10);
    1d92:	8a e0       	ldi	r24, 0x0A	; 10
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <forward>
		turn_right(20);
	}
	while(R1>=REF){
		turn_left(20);
	}
	while(CC<REF){
    1d9a:	85 e0       	ldi	r24, 0x05	; 5
    1d9c:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1da0:	88 23       	and	r24, r24
    1da2:	b9 f3       	breq	.-18     	; 0x1d92 <R90+0x4e>
		forward(10);
	}
	//pause(400);
	
		
}
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <servo_open>:

/* Gripper */
void servo_open(){
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
	servo(SERVO_GRP,SERVO_GRP_MAX);sleep(200);
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	66 e4       	ldi	r22, 0x46	; 70
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    1dbc:	88 ec       	ldi	r24, 0xC8	; 200
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_ARM,SERVO_ARM_MIN);sleep(200);
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	64 e1       	ldi	r22, 0x14	; 20
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    1dce:	88 ec       	ldi	r24, 0xC8	; 200
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_ARM,SERVO_ARM_MIN);sleep(200);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	64 e1       	ldi	r22, 0x14	; 20
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    1de0:	88 ec       	ldi	r24, 0xC8	; 200
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo_stop();
    1de8:	0e 94 c7 09 	call	0x138e	; 0x138e <servo_stop>
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <servo_close>:

void servo_close(){
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	servo(SERVO_GRP,SERVO_GRP_MIN);sleep(200);
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	69 e1       	ldi	r22, 0x19	; 25
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_ARM,SERVO_ARM_MAX);sleep(200);
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	68 e2       	ldi	r22, 0x28	; 40
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    1e16:	88 ec       	ldi	r24, 0xC8	; 200
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_ARM,SERVO_ARM_MAX);sleep(200);
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	68 e2       	ldi	r22, 0x28	; 40
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    1e28:	88 ec       	ldi	r24, 0xC8	; 200
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo_stop();
    1e30:	0e 94 c7 09 	call	0x138e	; 0x138e <servo_stop>
}
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <servo_put>:

void servo_put(){
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
	servo(SERVO_ARM,SERVO_ARM_MIN);sleep(200);
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	64 e1       	ldi	r22, 0x14	; 20
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    1e4c:	88 ec       	ldi	r24, 0xC8	; 200
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_GRP,SERVO_GRP_MAX);sleep(200);
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	66 e4       	ldi	r22, 0x46	; 70
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    1e5e:	88 ec       	ldi	r24, 0xC8	; 200
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_GRP,SERVO_GRP_MAX);sleep(200);
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	66 e4       	ldi	r22, 0x46	; 70
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    1e70:	88 ec       	ldi	r24, 0xC8	; 200
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo_stop();
    1e78:	0e 94 c7 09 	call	0x138e	; 0x138e <servo_stop>
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <__udivmodhi4>:
    1e82:	aa 1b       	sub	r26, r26
    1e84:	bb 1b       	sub	r27, r27
    1e86:	51 e1       	ldi	r21, 0x11	; 17
    1e88:	07 c0       	rjmp	.+14     	; 0x1e98 <__udivmodhi4_ep>

00001e8a <__udivmodhi4_loop>:
    1e8a:	aa 1f       	adc	r26, r26
    1e8c:	bb 1f       	adc	r27, r27
    1e8e:	a6 17       	cp	r26, r22
    1e90:	b7 07       	cpc	r27, r23
    1e92:	10 f0       	brcs	.+4      	; 0x1e98 <__udivmodhi4_ep>
    1e94:	a6 1b       	sub	r26, r22
    1e96:	b7 0b       	sbc	r27, r23

00001e98 <__udivmodhi4_ep>:
    1e98:	88 1f       	adc	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	5a 95       	dec	r21
    1e9e:	a9 f7       	brne	.-22     	; 0x1e8a <__udivmodhi4_loop>
    1ea0:	80 95       	com	r24
    1ea2:	90 95       	com	r25
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	08 95       	ret

00001eaa <__divmodhi4>:
    1eaa:	97 fb       	bst	r25, 7
    1eac:	09 2e       	mov	r0, r25
    1eae:	07 26       	eor	r0, r23
    1eb0:	0a d0       	rcall	.+20     	; 0x1ec6 <__divmodhi4_neg1>
    1eb2:	77 fd       	sbrc	r23, 7
    1eb4:	04 d0       	rcall	.+8      	; 0x1ebe <__divmodhi4_neg2>
    1eb6:	e5 df       	rcall	.-54     	; 0x1e82 <__udivmodhi4>
    1eb8:	06 d0       	rcall	.+12     	; 0x1ec6 <__divmodhi4_neg1>
    1eba:	00 20       	and	r0, r0
    1ebc:	1a f4       	brpl	.+6      	; 0x1ec4 <__divmodhi4_exit>

00001ebe <__divmodhi4_neg2>:
    1ebe:	70 95       	com	r23
    1ec0:	61 95       	neg	r22
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255

00001ec4 <__divmodhi4_exit>:
    1ec4:	08 95       	ret

00001ec6 <__divmodhi4_neg1>:
    1ec6:	f6 f7       	brtc	.-4      	; 0x1ec4 <__divmodhi4_exit>
    1ec8:	90 95       	com	r25
    1eca:	81 95       	neg	r24
    1ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ece:	08 95       	ret

00001ed0 <dtostrf>:
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	32 2f       	mov	r19, r18
    1eda:	f0 2e       	mov	r15, r16
    1edc:	47 ff       	sbrs	r20, 7
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <dtostrf+0x14>
    1ee0:	a4 e1       	ldi	r26, 0x14	; 20
    1ee2:	01 c0       	rjmp	.+2      	; 0x1ee6 <dtostrf+0x16>
    1ee4:	a4 e0       	ldi	r26, 0x04	; 4
    1ee6:	e4 2f       	mov	r30, r20
    1ee8:	ff 27       	eor	r31, r31
    1eea:	e7 fd       	sbrc	r30, 7
    1eec:	f0 95       	com	r31
    1eee:	f7 ff       	sbrs	r31, 7
    1ef0:	03 c0       	rjmp	.+6      	; 0x1ef8 <dtostrf+0x28>
    1ef2:	f0 95       	com	r31
    1ef4:	e1 95       	neg	r30
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	4f 2d       	mov	r20, r15
    1efa:	51 2f       	mov	r21, r17
    1efc:	2e 2f       	mov	r18, r30
    1efe:	03 2f       	mov	r16, r19
    1f00:	ea 2e       	mov	r14, r26
    1f02:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <dtoa_prf>
    1f06:	8f 2d       	mov	r24, r15
    1f08:	91 2f       	mov	r25, r17
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	08 95       	ret

00001f14 <ltoa>:
    1f14:	fa 01       	movw	r30, r20
    1f16:	cf 93       	push	r28
    1f18:	ff 93       	push	r31
    1f1a:	ef 93       	push	r30
    1f1c:	22 30       	cpi	r18, 0x02	; 2
    1f1e:	44 f1       	brlt	.+80     	; 0x1f70 <ltoa+0x5c>
    1f20:	25 32       	cpi	r18, 0x25	; 37
    1f22:	34 f5       	brge	.+76     	; 0x1f70 <ltoa+0x5c>
    1f24:	c2 2f       	mov	r28, r18
    1f26:	e8 94       	clt
    1f28:	ca 30       	cpi	r28, 0x0A	; 10
    1f2a:	49 f4       	brne	.+18     	; 0x1f3e <ltoa+0x2a>
    1f2c:	97 fb       	bst	r25, 7
    1f2e:	3e f4       	brtc	.+14     	; 0x1f3e <ltoa+0x2a>
    1f30:	90 95       	com	r25
    1f32:	80 95       	com	r24
    1f34:	70 95       	com	r23
    1f36:	61 95       	neg	r22
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	2c 2f       	mov	r18, r28
    1f40:	33 27       	eor	r19, r19
    1f42:	44 27       	eor	r20, r20
    1f44:	55 27       	eor	r21, r21
    1f46:	ff 93       	push	r31
    1f48:	ef 93       	push	r30
    1f4a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__udivmodsi4>
    1f4e:	ef 91       	pop	r30
    1f50:	ff 91       	pop	r31
    1f52:	60 5d       	subi	r22, 0xD0	; 208
    1f54:	6a 33       	cpi	r22, 0x3A	; 58
    1f56:	0c f0       	brlt	.+2      	; 0x1f5a <ltoa+0x46>
    1f58:	69 5d       	subi	r22, 0xD9	; 217
    1f5a:	61 93       	st	Z+, r22
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	ca 01       	movw	r24, r20
    1f60:	60 50       	subi	r22, 0x00	; 0
    1f62:	70 40       	sbci	r23, 0x00	; 0
    1f64:	80 40       	sbci	r24, 0x00	; 0
    1f66:	90 40       	sbci	r25, 0x00	; 0
    1f68:	51 f7       	brne	.-44     	; 0x1f3e <ltoa+0x2a>
    1f6a:	16 f4       	brtc	.+4      	; 0x1f70 <ltoa+0x5c>
    1f6c:	cd e2       	ldi	r28, 0x2D	; 45
    1f6e:	c1 93       	st	Z+, r28
    1f70:	10 82       	st	Z, r1
    1f72:	8f 91       	pop	r24
    1f74:	9f 91       	pop	r25
    1f76:	cf 91       	pop	r28
    1f78:	0c 94 ed 11 	jmp	0x23da	; 0x23da <strrev>

00001f7c <dtoa_prf>:
    1f7c:	a9 e0       	ldi	r26, 0x09	; 9
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e4 ec       	ldi	r30, 0xC4	; 196
    1f82:	ff e0       	ldi	r31, 0x0F	; 15
    1f84:	0c 94 27 12 	jmp	0x244e	; 0x244e <__prologue_saves__+0x10>
    1f88:	6a 01       	movw	r12, r20
    1f8a:	f2 2e       	mov	r15, r18
    1f8c:	10 2f       	mov	r17, r16
    1f8e:	0c 33       	cpi	r16, 0x3C	; 60
    1f90:	18 f4       	brcc	.+6      	; 0x1f98 <dtoa_prf+0x1c>
    1f92:	b0 2e       	mov	r11, r16
    1f94:	b3 94       	inc	r11
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <dtoa_prf+0x20>
    1f98:	ec e3       	ldi	r30, 0x3C	; 60
    1f9a:	be 2e       	mov	r11, r30
    1f9c:	ae 01       	movw	r20, r28
    1f9e:	4f 5f       	subi	r20, 0xFF	; 255
    1fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa2:	27 e0       	ldi	r18, 0x07	; 7
    1fa4:	0b 2d       	mov	r16, r11
    1fa6:	0e 94 15 11 	call	0x222a	; 0x222a <__ftoa_engine>
    1faa:	29 81       	ldd	r18, Y+1	; 0x01
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	a9 01       	movw	r20, r18
    1fb0:	49 70       	andi	r20, 0x09	; 9
    1fb2:	50 70       	andi	r21, 0x00	; 0
    1fb4:	41 30       	cpi	r20, 0x01	; 1
    1fb6:	51 05       	cpc	r21, r1
    1fb8:	31 f0       	breq	.+12     	; 0x1fc6 <dtoa_prf+0x4a>
    1fba:	e1 fc       	sbrc	r14, 1
    1fbc:	06 c0       	rjmp	.+12     	; 0x1fca <dtoa_prf+0x4e>
    1fbe:	e0 fe       	sbrs	r14, 0
    1fc0:	06 c0       	rjmp	.+12     	; 0x1fce <dtoa_prf+0x52>
    1fc2:	e0 e2       	ldi	r30, 0x20	; 32
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <dtoa_prf+0x54>
    1fc6:	ed e2       	ldi	r30, 0x2D	; 45
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <dtoa_prf+0x54>
    1fca:	eb e2       	ldi	r30, 0x2B	; 43
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <dtoa_prf+0x54>
    1fce:	e0 e0       	ldi	r30, 0x00	; 0
    1fd0:	23 ff       	sbrs	r18, 3
    1fd2:	37 c0       	rjmp	.+110    	; 0x2042 <dtoa_prf+0xc6>
    1fd4:	ee 23       	and	r30, r30
    1fd6:	11 f0       	breq	.+4      	; 0x1fdc <dtoa_prf+0x60>
    1fd8:	84 e0       	ldi	r24, 0x04	; 4
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <dtoa_prf+0x62>
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	8f 15       	cp	r24, r15
    1fe0:	18 f4       	brcc	.+6      	; 0x1fe8 <dtoa_prf+0x6c>
    1fe2:	f8 1a       	sub	r15, r24
    1fe4:	8f 2d       	mov	r24, r15
    1fe6:	01 c0       	rjmp	.+2      	; 0x1fea <dtoa_prf+0x6e>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	e4 fc       	sbrc	r14, 4
    1fec:	0b c0       	rjmp	.+22     	; 0x2004 <dtoa_prf+0x88>
    1fee:	98 2f       	mov	r25, r24
    1ff0:	d6 01       	movw	r26, r12
    1ff2:	20 e2       	ldi	r18, 0x20	; 32
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <dtoa_prf+0x7e>
    1ff6:	2d 93       	st	X+, r18
    1ff8:	91 50       	subi	r25, 0x01	; 1
    1ffa:	99 23       	and	r25, r25
    1ffc:	e1 f7       	brne	.-8      	; 0x1ff6 <dtoa_prf+0x7a>
    1ffe:	c8 0e       	add	r12, r24
    2000:	d1 1c       	adc	r13, r1
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	ee 23       	and	r30, r30
    2006:	19 f0       	breq	.+6      	; 0x200e <dtoa_prf+0x92>
    2008:	d6 01       	movw	r26, r12
    200a:	ed 93       	st	X+, r30
    200c:	6d 01       	movw	r12, r26
    200e:	f6 01       	movw	r30, r12
    2010:	31 96       	adiw	r30, 0x01	; 1
    2012:	e2 fe       	sbrs	r14, 2
    2014:	05 c0       	rjmp	.+10     	; 0x2020 <dtoa_prf+0xa4>
    2016:	9e e4       	ldi	r25, 0x4E	; 78
    2018:	d6 01       	movw	r26, r12
    201a:	9c 93       	st	X, r25
    201c:	21 e4       	ldi	r18, 0x41	; 65
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <dtoa_prf+0xac>
    2020:	9e e6       	ldi	r25, 0x6E	; 110
    2022:	d6 01       	movw	r26, r12
    2024:	9c 93       	st	X, r25
    2026:	21 e6       	ldi	r18, 0x61	; 97
    2028:	11 96       	adiw	r26, 0x01	; 1
    202a:	2c 93       	st	X, r18
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	32 96       	adiw	r30, 0x02	; 2
    2030:	98 2f       	mov	r25, r24
    2032:	df 01       	movw	r26, r30
    2034:	20 e2       	ldi	r18, 0x20	; 32
    2036:	02 c0       	rjmp	.+4      	; 0x203c <dtoa_prf+0xc0>
    2038:	2d 93       	st	X+, r18
    203a:	91 50       	subi	r25, 0x01	; 1
    203c:	99 23       	and	r25, r25
    203e:	e1 f7       	brne	.-8      	; 0x2038 <dtoa_prf+0xbc>
    2040:	3d c0       	rjmp	.+122    	; 0x20bc <dtoa_prf+0x140>
    2042:	22 ff       	sbrs	r18, 2
    2044:	41 c0       	rjmp	.+130    	; 0x20c8 <dtoa_prf+0x14c>
    2046:	ee 23       	and	r30, r30
    2048:	11 f0       	breq	.+4      	; 0x204e <dtoa_prf+0xd2>
    204a:	84 e0       	ldi	r24, 0x04	; 4
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <dtoa_prf+0xd4>
    204e:	83 e0       	ldi	r24, 0x03	; 3
    2050:	8f 15       	cp	r24, r15
    2052:	18 f4       	brcc	.+6      	; 0x205a <dtoa_prf+0xde>
    2054:	f8 1a       	sub	r15, r24
    2056:	8f 2d       	mov	r24, r15
    2058:	01 c0       	rjmp	.+2      	; 0x205c <dtoa_prf+0xe0>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	e4 fc       	sbrc	r14, 4
    205e:	0b c0       	rjmp	.+22     	; 0x2076 <dtoa_prf+0xfa>
    2060:	98 2f       	mov	r25, r24
    2062:	d6 01       	movw	r26, r12
    2064:	20 e2       	ldi	r18, 0x20	; 32
    2066:	02 c0       	rjmp	.+4      	; 0x206c <dtoa_prf+0xf0>
    2068:	2d 93       	st	X+, r18
    206a:	91 50       	subi	r25, 0x01	; 1
    206c:	99 23       	and	r25, r25
    206e:	e1 f7       	brne	.-8      	; 0x2068 <dtoa_prf+0xec>
    2070:	c8 0e       	add	r12, r24
    2072:	d1 1c       	adc	r13, r1
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	ee 23       	and	r30, r30
    2078:	19 f0       	breq	.+6      	; 0x2080 <dtoa_prf+0x104>
    207a:	d6 01       	movw	r26, r12
    207c:	ed 93       	st	X+, r30
    207e:	6d 01       	movw	r12, r26
    2080:	f6 01       	movw	r30, r12
    2082:	31 96       	adiw	r30, 0x01	; 1
    2084:	e2 fe       	sbrs	r14, 2
    2086:	09 c0       	rjmp	.+18     	; 0x209a <dtoa_prf+0x11e>
    2088:	99 e4       	ldi	r25, 0x49	; 73
    208a:	d6 01       	movw	r26, r12
    208c:	9c 93       	st	X, r25
    208e:	9e e4       	ldi	r25, 0x4E	; 78
    2090:	11 96       	adiw	r26, 0x01	; 1
    2092:	9c 93       	st	X, r25
    2094:	11 97       	sbiw	r26, 0x01	; 1
    2096:	96 e4       	ldi	r25, 0x46	; 70
    2098:	07 c0       	rjmp	.+14     	; 0x20a8 <dtoa_prf+0x12c>
    209a:	99 e6       	ldi	r25, 0x69	; 105
    209c:	d6 01       	movw	r26, r12
    209e:	9c 93       	st	X, r25
    20a0:	9e e6       	ldi	r25, 0x6E	; 110
    20a2:	11 96       	adiw	r26, 0x01	; 1
    20a4:	9c 93       	st	X, r25
    20a6:	96 e6       	ldi	r25, 0x66	; 102
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	32 96       	adiw	r30, 0x02	; 2
    20ac:	98 2f       	mov	r25, r24
    20ae:	df 01       	movw	r26, r30
    20b0:	20 e2       	ldi	r18, 0x20	; 32
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <dtoa_prf+0x13c>
    20b4:	2d 93       	st	X+, r18
    20b6:	91 50       	subi	r25, 0x01	; 1
    20b8:	99 23       	and	r25, r25
    20ba:	e1 f7       	brne	.-8      	; 0x20b4 <dtoa_prf+0x138>
    20bc:	e8 0f       	add	r30, r24
    20be:	f1 1d       	adc	r31, r1
    20c0:	10 82       	st	Z, r1
    20c2:	2e ef       	ldi	r18, 0xFE	; 254
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	ac c0       	rjmp	.+344    	; 0x2220 <dtoa_prf+0x2a4>
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	ee 23       	and	r30, r30
    20ce:	11 f4       	brne	.+4      	; 0x20d4 <dtoa_prf+0x158>
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	18 16       	cp	r1, r24
    20d6:	19 06       	cpc	r1, r25
    20d8:	24 f4       	brge	.+8      	; 0x20e2 <dtoa_prf+0x166>
    20da:	bc 01       	movw	r22, r24
    20dc:	6f 5f       	subi	r22, 0xFF	; 255
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <dtoa_prf+0x16a>
    20e2:	61 e0       	ldi	r22, 0x01	; 1
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	64 0f       	add	r22, r20
    20e8:	75 1f       	adc	r23, r21
    20ea:	11 23       	and	r17, r17
    20ec:	29 f0       	breq	.+10     	; 0x20f8 <dtoa_prf+0x17c>
    20ee:	41 2f       	mov	r20, r17
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	4f 5f       	subi	r20, 0xFF	; 255
    20f4:	5f 4f       	sbci	r21, 0xFF	; 255
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <dtoa_prf+0x180>
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	46 0f       	add	r20, r22
    20fe:	57 1f       	adc	r21, r23
    2100:	6f 2d       	mov	r22, r15
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	46 17       	cp	r20, r22
    2106:	57 07       	cpc	r21, r23
    2108:	1c f4       	brge	.+6      	; 0x2110 <dtoa_prf+0x194>
    210a:	0f 2d       	mov	r16, r15
    210c:	04 1b       	sub	r16, r20
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <dtoa_prf+0x196>
    2110:	00 e0       	ldi	r16, 0x00	; 0
    2112:	ff 24       	eor	r15, r15
    2114:	a7 01       	movw	r20, r14
    2116:	40 71       	andi	r20, 0x10	; 16
    2118:	50 70       	andi	r21, 0x00	; 0
    211a:	e4 fc       	sbrc	r14, 4
    211c:	0d c0       	rjmp	.+26     	; 0x2138 <dtoa_prf+0x1bc>
    211e:	e3 fc       	sbrc	r14, 3
    2120:	0b c0       	rjmp	.+22     	; 0x2138 <dtoa_prf+0x1bc>
    2122:	60 2f       	mov	r22, r16
    2124:	d6 01       	movw	r26, r12
    2126:	70 e2       	ldi	r23, 0x20	; 32
    2128:	02 c0       	rjmp	.+4      	; 0x212e <dtoa_prf+0x1b2>
    212a:	7d 93       	st	X+, r23
    212c:	61 50       	subi	r22, 0x01	; 1
    212e:	66 23       	and	r22, r22
    2130:	e1 f7       	brne	.-8      	; 0x212a <dtoa_prf+0x1ae>
    2132:	c0 0e       	add	r12, r16
    2134:	d1 1c       	adc	r13, r1
    2136:	00 e0       	ldi	r16, 0x00	; 0
    2138:	ee 23       	and	r30, r30
    213a:	19 f0       	breq	.+6      	; 0x2142 <dtoa_prf+0x1c6>
    213c:	d6 01       	movw	r26, r12
    213e:	ed 93       	st	X+, r30
    2140:	6d 01       	movw	r12, r26
    2142:	41 15       	cp	r20, r1
    2144:	51 05       	cpc	r21, r1
    2146:	59 f4       	brne	.+22     	; 0x215e <dtoa_prf+0x1e2>
    2148:	40 2f       	mov	r20, r16
    214a:	f6 01       	movw	r30, r12
    214c:	50 e3       	ldi	r21, 0x30	; 48
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <dtoa_prf+0x1d8>
    2150:	51 93       	st	Z+, r21
    2152:	41 50       	subi	r20, 0x01	; 1
    2154:	44 23       	and	r20, r20
    2156:	e1 f7       	brne	.-8      	; 0x2150 <dtoa_prf+0x1d4>
    2158:	c0 0e       	add	r12, r16
    215a:	d1 1c       	adc	r13, r1
    215c:	00 e0       	ldi	r16, 0x00	; 0
    215e:	b8 0e       	add	r11, r24
    2160:	fa 80       	ldd	r15, Y+2	; 0x02
    2162:	a9 01       	movw	r20, r18
    2164:	40 71       	andi	r20, 0x10	; 16
    2166:	50 70       	andi	r21, 0x00	; 0
    2168:	24 ff       	sbrs	r18, 4
    216a:	04 c0       	rjmp	.+8      	; 0x2174 <dtoa_prf+0x1f8>
    216c:	bf 2d       	mov	r27, r15
    216e:	b1 33       	cpi	r27, 0x31	; 49
    2170:	09 f4       	brne	.+2      	; 0x2174 <dtoa_prf+0x1f8>
    2172:	ba 94       	dec	r11
    2174:	1b 14       	cp	r1, r11
    2176:	2c f4       	brge	.+10     	; 0x2182 <dtoa_prf+0x206>
    2178:	ab 2d       	mov	r26, r11
    217a:	a9 30       	cpi	r26, 0x09	; 9
    217c:	18 f0       	brcs	.+6      	; 0x2184 <dtoa_prf+0x208>
    217e:	a8 e0       	ldi	r26, 0x08	; 8
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <dtoa_prf+0x208>
    2182:	a1 e0       	ldi	r26, 0x01	; 1
    2184:	9c 01       	movw	r18, r24
    2186:	97 ff       	sbrs	r25, 7
    2188:	02 c0       	rjmp	.+4      	; 0x218e <dtoa_prf+0x212>
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	bc 01       	movw	r22, r24
    2190:	6f 5f       	subi	r22, 0xFF	; 255
    2192:	7f 4f       	sbci	r23, 0xFF	; 255
    2194:	62 1b       	sub	r22, r18
    2196:	73 0b       	sbc	r23, r19
    2198:	fe 01       	movw	r30, r28
    219a:	31 96       	adiw	r30, 0x01	; 1
    219c:	e6 0f       	add	r30, r22
    219e:	f7 1f       	adc	r31, r23
    21a0:	6e e2       	ldi	r22, 0x2E	; 46
    21a2:	e6 2e       	mov	r14, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	6a 1b       	sub	r22, r26
    21a8:	71 09       	sbc	r23, r1
    21aa:	a1 2f       	mov	r26, r17
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	aa 24       	eor	r10, r10
    21b0:	bb 24       	eor	r11, r11
    21b2:	aa 1a       	sub	r10, r26
    21b4:	bb 0a       	sbc	r11, r27
    21b6:	1f ef       	ldi	r17, 0xFF	; 255
    21b8:	2f 3f       	cpi	r18, 0xFF	; 255
    21ba:	31 07       	cpc	r19, r17
    21bc:	19 f4       	brne	.+6      	; 0x21c4 <dtoa_prf+0x248>
    21be:	d6 01       	movw	r26, r12
    21c0:	ed 92       	st	X+, r14
    21c2:	6d 01       	movw	r12, r26
    21c4:	82 17       	cp	r24, r18
    21c6:	93 07       	cpc	r25, r19
    21c8:	2c f0       	brlt	.+10     	; 0x21d4 <dtoa_prf+0x258>
    21ca:	62 17       	cp	r22, r18
    21cc:	73 07       	cpc	r23, r19
    21ce:	14 f4       	brge	.+4      	; 0x21d4 <dtoa_prf+0x258>
    21d0:	10 81       	ld	r17, Z
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <dtoa_prf+0x25a>
    21d4:	10 e3       	ldi	r17, 0x30	; 48
    21d6:	21 50       	subi	r18, 0x01	; 1
    21d8:	30 40       	sbci	r19, 0x00	; 0
    21da:	31 96       	adiw	r30, 0x01	; 1
    21dc:	2a 15       	cp	r18, r10
    21de:	3b 05       	cpc	r19, r11
    21e0:	24 f0       	brlt	.+8      	; 0x21ea <dtoa_prf+0x26e>
    21e2:	d6 01       	movw	r26, r12
    21e4:	1d 93       	st	X+, r17
    21e6:	6d 01       	movw	r12, r26
    21e8:	e6 cf       	rjmp	.-52     	; 0x21b6 <dtoa_prf+0x23a>
    21ea:	28 17       	cp	r18, r24
    21ec:	39 07       	cpc	r19, r25
    21ee:	49 f4       	brne	.+18     	; 0x2202 <dtoa_prf+0x286>
    21f0:	bf 2d       	mov	r27, r15
    21f2:	b6 33       	cpi	r27, 0x36	; 54
    21f4:	28 f4       	brcc	.+10     	; 0x2200 <dtoa_prf+0x284>
    21f6:	b5 33       	cpi	r27, 0x35	; 53
    21f8:	21 f4       	brne	.+8      	; 0x2202 <dtoa_prf+0x286>
    21fa:	41 15       	cp	r20, r1
    21fc:	51 05       	cpc	r21, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <dtoa_prf+0x286>
    2200:	11 e3       	ldi	r17, 0x31	; 49
    2202:	f6 01       	movw	r30, r12
    2204:	11 93       	st	Z+, r17
    2206:	80 2f       	mov	r24, r16
    2208:	df 01       	movw	r26, r30
    220a:	90 e2       	ldi	r25, 0x20	; 32
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <dtoa_prf+0x296>
    220e:	9d 93       	st	X+, r25
    2210:	81 50       	subi	r24, 0x01	; 1
    2212:	88 23       	and	r24, r24
    2214:	e1 f7       	brne	.-8      	; 0x220e <dtoa_prf+0x292>
    2216:	e0 0f       	add	r30, r16
    2218:	f1 1d       	adc	r31, r1
    221a:	10 82       	st	Z, r1
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	c9 01       	movw	r24, r18
    2222:	29 96       	adiw	r28, 0x09	; 9
    2224:	ea e0       	ldi	r30, 0x0A	; 10
    2226:	0c 94 43 12 	jmp	0x2486	; 0x2486 <__epilogue_restores__+0x10>

0000222a <__ftoa_engine>:
    222a:	28 30       	cpi	r18, 0x08	; 8
    222c:	08 f0       	brcs	.+2      	; 0x2230 <__ftoa_engine+0x6>
    222e:	27 e0       	ldi	r18, 0x07	; 7
    2230:	33 27       	eor	r19, r19
    2232:	da 01       	movw	r26, r20
    2234:	99 0f       	add	r25, r25
    2236:	31 1d       	adc	r19, r1
    2238:	87 fd       	sbrc	r24, 7
    223a:	91 60       	ori	r25, 0x01	; 1
    223c:	00 96       	adiw	r24, 0x00	; 0
    223e:	61 05       	cpc	r22, r1
    2240:	71 05       	cpc	r23, r1
    2242:	39 f4       	brne	.+14     	; 0x2252 <__ftoa_engine+0x28>
    2244:	32 60       	ori	r19, 0x02	; 2
    2246:	2e 5f       	subi	r18, 0xFE	; 254
    2248:	3d 93       	st	X+, r19
    224a:	30 e3       	ldi	r19, 0x30	; 48
    224c:	2a 95       	dec	r18
    224e:	e1 f7       	brne	.-8      	; 0x2248 <__ftoa_engine+0x1e>
    2250:	08 95       	ret
    2252:	9f 3f       	cpi	r25, 0xFF	; 255
    2254:	30 f0       	brcs	.+12     	; 0x2262 <__ftoa_engine+0x38>
    2256:	80 38       	cpi	r24, 0x80	; 128
    2258:	71 05       	cpc	r23, r1
    225a:	61 05       	cpc	r22, r1
    225c:	09 f0       	breq	.+2      	; 0x2260 <__ftoa_engine+0x36>
    225e:	3c 5f       	subi	r19, 0xFC	; 252
    2260:	3c 5f       	subi	r19, 0xFC	; 252
    2262:	3d 93       	st	X+, r19
    2264:	91 30       	cpi	r25, 0x01	; 1
    2266:	08 f0       	brcs	.+2      	; 0x226a <__ftoa_engine+0x40>
    2268:	80 68       	ori	r24, 0x80	; 128
    226a:	91 1d       	adc	r25, r1
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	1f 93       	push	r17
    2272:	0f 93       	push	r16
    2274:	ff 92       	push	r15
    2276:	ef 92       	push	r14
    2278:	19 2f       	mov	r17, r25
    227a:	98 7f       	andi	r25, 0xF8	; 248
    227c:	96 95       	lsr	r25
    227e:	e9 2f       	mov	r30, r25
    2280:	96 95       	lsr	r25
    2282:	96 95       	lsr	r25
    2284:	e9 0f       	add	r30, r25
    2286:	ff 27       	eor	r31, r31
    2288:	e2 55       	subi	r30, 0x52	; 82
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	99 27       	eor	r25, r25
    228e:	33 27       	eor	r19, r19
    2290:	ee 24       	eor	r14, r14
    2292:	ff 24       	eor	r15, r15
    2294:	a7 01       	movw	r20, r14
    2296:	e7 01       	movw	r28, r14
    2298:	05 90       	lpm	r0, Z+
    229a:	08 94       	sec
    229c:	07 94       	ror	r0
    229e:	28 f4       	brcc	.+10     	; 0x22aa <__ftoa_engine+0x80>
    22a0:	36 0f       	add	r19, r22
    22a2:	e7 1e       	adc	r14, r23
    22a4:	f8 1e       	adc	r15, r24
    22a6:	49 1f       	adc	r20, r25
    22a8:	51 1d       	adc	r21, r1
    22aa:	66 0f       	add	r22, r22
    22ac:	77 1f       	adc	r23, r23
    22ae:	88 1f       	adc	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	06 94       	lsr	r0
    22b4:	a1 f7       	brne	.-24     	; 0x229e <__ftoa_engine+0x74>
    22b6:	05 90       	lpm	r0, Z+
    22b8:	07 94       	ror	r0
    22ba:	28 f4       	brcc	.+10     	; 0x22c6 <__ftoa_engine+0x9c>
    22bc:	e7 0e       	add	r14, r23
    22be:	f8 1e       	adc	r15, r24
    22c0:	49 1f       	adc	r20, r25
    22c2:	56 1f       	adc	r21, r22
    22c4:	c1 1d       	adc	r28, r1
    22c6:	77 0f       	add	r23, r23
    22c8:	88 1f       	adc	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	66 1f       	adc	r22, r22
    22ce:	06 94       	lsr	r0
    22d0:	a1 f7       	brne	.-24     	; 0x22ba <__ftoa_engine+0x90>
    22d2:	05 90       	lpm	r0, Z+
    22d4:	07 94       	ror	r0
    22d6:	28 f4       	brcc	.+10     	; 0x22e2 <__ftoa_engine+0xb8>
    22d8:	f8 0e       	add	r15, r24
    22da:	49 1f       	adc	r20, r25
    22dc:	56 1f       	adc	r21, r22
    22de:	c7 1f       	adc	r28, r23
    22e0:	d1 1d       	adc	r29, r1
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	66 1f       	adc	r22, r22
    22e8:	77 1f       	adc	r23, r23
    22ea:	06 94       	lsr	r0
    22ec:	a1 f7       	brne	.-24     	; 0x22d6 <__ftoa_engine+0xac>
    22ee:	05 90       	lpm	r0, Z+
    22f0:	07 94       	ror	r0
    22f2:	20 f4       	brcc	.+8      	; 0x22fc <__ftoa_engine+0xd2>
    22f4:	49 0f       	add	r20, r25
    22f6:	56 1f       	adc	r21, r22
    22f8:	c7 1f       	adc	r28, r23
    22fa:	d8 1f       	adc	r29, r24
    22fc:	99 0f       	add	r25, r25
    22fe:	66 1f       	adc	r22, r22
    2300:	77 1f       	adc	r23, r23
    2302:	88 1f       	adc	r24, r24
    2304:	06 94       	lsr	r0
    2306:	a9 f7       	brne	.-22     	; 0x22f2 <__ftoa_engine+0xc8>
    2308:	84 91       	lpm	r24, Z+
    230a:	10 95       	com	r17
    230c:	17 70       	andi	r17, 0x07	; 7
    230e:	41 f0       	breq	.+16     	; 0x2320 <__ftoa_engine+0xf6>
    2310:	d6 95       	lsr	r29
    2312:	c7 95       	ror	r28
    2314:	57 95       	ror	r21
    2316:	47 95       	ror	r20
    2318:	f7 94       	ror	r15
    231a:	e7 94       	ror	r14
    231c:	1a 95       	dec	r17
    231e:	c1 f7       	brne	.-16     	; 0x2310 <__ftoa_engine+0xe6>
    2320:	e4 e5       	ldi	r30, 0x54	; 84
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	68 94       	set
    2326:	15 90       	lpm	r1, Z+
    2328:	15 91       	lpm	r17, Z+
    232a:	35 91       	lpm	r19, Z+
    232c:	65 91       	lpm	r22, Z+
    232e:	95 91       	lpm	r25, Z+
    2330:	05 90       	lpm	r0, Z+
    2332:	7f e2       	ldi	r23, 0x2F	; 47
    2334:	73 95       	inc	r23
    2336:	e1 18       	sub	r14, r1
    2338:	f1 0a       	sbc	r15, r17
    233a:	43 0b       	sbc	r20, r19
    233c:	56 0b       	sbc	r21, r22
    233e:	c9 0b       	sbc	r28, r25
    2340:	d0 09       	sbc	r29, r0
    2342:	c0 f7       	brcc	.-16     	; 0x2334 <__ftoa_engine+0x10a>
    2344:	e1 0c       	add	r14, r1
    2346:	f1 1e       	adc	r15, r17
    2348:	43 1f       	adc	r20, r19
    234a:	56 1f       	adc	r21, r22
    234c:	c9 1f       	adc	r28, r25
    234e:	d0 1d       	adc	r29, r0
    2350:	7e f4       	brtc	.+30     	; 0x2370 <__ftoa_engine+0x146>
    2352:	70 33       	cpi	r23, 0x30	; 48
    2354:	11 f4       	brne	.+4      	; 0x235a <__ftoa_engine+0x130>
    2356:	8a 95       	dec	r24
    2358:	e6 cf       	rjmp	.-52     	; 0x2326 <__ftoa_engine+0xfc>
    235a:	e8 94       	clt
    235c:	01 50       	subi	r16, 0x01	; 1
    235e:	30 f0       	brcs	.+12     	; 0x236c <__ftoa_engine+0x142>
    2360:	08 0f       	add	r16, r24
    2362:	0a f4       	brpl	.+2      	; 0x2366 <__ftoa_engine+0x13c>
    2364:	00 27       	eor	r16, r16
    2366:	02 17       	cp	r16, r18
    2368:	08 f4       	brcc	.+2      	; 0x236c <__ftoa_engine+0x142>
    236a:	20 2f       	mov	r18, r16
    236c:	23 95       	inc	r18
    236e:	02 2f       	mov	r16, r18
    2370:	7a 33       	cpi	r23, 0x3A	; 58
    2372:	28 f0       	brcs	.+10     	; 0x237e <__ftoa_engine+0x154>
    2374:	79 e3       	ldi	r23, 0x39	; 57
    2376:	7d 93       	st	X+, r23
    2378:	2a 95       	dec	r18
    237a:	e9 f7       	brne	.-6      	; 0x2376 <__ftoa_engine+0x14c>
    237c:	10 c0       	rjmp	.+32     	; 0x239e <__ftoa_engine+0x174>
    237e:	7d 93       	st	X+, r23
    2380:	2a 95       	dec	r18
    2382:	89 f6       	brne	.-94     	; 0x2326 <__ftoa_engine+0xfc>
    2384:	06 94       	lsr	r0
    2386:	97 95       	ror	r25
    2388:	67 95       	ror	r22
    238a:	37 95       	ror	r19
    238c:	17 95       	ror	r17
    238e:	17 94       	ror	r1
    2390:	e1 18       	sub	r14, r1
    2392:	f1 0a       	sbc	r15, r17
    2394:	43 0b       	sbc	r20, r19
    2396:	56 0b       	sbc	r21, r22
    2398:	c9 0b       	sbc	r28, r25
    239a:	d0 09       	sbc	r29, r0
    239c:	98 f0       	brcs	.+38     	; 0x23c4 <__ftoa_engine+0x19a>
    239e:	23 95       	inc	r18
    23a0:	7e 91       	ld	r23, -X
    23a2:	73 95       	inc	r23
    23a4:	7a 33       	cpi	r23, 0x3A	; 58
    23a6:	08 f0       	brcs	.+2      	; 0x23aa <__ftoa_engine+0x180>
    23a8:	70 e3       	ldi	r23, 0x30	; 48
    23aa:	7c 93       	st	X, r23
    23ac:	20 13       	cpse	r18, r16
    23ae:	b8 f7       	brcc	.-18     	; 0x239e <__ftoa_engine+0x174>
    23b0:	7e 91       	ld	r23, -X
    23b2:	70 61       	ori	r23, 0x10	; 16
    23b4:	7d 93       	st	X+, r23
    23b6:	30 f0       	brcs	.+12     	; 0x23c4 <__ftoa_engine+0x19a>
    23b8:	83 95       	inc	r24
    23ba:	71 e3       	ldi	r23, 0x31	; 49
    23bc:	7d 93       	st	X+, r23
    23be:	70 e3       	ldi	r23, 0x30	; 48
    23c0:	2a 95       	dec	r18
    23c2:	e1 f7       	brne	.-8      	; 0x23bc <__ftoa_engine+0x192>
    23c4:	11 24       	eor	r1, r1
    23c6:	ef 90       	pop	r14
    23c8:	ff 90       	pop	r15
    23ca:	0f 91       	pop	r16
    23cc:	1f 91       	pop	r17
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	99 27       	eor	r25, r25
    23d4:	87 fd       	sbrc	r24, 7
    23d6:	90 95       	com	r25
    23d8:	08 95       	ret

000023da <strrev>:
    23da:	dc 01       	movw	r26, r24
    23dc:	fc 01       	movw	r30, r24
    23de:	67 2f       	mov	r22, r23
    23e0:	71 91       	ld	r23, Z+
    23e2:	77 23       	and	r23, r23
    23e4:	e1 f7       	brne	.-8      	; 0x23de <strrev+0x4>
    23e6:	32 97       	sbiw	r30, 0x02	; 2
    23e8:	04 c0       	rjmp	.+8      	; 0x23f2 <strrev+0x18>
    23ea:	7c 91       	ld	r23, X
    23ec:	6d 93       	st	X+, r22
    23ee:	70 83       	st	Z, r23
    23f0:	62 91       	ld	r22, -Z
    23f2:	ae 17       	cp	r26, r30
    23f4:	bf 07       	cpc	r27, r31
    23f6:	c8 f3       	brcs	.-14     	; 0x23ea <strrev+0x10>
    23f8:	08 95       	ret

000023fa <__udivmodsi4>:
    23fa:	a1 e2       	ldi	r26, 0x21	; 33
    23fc:	1a 2e       	mov	r1, r26
    23fe:	aa 1b       	sub	r26, r26
    2400:	bb 1b       	sub	r27, r27
    2402:	fd 01       	movw	r30, r26
    2404:	0d c0       	rjmp	.+26     	; 0x2420 <__udivmodsi4_ep>

00002406 <__udivmodsi4_loop>:
    2406:	aa 1f       	adc	r26, r26
    2408:	bb 1f       	adc	r27, r27
    240a:	ee 1f       	adc	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	a2 17       	cp	r26, r18
    2410:	b3 07       	cpc	r27, r19
    2412:	e4 07       	cpc	r30, r20
    2414:	f5 07       	cpc	r31, r21
    2416:	20 f0       	brcs	.+8      	; 0x2420 <__udivmodsi4_ep>
    2418:	a2 1b       	sub	r26, r18
    241a:	b3 0b       	sbc	r27, r19
    241c:	e4 0b       	sbc	r30, r20
    241e:	f5 0b       	sbc	r31, r21

00002420 <__udivmodsi4_ep>:
    2420:	66 1f       	adc	r22, r22
    2422:	77 1f       	adc	r23, r23
    2424:	88 1f       	adc	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	1a 94       	dec	r1
    242a:	69 f7       	brne	.-38     	; 0x2406 <__udivmodsi4_loop>
    242c:	60 95       	com	r22
    242e:	70 95       	com	r23
    2430:	80 95       	com	r24
    2432:	90 95       	com	r25
    2434:	9b 01       	movw	r18, r22
    2436:	ac 01       	movw	r20, r24
    2438:	bd 01       	movw	r22, r26
    243a:	cf 01       	movw	r24, r30
    243c:	08 95       	ret

0000243e <__prologue_saves__>:
    243e:	2f 92       	push	r2
    2440:	3f 92       	push	r3
    2442:	4f 92       	push	r4
    2444:	5f 92       	push	r5
    2446:	6f 92       	push	r6
    2448:	7f 92       	push	r7
    244a:	8f 92       	push	r8
    244c:	9f 92       	push	r9
    244e:	af 92       	push	r10
    2450:	bf 92       	push	r11
    2452:	cf 92       	push	r12
    2454:	df 92       	push	r13
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	ca 1b       	sub	r28, r26
    2468:	db 0b       	sbc	r29, r27
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	09 94       	ijmp

00002476 <__epilogue_restores__>:
    2476:	2a 88       	ldd	r2, Y+18	; 0x12
    2478:	39 88       	ldd	r3, Y+17	; 0x11
    247a:	48 88       	ldd	r4, Y+16	; 0x10
    247c:	5f 84       	ldd	r5, Y+15	; 0x0f
    247e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2480:	7d 84       	ldd	r7, Y+13	; 0x0d
    2482:	8c 84       	ldd	r8, Y+12	; 0x0c
    2484:	9b 84       	ldd	r9, Y+11	; 0x0b
    2486:	aa 84       	ldd	r10, Y+10	; 0x0a
    2488:	b9 84       	ldd	r11, Y+9	; 0x09
    248a:	c8 84       	ldd	r12, Y+8	; 0x08
    248c:	df 80       	ldd	r13, Y+7	; 0x07
    248e:	ee 80       	ldd	r14, Y+6	; 0x06
    2490:	fd 80       	ldd	r15, Y+5	; 0x05
    2492:	0c 81       	ldd	r16, Y+4	; 0x04
    2494:	1b 81       	ldd	r17, Y+3	; 0x03
    2496:	aa 81       	ldd	r26, Y+2	; 0x02
    2498:	b9 81       	ldd	r27, Y+1	; 0x01
    249a:	ce 0f       	add	r28, r30
    249c:	d1 1d       	adc	r29, r1
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	ed 01       	movw	r28, r26
    24aa:	08 95       	ret

000024ac <_exit>:
    24ac:	f8 94       	cli

000024ae <__stop_program>:
    24ae:	ff cf       	rjmp	.-2      	; 0x24ae <__stop_program>
