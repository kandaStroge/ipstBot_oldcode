
02_9sen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00002a5e  00002af2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000f8  008000f8  00002b8a  2**0
                  ALLOC
  3 .stab         00001470  00000000  00000000  00002b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b4  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000040b  00000000  00000000  00004210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000131e  00000000  00000000  0000461b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002f3  00000000  00000000  00005939  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001abb  00000000  00000000  00005c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000470  00000000  00000000  000076e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000431  00000000  00000000  00007b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000622  00000000  00000000  00007f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000042  00000000  00000000  000085ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000038  00000000  00000000  000085ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 be 03 	jmp	0x77c	; 0x77c <__vector_8>
      24:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <motor_stop+0x16>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <out_c+0x5e>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <in_b+0x32>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <toggle_a+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ee e5       	ldi	r30, 0x5E	; 94
     162:	fa e2       	ldi	r31, 0x2A	; 42
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a8 3f       	cpi	r26, 0xF8	; 248
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a8 ef       	ldi	r26, 0xF8	; 248
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ac 30       	cpi	r26, 0x0C	; 12
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 4e 0c 	call	0x189c	; 0x189c <main>
     184:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <toggle_a>:
#define clear_c(x)   	DDRC |= _BV(x);	PORTC &= ~_BV(x);		
#define set_d(x)  		DDRD |= _BV(x);	PORTD |= _BV(x)		
#define clear_d(x)   	DDRD |= _BV(x);	PORTD &= ~_BV(x);		

void toggle_a(char x)
{
     18c:	df 93       	push	r29
     18e:	cf 93       	push	r28
     190:	0f 92       	push	r0
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	89 83       	std	Y+1, r24	; 0x01
	DDRA |= _BV(x); 
     198:	8a e3       	ldi	r24, 0x3A	; 58
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	2a e3       	ldi	r18, 0x3A	; 58
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	62 2f       	mov	r22, r18
     1a6:	29 81       	ldd	r18, Y+1	; 0x01
     1a8:	42 2f       	mov	r20, r18
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <toggle_a+0x2a>
     1b2:	22 0f       	add	r18, r18
     1b4:	33 1f       	adc	r19, r19
     1b6:	4a 95       	dec	r20
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <toggle_a+0x26>
     1ba:	26 2b       	or	r18, r22
     1bc:	fc 01       	movw	r30, r24
     1be:	20 83       	st	Z, r18
	PORTA ^= _BV(x);
     1c0:	8b e3       	ldi	r24, 0x3B	; 59
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	2b e3       	ldi	r18, 0x3B	; 59
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	f9 01       	movw	r30, r18
     1ca:	20 81       	ld	r18, Z
     1cc:	62 2f       	mov	r22, r18
     1ce:	29 81       	ldd	r18, Y+1	; 0x01
     1d0:	42 2f       	mov	r20, r18
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	21 e0       	ldi	r18, 0x01	; 1
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	04 2e       	mov	r0, r20
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <toggle_a+0x54>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	0a 94       	dec	r0
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <toggle_a+0x50>
     1e4:	26 27       	eor	r18, r22
     1e6:	fc 01       	movw	r30, r24
     1e8:	20 83       	st	Z, r18
}
     1ea:	0f 90       	pop	r0
     1ec:	cf 91       	pop	r28
     1ee:	df 91       	pop	r29
     1f0:	08 95       	ret

000001f2 <toggle_b>:
void toggle_b(char x)
{
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	0f 92       	push	r0
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	89 83       	std	Y+1, r24	; 0x01
	DDRB |= _BV(x); 
     1fe:	87 e3       	ldi	r24, 0x37	; 55
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	27 e3       	ldi	r18, 0x37	; 55
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	f9 01       	movw	r30, r18
     208:	20 81       	ld	r18, Z
     20a:	62 2f       	mov	r22, r18
     20c:	29 81       	ldd	r18, Y+1	; 0x01
     20e:	42 2f       	mov	r20, r18
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	02 c0       	rjmp	.+4      	; 0x21c <toggle_b+0x2a>
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	4a 95       	dec	r20
     21e:	e2 f7       	brpl	.-8      	; 0x218 <toggle_b+0x26>
     220:	26 2b       	or	r18, r22
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
	PORTB ^= _BV(x);
     226:	88 e3       	ldi	r24, 0x38	; 56
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	28 e3       	ldi	r18, 0x38	; 56
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	62 2f       	mov	r22, r18
     234:	29 81       	ldd	r18, Y+1	; 0x01
     236:	42 2f       	mov	r20, r18
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	21 e0       	ldi	r18, 0x01	; 1
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	04 2e       	mov	r0, r20
     240:	02 c0       	rjmp	.+4      	; 0x246 <toggle_b+0x54>
     242:	22 0f       	add	r18, r18
     244:	33 1f       	adc	r19, r19
     246:	0a 94       	dec	r0
     248:	e2 f7       	brpl	.-8      	; 0x242 <toggle_b+0x50>
     24a:	26 27       	eor	r18, r22
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
}
     250:	0f 90       	pop	r0
     252:	cf 91       	pop	r28
     254:	df 91       	pop	r29
     256:	08 95       	ret

00000258 <toggle_c>:
void toggle_c(char x)
{
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	0f 92       	push	r0
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	89 83       	std	Y+1, r24	; 0x01
	DDRC |= _BV(x); 
     264:	84 e3       	ldi	r24, 0x34	; 52
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	24 e3       	ldi	r18, 0x34	; 52
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	f9 01       	movw	r30, r18
     26e:	20 81       	ld	r18, Z
     270:	62 2f       	mov	r22, r18
     272:	29 81       	ldd	r18, Y+1	; 0x01
     274:	42 2f       	mov	r20, r18
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	02 c0       	rjmp	.+4      	; 0x282 <toggle_c+0x2a>
     27e:	22 0f       	add	r18, r18
     280:	33 1f       	adc	r19, r19
     282:	4a 95       	dec	r20
     284:	e2 f7       	brpl	.-8      	; 0x27e <toggle_c+0x26>
     286:	26 2b       	or	r18, r22
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
	PORTC ^= _BV(x);
     28c:	85 e3       	ldi	r24, 0x35	; 53
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	25 e3       	ldi	r18, 0x35	; 53
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	f9 01       	movw	r30, r18
     296:	20 81       	ld	r18, Z
     298:	62 2f       	mov	r22, r18
     29a:	29 81       	ldd	r18, Y+1	; 0x01
     29c:	42 2f       	mov	r20, r18
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	04 2e       	mov	r0, r20
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <toggle_c+0x54>
     2a8:	22 0f       	add	r18, r18
     2aa:	33 1f       	adc	r19, r19
     2ac:	0a 94       	dec	r0
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <toggle_c+0x50>
     2b0:	26 27       	eor	r18, r22
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
}
     2b6:	0f 90       	pop	r0
     2b8:	cf 91       	pop	r28
     2ba:	df 91       	pop	r29
     2bc:	08 95       	ret

000002be <toggle_d>:
void toggle_d(char x)
{
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	0f 92       	push	r0
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	89 83       	std	Y+1, r24	; 0x01
	DDRD |= _BV(x); 
     2ca:	81 e3       	ldi	r24, 0x31	; 49
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	21 e3       	ldi	r18, 0x31	; 49
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	f9 01       	movw	r30, r18
     2d4:	20 81       	ld	r18, Z
     2d6:	62 2f       	mov	r22, r18
     2d8:	29 81       	ldd	r18, Y+1	; 0x01
     2da:	42 2f       	mov	r20, r18
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	21 e0       	ldi	r18, 0x01	; 1
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <toggle_d+0x2a>
     2e4:	22 0f       	add	r18, r18
     2e6:	33 1f       	adc	r19, r19
     2e8:	4a 95       	dec	r20
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <toggle_d+0x26>
     2ec:	26 2b       	or	r18, r22
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18
	PORTD ^= _BV(x);
     2f2:	82 e3       	ldi	r24, 0x32	; 50
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	22 e3       	ldi	r18, 0x32	; 50
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	f9 01       	movw	r30, r18
     2fc:	20 81       	ld	r18, Z
     2fe:	62 2f       	mov	r22, r18
     300:	29 81       	ldd	r18, Y+1	; 0x01
     302:	42 2f       	mov	r20, r18
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	04 2e       	mov	r0, r20
     30c:	02 c0       	rjmp	.+4      	; 0x312 <toggle_d+0x54>
     30e:	22 0f       	add	r18, r18
     310:	33 1f       	adc	r19, r19
     312:	0a 94       	dec	r0
     314:	e2 f7       	brpl	.-8      	; 0x30e <toggle_d+0x50>
     316:	26 27       	eor	r18, r22
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
}
     31c:	0f 90       	pop	r0
     31e:	cf 91       	pop	r28
     320:	df 91       	pop	r29
     322:	08 95       	ret

00000324 <in_a>:
char in_a(char _bit)
{
     324:	df 93       	push	r29
     326:	cf 93       	push	r28
     328:	0f 92       	push	r0
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	89 83       	std	Y+1, r24	; 0x01
	DDRA &= ~(1<<_bit);
     330:	8a e3       	ldi	r24, 0x3A	; 58
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	2a e3       	ldi	r18, 0x3A	; 58
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	f9 01       	movw	r30, r18
     33a:	20 81       	ld	r18, Z
     33c:	62 2f       	mov	r22, r18
     33e:	29 81       	ldd	r18, Y+1	; 0x01
     340:	42 2f       	mov	r20, r18
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	21 e0       	ldi	r18, 0x01	; 1
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <in_a+0x2a>
     34a:	22 0f       	add	r18, r18
     34c:	33 1f       	adc	r19, r19
     34e:	4a 95       	dec	r20
     350:	e2 f7       	brpl	.-8      	; 0x34a <in_a+0x26>
     352:	20 95       	com	r18
     354:	26 23       	and	r18, r22
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18
	return((PINA & _BV(_bit))>>_bit);	
     35a:	89 e3       	ldi	r24, 0x39	; 57
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	fc 01       	movw	r30, r24
     360:	80 81       	ld	r24, Z
     362:	28 2f       	mov	r18, r24
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	48 2f       	mov	r20, r24
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	04 2e       	mov	r0, r20
     372:	02 c0       	rjmp	.+4      	; 0x378 <in_a+0x54>
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	0a 94       	dec	r0
     37a:	e2 f7       	brpl	.-8      	; 0x374 <in_a+0x50>
     37c:	82 23       	and	r24, r18
     37e:	93 23       	and	r25, r19
     380:	29 81       	ldd	r18, Y+1	; 0x01
     382:	22 2f       	mov	r18, r18
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	02 2e       	mov	r0, r18
     388:	02 c0       	rjmp	.+4      	; 0x38e <in_a+0x6a>
     38a:	95 95       	asr	r25
     38c:	87 95       	ror	r24
     38e:	0a 94       	dec	r0
     390:	e2 f7       	brpl	.-8      	; 0x38a <in_a+0x66>
}
     392:	0f 90       	pop	r0
     394:	cf 91       	pop	r28
     396:	df 91       	pop	r29
     398:	08 95       	ret

0000039a <in_b>:
char in_b(char _bit)
{
     39a:	df 93       	push	r29
     39c:	cf 93       	push	r28
     39e:	0f 92       	push	r0
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	89 83       	std	Y+1, r24	; 0x01
	DDRB &= ~(1<<_bit);
     3a6:	87 e3       	ldi	r24, 0x37	; 55
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	27 e3       	ldi	r18, 0x37	; 55
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	f9 01       	movw	r30, r18
     3b0:	20 81       	ld	r18, Z
     3b2:	62 2f       	mov	r22, r18
     3b4:	29 81       	ldd	r18, Y+1	; 0x01
     3b6:	42 2f       	mov	r20, r18
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <in_b+0x2a>
     3c0:	22 0f       	add	r18, r18
     3c2:	33 1f       	adc	r19, r19
     3c4:	4a 95       	dec	r20
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <in_b+0x26>
     3c8:	20 95       	com	r18
     3ca:	26 23       	and	r18, r22
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18
	return((PINB & _BV(_bit))>>_bit);	
     3d0:	86 e3       	ldi	r24, 0x36	; 54
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	fc 01       	movw	r30, r24
     3d6:	80 81       	ld	r24, Z
     3d8:	28 2f       	mov	r18, r24
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	48 2f       	mov	r20, r24
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	04 2e       	mov	r0, r20
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <in_b+0x54>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	0a 94       	dec	r0
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <in_b+0x50>
     3f2:	82 23       	and	r24, r18
     3f4:	93 23       	and	r25, r19
     3f6:	29 81       	ldd	r18, Y+1	; 0x01
     3f8:	22 2f       	mov	r18, r18
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	02 2e       	mov	r0, r18
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <in_b+0x6a>
     400:	95 95       	asr	r25
     402:	87 95       	ror	r24
     404:	0a 94       	dec	r0
     406:	e2 f7       	brpl	.-8      	; 0x400 <in_b+0x66>
}
     408:	0f 90       	pop	r0
     40a:	cf 91       	pop	r28
     40c:	df 91       	pop	r29
     40e:	08 95       	ret

00000410 <in_c>:
char in_c(char _bit)
{
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	0f 92       	push	r0
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	89 83       	std	Y+1, r24	; 0x01
	DDRC &= ~(1<<_bit);
     41c:	84 e3       	ldi	r24, 0x34	; 52
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	24 e3       	ldi	r18, 0x34	; 52
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	f9 01       	movw	r30, r18
     426:	20 81       	ld	r18, Z
     428:	62 2f       	mov	r22, r18
     42a:	29 81       	ldd	r18, Y+1	; 0x01
     42c:	42 2f       	mov	r20, r18
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <in_c+0x2a>
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	4a 95       	dec	r20
     43c:	e2 f7       	brpl	.-8      	; 0x436 <in_c+0x26>
     43e:	20 95       	com	r18
     440:	26 23       	and	r18, r22
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18
	return((PINC & _BV(_bit))>>_bit);	
     446:	83 e3       	ldi	r24, 0x33	; 51
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	fc 01       	movw	r30, r24
     44c:	80 81       	ld	r24, Z
     44e:	28 2f       	mov	r18, r24
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	48 2f       	mov	r20, r24
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	04 2e       	mov	r0, r20
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__stack+0x5>
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	0a 94       	dec	r0
     466:	e2 f7       	brpl	.-8      	; 0x460 <__stack+0x1>
     468:	82 23       	and	r24, r18
     46a:	93 23       	and	r25, r19
     46c:	29 81       	ldd	r18, Y+1	; 0x01
     46e:	22 2f       	mov	r18, r18
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	02 2e       	mov	r0, r18
     474:	02 c0       	rjmp	.+4      	; 0x47a <__stack+0x1b>
     476:	95 95       	asr	r25
     478:	87 95       	ror	r24
     47a:	0a 94       	dec	r0
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__stack+0x17>
}
     47e:	0f 90       	pop	r0
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <in_d>:
char in_d(char _bit)
{
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	0f 92       	push	r0
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= ~(1<<_bit);
     492:	81 e3       	ldi	r24, 0x31	; 49
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	21 e3       	ldi	r18, 0x31	; 49
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	f9 01       	movw	r30, r18
     49c:	20 81       	ld	r18, Z
     49e:	62 2f       	mov	r22, r18
     4a0:	29 81       	ldd	r18, Y+1	; 0x01
     4a2:	42 2f       	mov	r20, r18
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <in_d+0x2a>
     4ac:	22 0f       	add	r18, r18
     4ae:	33 1f       	adc	r19, r19
     4b0:	4a 95       	dec	r20
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <in_d+0x26>
     4b4:	20 95       	com	r18
     4b6:	26 23       	and	r18, r22
     4b8:	fc 01       	movw	r30, r24
     4ba:	20 83       	st	Z, r18
	return((PIND & _BV(_bit))>>_bit);	
     4bc:	80 e3       	ldi	r24, 0x30	; 48
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	fc 01       	movw	r30, r24
     4c2:	80 81       	ld	r24, Z
     4c4:	28 2f       	mov	r18, r24
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	48 2f       	mov	r20, r24
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	04 2e       	mov	r0, r20
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <in_d+0x54>
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	0a 94       	dec	r0
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <in_d+0x50>
     4de:	82 23       	and	r24, r18
     4e0:	93 23       	and	r25, r19
     4e2:	29 81       	ldd	r18, Y+1	; 0x01
     4e4:	22 2f       	mov	r18, r18
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	02 2e       	mov	r0, r18
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <in_d+0x6a>
     4ec:	95 95       	asr	r25
     4ee:	87 95       	ror	r24
     4f0:	0a 94       	dec	r0
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <in_d+0x66>
}
     4f4:	0f 90       	pop	r0
     4f6:	cf 91       	pop	r28
     4f8:	df 91       	pop	r29
     4fa:	08 95       	ret

000004fc <out_a>:


void out_a(char _bit,char _dat)
{
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	00 d0       	rcall	.+0      	; 0x502 <out_a+0x6>
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	6a 83       	std	Y+2, r22	; 0x02
	DDRA |= _BV(_bit);
     50a:	8a e3       	ldi	r24, 0x3A	; 58
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	2a e3       	ldi	r18, 0x3A	; 58
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	f9 01       	movw	r30, r18
     514:	20 81       	ld	r18, Z
     516:	62 2f       	mov	r22, r18
     518:	29 81       	ldd	r18, Y+1	; 0x01
     51a:	42 2f       	mov	r20, r18
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	21 e0       	ldi	r18, 0x01	; 1
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	04 2e       	mov	r0, r20
     524:	02 c0       	rjmp	.+4      	; 0x52a <out_a+0x2e>
     526:	22 0f       	add	r18, r18
     528:	33 1f       	adc	r19, r19
     52a:	0a 94       	dec	r0
     52c:	e2 f7       	brpl	.-8      	; 0x526 <out_a+0x2a>
     52e:	26 2b       	or	r18, r22
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
	if(_dat)
     534:	8a 81       	ldd	r24, Y+2	; 0x02
     536:	88 23       	and	r24, r24
     538:	b1 f0       	breq	.+44     	; 0x566 <out_a+0x6a>
		PORTA |= _BV(_bit);
     53a:	8b e3       	ldi	r24, 0x3B	; 59
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	2b e3       	ldi	r18, 0x3B	; 59
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	f9 01       	movw	r30, r18
     544:	20 81       	ld	r18, Z
     546:	62 2f       	mov	r22, r18
     548:	29 81       	ldd	r18, Y+1	; 0x01
     54a:	42 2f       	mov	r20, r18
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	04 2e       	mov	r0, r20
     554:	02 c0       	rjmp	.+4      	; 0x55a <out_a+0x5e>
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	0a 94       	dec	r0
     55c:	e2 f7       	brpl	.-8      	; 0x556 <out_a+0x5a>
     55e:	26 2b       	or	r18, r22
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
     564:	16 c0       	rjmp	.+44     	; 0x592 <out_a+0x96>
	else
		PORTA &= ~_BV(_bit);
     566:	8b e3       	ldi	r24, 0x3B	; 59
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	2b e3       	ldi	r18, 0x3B	; 59
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	62 2f       	mov	r22, r18
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	42 2f       	mov	r20, r18
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	04 2e       	mov	r0, r20
     580:	02 c0       	rjmp	.+4      	; 0x586 <out_a+0x8a>
     582:	22 0f       	add	r18, r18
     584:	33 1f       	adc	r19, r19
     586:	0a 94       	dec	r0
     588:	e2 f7       	brpl	.-8      	; 0x582 <out_a+0x86>
     58a:	20 95       	com	r18
     58c:	26 23       	and	r18, r22
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18

}
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	08 95       	ret

0000059c <out_b>:
void out_b(char _bit,char _dat)
{
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <out_b+0x6>
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	89 83       	std	Y+1, r24	; 0x01
     5a8:	6a 83       	std	Y+2, r22	; 0x02
	DDRB |= _BV(_bit);
     5aa:	87 e3       	ldi	r24, 0x37	; 55
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	27 e3       	ldi	r18, 0x37	; 55
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	62 2f       	mov	r22, r18
     5b8:	29 81       	ldd	r18, Y+1	; 0x01
     5ba:	42 2f       	mov	r20, r18
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	21 e0       	ldi	r18, 0x01	; 1
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	04 2e       	mov	r0, r20
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <out_b+0x2e>
     5c6:	22 0f       	add	r18, r18
     5c8:	33 1f       	adc	r19, r19
     5ca:	0a 94       	dec	r0
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <out_b+0x2a>
     5ce:	26 2b       	or	r18, r22
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18
	if(_dat)
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
     5d6:	88 23       	and	r24, r24
     5d8:	b1 f0       	breq	.+44     	; 0x606 <out_b+0x6a>
		PORTB |= _BV(_bit);
     5da:	88 e3       	ldi	r24, 0x38	; 56
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	28 e3       	ldi	r18, 0x38	; 56
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	f9 01       	movw	r30, r18
     5e4:	20 81       	ld	r18, Z
     5e6:	62 2f       	mov	r22, r18
     5e8:	29 81       	ldd	r18, Y+1	; 0x01
     5ea:	42 2f       	mov	r20, r18
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	04 2e       	mov	r0, r20
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <out_b+0x5e>
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	0a 94       	dec	r0
     5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <out_b+0x5a>
     5fe:	26 2b       	or	r18, r22
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
     604:	16 c0       	rjmp	.+44     	; 0x632 <out_b+0x96>
	else
		PORTB &= ~_BV(_bit);
     606:	88 e3       	ldi	r24, 0x38	; 56
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	28 e3       	ldi	r18, 0x38	; 56
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f9 01       	movw	r30, r18
     610:	20 81       	ld	r18, Z
     612:	62 2f       	mov	r22, r18
     614:	29 81       	ldd	r18, Y+1	; 0x01
     616:	42 2f       	mov	r20, r18
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	04 2e       	mov	r0, r20
     620:	02 c0       	rjmp	.+4      	; 0x626 <out_b+0x8a>
     622:	22 0f       	add	r18, r18
     624:	33 1f       	adc	r19, r19
     626:	0a 94       	dec	r0
     628:	e2 f7       	brpl	.-8      	; 0x622 <out_b+0x86>
     62a:	20 95       	com	r18
     62c:	26 23       	and	r18, r22
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18

}
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	cf 91       	pop	r28
     638:	df 91       	pop	r29
     63a:	08 95       	ret

0000063c <out_c>:
void out_c(char _bit,char _dat)
{
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	00 d0       	rcall	.+0      	; 0x642 <out_c+0x6>
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	6a 83       	std	Y+2, r22	; 0x02
	DDRC |= _BV(_bit);
     64a:	84 e3       	ldi	r24, 0x34	; 52
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	24 e3       	ldi	r18, 0x34	; 52
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	f9 01       	movw	r30, r18
     654:	20 81       	ld	r18, Z
     656:	62 2f       	mov	r22, r18
     658:	29 81       	ldd	r18, Y+1	; 0x01
     65a:	42 2f       	mov	r20, r18
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	04 2e       	mov	r0, r20
     664:	02 c0       	rjmp	.+4      	; 0x66a <out_c+0x2e>
     666:	22 0f       	add	r18, r18
     668:	33 1f       	adc	r19, r19
     66a:	0a 94       	dec	r0
     66c:	e2 f7       	brpl	.-8      	; 0x666 <out_c+0x2a>
     66e:	26 2b       	or	r18, r22
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18
	if(_dat)
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	88 23       	and	r24, r24
     678:	b1 f0       	breq	.+44     	; 0x6a6 <out_c+0x6a>
		PORTC |= _BV(_bit);
     67a:	85 e3       	ldi	r24, 0x35	; 53
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	25 e3       	ldi	r18, 0x35	; 53
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	f9 01       	movw	r30, r18
     684:	20 81       	ld	r18, Z
     686:	62 2f       	mov	r22, r18
     688:	29 81       	ldd	r18, Y+1	; 0x01
     68a:	42 2f       	mov	r20, r18
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	21 e0       	ldi	r18, 0x01	; 1
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	04 2e       	mov	r0, r20
     694:	02 c0       	rjmp	.+4      	; 0x69a <out_c+0x5e>
     696:	22 0f       	add	r18, r18
     698:	33 1f       	adc	r19, r19
     69a:	0a 94       	dec	r0
     69c:	e2 f7       	brpl	.-8      	; 0x696 <out_c+0x5a>
     69e:	26 2b       	or	r18, r22
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
     6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <out_c+0x96>
	else
		PORTC &= ~_BV(_bit);
     6a6:	85 e3       	ldi	r24, 0x35	; 53
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	25 e3       	ldi	r18, 0x35	; 53
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	f9 01       	movw	r30, r18
     6b0:	20 81       	ld	r18, Z
     6b2:	62 2f       	mov	r22, r18
     6b4:	29 81       	ldd	r18, Y+1	; 0x01
     6b6:	42 2f       	mov	r20, r18
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	21 e0       	ldi	r18, 0x01	; 1
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	04 2e       	mov	r0, r20
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <out_c+0x8a>
     6c2:	22 0f       	add	r18, r18
     6c4:	33 1f       	adc	r19, r19
     6c6:	0a 94       	dec	r0
     6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <out_c+0x86>
     6ca:	20 95       	com	r18
     6cc:	26 23       	and	r18, r22
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 83       	st	Z, r18

}
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	cf 91       	pop	r28
     6d8:	df 91       	pop	r29
     6da:	08 95       	ret

000006dc <out_d>:
void out_d(char _bit,char _dat) 
{
     6dc:	df 93       	push	r29
     6de:	cf 93       	push	r28
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <out_d+0x6>
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	89 83       	std	Y+1, r24	; 0x01
     6e8:	6a 83       	std	Y+2, r22	; 0x02
	DDRD |= _BV(_bit);
     6ea:	81 e3       	ldi	r24, 0x31	; 49
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	21 e3       	ldi	r18, 0x31	; 49
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	62 2f       	mov	r22, r18
     6f8:	29 81       	ldd	r18, Y+1	; 0x01
     6fa:	42 2f       	mov	r20, r18
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	21 e0       	ldi	r18, 0x01	; 1
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	04 2e       	mov	r0, r20
     704:	02 c0       	rjmp	.+4      	; 0x70a <out_d+0x2e>
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	0a 94       	dec	r0
     70c:	e2 f7       	brpl	.-8      	; 0x706 <out_d+0x2a>
     70e:	26 2b       	or	r18, r22
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
	if(_dat)
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	88 23       	and	r24, r24
     718:	b1 f0       	breq	.+44     	; 0x746 <out_d+0x6a>
		PORTD |= _BV(_bit);
     71a:	82 e3       	ldi	r24, 0x32	; 50
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	22 e3       	ldi	r18, 0x32	; 50
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	f9 01       	movw	r30, r18
     724:	20 81       	ld	r18, Z
     726:	62 2f       	mov	r22, r18
     728:	29 81       	ldd	r18, Y+1	; 0x01
     72a:	42 2f       	mov	r20, r18
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	04 2e       	mov	r0, r20
     734:	02 c0       	rjmp	.+4      	; 0x73a <out_d+0x5e>
     736:	22 0f       	add	r18, r18
     738:	33 1f       	adc	r19, r19
     73a:	0a 94       	dec	r0
     73c:	e2 f7       	brpl	.-8      	; 0x736 <out_d+0x5a>
     73e:	26 2b       	or	r18, r22
     740:	fc 01       	movw	r30, r24
     742:	20 83       	st	Z, r18
     744:	16 c0       	rjmp	.+44     	; 0x772 <out_d+0x96>
	else
		PORTD &= ~_BV(_bit);
     746:	82 e3       	ldi	r24, 0x32	; 50
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	22 e3       	ldi	r18, 0x32	; 50
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	f9 01       	movw	r30, r18
     750:	20 81       	ld	r18, Z
     752:	62 2f       	mov	r22, r18
     754:	29 81       	ldd	r18, Y+1	; 0x01
     756:	42 2f       	mov	r20, r18
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	04 2e       	mov	r0, r20
     760:	02 c0       	rjmp	.+4      	; 0x766 <out_d+0x8a>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	0a 94       	dec	r0
     768:	e2 f7       	brpl	.-8      	; 0x762 <out_d+0x86>
     76a:	20 95       	com	r18
     76c:	26 23       	and	r18, r22
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
	
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	cf 91       	pop	r28
     778:	df 91       	pop	r29
     77a:	08 95       	ret

0000077c <__vector_8>:
#define all 3
unsigned char _duty1=0,_duty2=0; 
char pwm_ini =0;

SIGNAL (SIG_OVERFLOW1) // Interval 1 ms
{
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	2f 93       	push	r18
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	OCR1AL = _duty1; 
     798:	8a e4       	ldi	r24, 0x4A	; 74
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	20 91 f8 00 	lds	r18, 0x00F8
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
	OCR1BL = _duty2;
     7a4:	88 e4       	ldi	r24, 0x48	; 72
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	20 91 f9 00 	lds	r18, 0x00F9
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
}
     7b0:	cf 91       	pop	r28
     7b2:	df 91       	pop	r29
     7b4:	ff 91       	pop	r31
     7b6:	ef 91       	pop	r30
     7b8:	9f 91       	pop	r25
     7ba:	8f 91       	pop	r24
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <pwm_init>:

void pwm_init()
{
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |= (1<<WGM10);
     7d0:	8f e4       	ldi	r24, 0x4F	; 79
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	2f e4       	ldi	r18, 0x4F	; 79
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	f9 01       	movw	r30, r18
     7da:	20 81       	ld	r18, Z
     7dc:	21 60       	ori	r18, 0x01	; 1
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
	TCCR1B = (1<<CS12)|(1<<CS10)|(1<<WGM12);
     7e2:	8e e4       	ldi	r24, 0x4E	; 78
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	2d e0       	ldi	r18, 0x0D	; 13
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18
	TIFR |= 1<<TOV1; 	//Clear TOV1 / clear
     7ec:	88 e5       	ldi	r24, 0x58	; 88
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	28 e5       	ldi	r18, 0x58	; 88
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	f9 01       	movw	r30, r18
     7f6:	20 81       	ld	r18, Z
     7f8:	24 60       	ori	r18, 0x04	; 4
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18
	TIMSK |= 1<<TOIE1; 	//Enable Timer0 Overflow Interrupt
     7fe:	89 e5       	ldi	r24, 0x59	; 89
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	29 e5       	ldi	r18, 0x59	; 89
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	f9 01       	movw	r30, r18
     808:	20 81       	ld	r18, Z
     80a:	24 60       	ori	r18, 0x04	; 4
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18
	//timer_enable_int(_BV(TOIE1));
	sei();
     810:	78 94       	sei
}
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <pwm>:
void pwm(char channel,unsigned int duty)
{
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	00 d0       	rcall	.+0      	; 0x81e <pwm+0x6>
     81e:	0f 92       	push	r0
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	89 83       	std	Y+1, r24	; 0x01
     826:	7b 83       	std	Y+3, r23	; 0x03
     828:	6a 83       	std	Y+2, r22	; 0x02
	duty = (duty*255)/100;
     82a:	2a 81       	ldd	r18, Y+2	; 0x02
     82c:	3b 81       	ldd	r19, Y+3	; 0x03
     82e:	c9 01       	movw	r24, r18
     830:	ac 01       	movw	r20, r24
     832:	44 0f       	add	r20, r20
     834:	55 1f       	adc	r21, r21
     836:	ca 01       	movw	r24, r20
     838:	96 95       	lsr	r25
     83a:	98 2f       	mov	r25, r24
     83c:	88 27       	eor	r24, r24
     83e:	97 95       	ror	r25
     840:	87 95       	ror	r24
     842:	84 1b       	sub	r24, r20
     844:	95 0b       	sbc	r25, r21
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	24 e6       	ldi	r18, 0x64	; 100
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	b9 01       	movw	r22, r18
     850:	0e 94 18 12 	call	0x2430	; 0x2430 <__udivmodhi4>
     854:	9b 01       	movw	r18, r22
     856:	3b 83       	std	Y+3, r19	; 0x03
     858:	2a 83       	std	Y+2, r18	; 0x02
	if(pwm_ini==0)
     85a:	80 91 fa 00 	lds	r24, 0x00FA
     85e:	88 23       	and	r24, r24
     860:	29 f4       	brne	.+10     	; 0x86c <pwm+0x54>
	{
		pwm_init();
     862:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pwm_init>
		pwm_ini=1;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 fa 00 	sts	0x00FA, r24
	}
	if(channel==2)
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	d9 f4       	brne	.+54     	; 0x8a8 <pwm+0x90>
	{
		TCCR1A |= _BV(COM1A1);
     872:	8f e4       	ldi	r24, 0x4F	; 79
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	2f e4       	ldi	r18, 0x4F	; 79
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	f9 01       	movw	r30, r18
     87c:	20 81       	ld	r18, Z
     87e:	20 68       	ori	r18, 0x80	; 128
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
		DDRD |= _BV(PD5);
     884:	81 e3       	ldi	r24, 0x31	; 49
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	21 e3       	ldi	r18, 0x31	; 49
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	f9 01       	movw	r30, r18
     88e:	20 81       	ld	r18, Z
     890:	20 62       	ori	r18, 0x20	; 32
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
		OCR1AL = duty;
     896:	8a e4       	ldi	r24, 0x4A	; 74
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	2a 81       	ldd	r18, Y+2	; 0x02
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
		_duty1 = duty;
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	80 93 f8 00 	sts	0x00F8, r24
     8a6:	1d c0       	rjmp	.+58     	; 0x8e2 <pwm+0xca>
	}
	else if(channel==1)
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	d1 f4       	brne	.+52     	; 0x8e2 <pwm+0xca>
	{
		TCCR1A |= _BV(COM1B1);
     8ae:	8f e4       	ldi	r24, 0x4F	; 79
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	2f e4       	ldi	r18, 0x4F	; 79
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	f9 01       	movw	r30, r18
     8b8:	20 81       	ld	r18, Z
     8ba:	20 62       	ori	r18, 0x20	; 32
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
		DDRD |= _BV(PD4);
     8c0:	81 e3       	ldi	r24, 0x31	; 49
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	21 e3       	ldi	r18, 0x31	; 49
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	f9 01       	movw	r30, r18
     8ca:	20 81       	ld	r18, Z
     8cc:	20 61       	ori	r18, 0x10	; 16
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
		OCR1BL = duty;
     8d2:	88 e4       	ldi	r24, 0x48	; 72
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	2a 81       	ldd	r18, Y+2	; 0x02
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
		_duty2 = duty;
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	80 93 f9 00 	sts	0x00F9, r24
	}
}
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	08 95       	ret

000008ee <motor>:
void motor(char _channel,int _power)
{
     8ee:	df 93       	push	r29
     8f0:	cf 93       	push	r28
     8f2:	00 d0       	rcall	.+0      	; 0x8f4 <motor+0x6>
     8f4:	0f 92       	push	r0
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	89 83       	std	Y+1, r24	; 0x01
     8fc:	7b 83       	std	Y+3, r23	; 0x03
     8fe:	6a 83       	std	Y+2, r22	; 0x02
	if(_power>0)
     900:	8a 81       	ldd	r24, Y+2	; 0x02
     902:	9b 81       	ldd	r25, Y+3	; 0x03
     904:	18 16       	cp	r1, r24
     906:	19 06       	cpc	r1, r25
     908:	f4 f4       	brge	.+60     	; 0x946 <motor+0x58>
	{
		pwm(_channel,_power);
     90a:	2a 81       	ldd	r18, Y+2	; 0x02
     90c:	3b 81       	ldd	r19, Y+3	; 0x03
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	b9 01       	movw	r22, r18
     912:	0e 94 0c 04 	call	0x818	; 0x818 <pwm>
		if(_channel==2)
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	82 30       	cpi	r24, 0x02	; 2
     91a:	49 f4       	brne	.+18     	; 0x92e <motor+0x40>
		{
			out_d(7,1);		
     91c:	87 e0       	ldi	r24, 0x07	; 7
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
			out_d(6,0);
     924:	86 e0       	ldi	r24, 0x06	; 6
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
     92c:	2f c0       	rjmp	.+94     	; 0x98c <motor+0x9e>
		}
		else if(_channel==1)
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	61 f5       	brne	.+88     	; 0x98c <motor+0x9e>
		{
			out_d(2,1);		
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
			out_d(3,0);
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
     944:	23 c0       	rjmp	.+70     	; 0x98c <motor+0x9e>
		}
	}
	else
	{
		
		pwm(_channel,abs(_power));
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	9b 81       	ldd	r25, Y+3	; 0x03
     94a:	99 23       	and	r25, r25
     94c:	1c f4       	brge	.+6      	; 0x954 <motor+0x66>
     94e:	90 95       	com	r25
     950:	81 95       	neg	r24
     952:	9f 4f       	sbci	r25, 0xFF	; 255
     954:	9c 01       	movw	r18, r24
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	b9 01       	movw	r22, r18
     95a:	0e 94 0c 04 	call	0x818	; 0x818 <pwm>
		if(_channel==2)
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	49 f4       	brne	.+18     	; 0x976 <motor+0x88>
		{
			out_d(7,0);
     964:	87 e0       	ldi	r24, 0x07	; 7
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
			out_d(6,1);
     96c:	86 e0       	ldi	r24, 0x06	; 6
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
     974:	0b c0       	rjmp	.+22     	; 0x98c <motor+0x9e>
		}
		else if(_channel==1)
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	41 f4       	brne	.+16     	; 0x98c <motor+0x9e>
		{
			out_d(2,0);
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
			out_d(3,1);
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
		}	
	
	}
}
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	08 95       	ret

00000998 <motor_stop>:
void motor_stop(char _channel)
{
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	0f 92       	push	r0
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	89 83       	std	Y+1, r24	; 0x01
	pwm(_channel,0);
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	0e 94 0c 04 	call	0x818	; 0x818 <pwm>
	if(_channel==2 ||_channel==3)
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	19 f0       	breq	.+6      	; 0x9ba <motor_stop+0x22>
     9b4:	89 81       	ldd	r24, Y+1	; 0x01
     9b6:	83 30       	cpi	r24, 0x03	; 3
     9b8:	41 f4       	brne	.+16     	; 0x9ca <motor_stop+0x32>
	{
		out_d(7,0);		
     9ba:	87 e0       	ldi	r24, 0x07	; 7
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
		out_d(6,0);
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
	}
	if(_channel==1||_channel==3)
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	19 f0       	breq	.+6      	; 0x9d6 <motor_stop+0x3e>
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	83 30       	cpi	r24, 0x03	; 3
     9d4:	41 f4       	brne	.+16     	; 0x9e6 <motor_stop+0x4e>
	{
		out_d(2,0);		
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
		out_d(3,0);
     9de:	83 e0       	ldi	r24, 0x03	; 3
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
	}

	
}
     9e6:	0f 90       	pop	r0
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <sleep>:
#ifndef _SLEEP_H_
#define _SLEEP_H_

void sleep(unsigned int ms)
{
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <sleep+0x6>
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <sleep+0x8>
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <sleep+0xa>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	9e 83       	std	Y+6, r25	; 0x06
     9fe:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i,j;
	for(i=0;i<ms;i++)
     a00:	1a 82       	std	Y+2, r1	; 0x02
     a02:	19 82       	std	Y+1, r1	; 0x01
     a04:	13 c0       	rjmp	.+38     	; 0xa2c <sleep+0x3e>
		for(j=0;j<795;j++);
     a06:	1c 82       	std	Y+4, r1	; 0x04
     a08:	1b 82       	std	Y+3, r1	; 0x03
     a0a:	05 c0       	rjmp	.+10     	; 0xa16 <sleep+0x28>
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	9c 83       	std	Y+4, r25	; 0x04
     a14:	8b 83       	std	Y+3, r24	; 0x03
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	23 e0       	ldi	r18, 0x03	; 3
     a1c:	8b 31       	cpi	r24, 0x1B	; 27
     a1e:	92 07       	cpc	r25, r18
     a20:	a8 f3       	brcs	.-22     	; 0xa0c <sleep+0x1e>
#define _SLEEP_H_

void sleep(unsigned int ms)
{
	unsigned int i,j;
	for(i=0;i<ms;i++)
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9a 81       	ldd	r25, Y+2	; 0x02
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	29 81       	ldd	r18, Y+1	; 0x01
     a2e:	3a 81       	ldd	r19, Y+2	; 0x02
     a30:	8d 81       	ldd	r24, Y+5	; 0x05
     a32:	9e 81       	ldd	r25, Y+6	; 0x06
     a34:	28 17       	cp	r18, r24
     a36:	39 07       	cpc	r19, r25
     a38:	30 f3       	brcs	.-52     	; 0xa06 <sleep+0x18>
		for(j=0;j<795;j++);
}
     a3a:	26 96       	adiw	r28, 0x06	; 6
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	cf 91       	pop	r28
     a48:	df 91       	pop	r29
     a4a:	08 95       	ret

00000a4c <analog>:

#include <avr/io.h>
#define knob() analog(7)
#define KNOB knob
unsigned int analog(unsigned char channel)
{
     a4c:	df 93       	push	r29
     a4e:	cf 93       	push	r28
     a50:	00 d0       	rcall	.+0      	; 0xa52 <analog+0x6>
     a52:	0f 92       	push	r0
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int adc_val;
	ADMUX = 0x40; 
     a5a:	87 e2       	ldi	r24, 0x27	; 39
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	20 e4       	ldi	r18, 0x40	; 64
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
	ADMUX |= channel;	// Sigle end mode
     a64:	87 e2       	ldi	r24, 0x27	; 39
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	27 e2       	ldi	r18, 0x27	; 39
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	f9 01       	movw	r30, r18
     a6e:	30 81       	ld	r19, Z
     a70:	2b 81       	ldd	r18, Y+3	; 0x03
     a72:	23 2b       	or	r18, r19
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
	ADCSRA = 0xC6;
     a78:	86 e2       	ldi	r24, 0x26	; 38
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	26 ec       	ldi	r18, 0xC6	; 198
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
	while((ADCSRA & (1<<ADSC)));
     a82:	00 00       	nop
     a84:	86 e2       	ldi	r24, 0x26	; 38
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	fc 01       	movw	r30, r24
     a8a:	80 81       	ld	r24, Z
     a8c:	88 2f       	mov	r24, r24
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	80 74       	andi	r24, 0x40	; 64
     a92:	90 70       	andi	r25, 0x00	; 0
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	b1 f7       	brne	.-20     	; 0xa84 <analog+0x38>
	adc_val = ADCL; 
     a98:	84 e2       	ldi	r24, 0x24	; 36
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 81       	ld	r24, Z
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9a 83       	std	Y+2, r25	; 0x02
     aa6:	89 83       	std	Y+1, r24	; 0x01
	adc_val += (ADCH*256);
     aa8:	85 e2       	ldi	r24, 0x25	; 37
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	fc 01       	movw	r30, r24
     aae:	80 81       	ld	r24, Z
     ab0:	88 2f       	mov	r24, r24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	98 2f       	mov	r25, r24
     ab6:	88 27       	eor	r24, r24
     ab8:	29 81       	ldd	r18, Y+1	; 0x01
     aba:	3a 81       	ldd	r19, Y+2	; 0x02
     abc:	82 0f       	add	r24, r18
     abe:	93 1f       	adc	r25, r19
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	89 83       	std	Y+1, r24	; 0x01
	return(adc_val);
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	cf 91       	pop	r28
     ad0:	df 91       	pop	r29
     ad2:	08 95       	ret

00000ad4 <lcd_clk>:
//------------------------------------------------------------------------------------//
void lcd_init(void);
char lcd_ini=0,_lcd_clear_display=0;

void lcd_clk(void)				/* Pulse LCD clock on EN*/
{
     ad4:	df 93       	push	r29
     ad6:	cf 93       	push	r28
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
  EN(1);
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
  sleep(1);
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
  EN(0);
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
  sleep(1);
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
     afc:	cf 91       	pop	r28
     afe:	df 91       	pop	r29
     b00:	08 95       	ret

00000b02 <lcd_command>:

void lcd_command(unsigned char outbyte)	/* Send command (4bit operation) */
{
     b02:	df 93       	push	r29
     b04:	cf 93       	push	r28
     b06:	0f 92       	push	r0
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	89 83       	std	Y+1, r24	; 0x01
  if(lcd_ini==0)
     b0e:	80 91 fb 00 	lds	r24, 0x00FB
     b12:	88 23       	and	r24, r24
     b14:	29 f4       	brne	.+10     	; 0xb20 <lcd_command+0x1e>
  {
  	lcd_ini=1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 fb 00 	sts	0x00FB, r24
	lcd_init();
     b1c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <lcd_init>
  }
  RS(0);		// Command
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
  PORTC=(PORTC&0x0f)|(outbyte&0xf0);
     b28:	85 e3       	ldi	r24, 0x35	; 53
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	25 e3       	ldi	r18, 0x35	; 53
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	f9 01       	movw	r30, r18
     b32:	20 81       	ld	r18, Z
     b34:	32 2f       	mov	r19, r18
     b36:	3f 70       	andi	r19, 0x0F	; 15
     b38:	29 81       	ldd	r18, Y+1	; 0x01
     b3a:	20 7f       	andi	r18, 0xF0	; 240
     b3c:	23 2b       	or	r18, r19
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
  lcd_clk();
     b42:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
  PORTC=(PORTC&0x0f)|((outbyte<<4)&0xf0);
     b46:	85 e3       	ldi	r24, 0x35	; 53
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	25 e3       	ldi	r18, 0x35	; 53
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	42 2f       	mov	r20, r18
     b54:	4f 70       	andi	r20, 0x0F	; 15
     b56:	29 81       	ldd	r18, Y+1	; 0x01
     b58:	22 2f       	mov	r18, r18
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	22 95       	swap	r18
     b5e:	32 95       	swap	r19
     b60:	30 7f       	andi	r19, 0xF0	; 240
     b62:	32 27       	eor	r19, r18
     b64:	20 7f       	andi	r18, 0xF0	; 240
     b66:	32 27       	eor	r19, r18
     b68:	24 2b       	or	r18, r20
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
  lcd_clk();
     b6e:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
}
     b72:	0f 90       	pop	r0
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <lcd_text>:

void lcd_text(unsigned char outbyte) /* Send Data (4bit operation) */
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	0f 92       	push	r0
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	89 83       	std	Y+1, r24	; 0x01
  if(lcd_ini==0)
     b86:	80 91 fb 00 	lds	r24, 0x00FB
     b8a:	88 23       	and	r24, r24
     b8c:	29 f4       	brne	.+10     	; 0xb98 <lcd_text+0x1e>
  {
  	lcd_ini=1;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 fb 00 	sts	0x00FB, r24
	lcd_init();
     b94:	0e 94 4d 06 	call	0xc9a	; 0xc9a <lcd_init>
  }
  RS(1);		// Display
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
  PORTC=(PORTC&0x0f)|(outbyte&0xf0);
     ba0:	85 e3       	ldi	r24, 0x35	; 53
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	25 e3       	ldi	r18, 0x35	; 53
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	f9 01       	movw	r30, r18
     baa:	20 81       	ld	r18, Z
     bac:	32 2f       	mov	r19, r18
     bae:	3f 70       	andi	r19, 0x0F	; 15
     bb0:	29 81       	ldd	r18, Y+1	; 0x01
     bb2:	20 7f       	andi	r18, 0xF0	; 240
     bb4:	23 2b       	or	r18, r19
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
  lcd_clk();
     bba:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
  PORTC=(PORTC&0x0f)|((outbyte<<4)&0xf0);
     bbe:	85 e3       	ldi	r24, 0x35	; 53
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	25 e3       	ldi	r18, 0x35	; 53
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	f9 01       	movw	r30, r18
     bc8:	20 81       	ld	r18, Z
     bca:	42 2f       	mov	r20, r18
     bcc:	4f 70       	andi	r20, 0x0F	; 15
     bce:	29 81       	ldd	r18, Y+1	; 0x01
     bd0:	22 2f       	mov	r18, r18
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	22 95       	swap	r18
     bd6:	32 95       	swap	r19
     bd8:	30 7f       	andi	r19, 0xF0	; 240
     bda:	32 27       	eor	r19, r18
     bdc:	20 7f       	andi	r18, 0xF0	; 240
     bde:	32 27       	eor	r19, r18
     be0:	24 2b       	or	r18, r20
     be2:	fc 01       	movw	r30, r24
     be4:	20 83       	st	Z, r18
  lcd_clk();
     be6:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
}
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <lcd_puts>:
//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------------------ Function show string message ----------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd_puts(unsigned char line,char *p)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <lcd_puts+0x6>
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	7b 83       	std	Y+3, r23	; 0x03
     c02:	6a 83       	std	Y+2, r22	; 0x02
	lcd_origin();         // Set origin address of LCD
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
	lcd_command(line);			// Set address 00H of LCD
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
	while(*p)                  // Check data pointer = 0?
     c10:	0b c0       	rjmp	.+22     	; 0xc28 <lcd_puts+0x36>
	{
	 lcd_text(*p);             // Send data to LCD
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	9b 81       	ldd	r25, Y+3	; 0x03
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
     c1a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 p++;                      // Increase address 1 time 
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	9b 83       	std	Y+3, r25	; 0x03
     c26:	8a 83       	std	Y+2, r24	; 0x02
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd_puts(unsigned char line,char *p)
{
	lcd_origin();         // Set origin address of LCD
	lcd_command(line);			// Set address 00H of LCD
	while(*p)                  // Check data pointer = 0?
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	9b 81       	ldd	r25, Y+3	; 0x03
     c2c:	fc 01       	movw	r30, r24
     c2e:	80 81       	ld	r24, Z
     c30:	88 23       	and	r24, r24
     c32:	79 f7       	brne	.-34     	; 0xc12 <lcd_puts+0x20>
	{
	 lcd_text(*p);             // Send data to LCD
	 p++;                      // Increase address 1 time 
	}
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <inttolcd>:

//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------- Convert integer to ascii for display on LCD ---------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void inttolcd(unsigned char posi, long value)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	65 97       	sbiw	r28, 0x15	; 21
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	89 8b       	std	Y+17, r24	; 0x11
     c56:	4a 8b       	std	Y+18, r20	; 0x12
     c58:	5b 8b       	std	Y+19, r21	; 0x13
     c5a:	6c 8b       	std	Y+20, r22	; 0x14
     c5c:	7d 8b       	std	Y+21, r23	; 0x15
	char buff[16];			// For keep string send to LCD 
	ltoa(value,&buff[0],10);
     c5e:	8a 89       	ldd	r24, Y+18	; 0x12
     c60:	9b 89       	ldd	r25, Y+19	; 0x13
     c62:	ac 89       	ldd	r26, Y+20	; 0x14
     c64:	bd 89       	ldd	r27, Y+21	; 0x15
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	9e 01       	movw	r18, r28
     c6c:	2f 5f       	subi	r18, 0xFF	; 255
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
     c70:	a9 01       	movw	r20, r18
     c72:	2a e0       	ldi	r18, 0x0A	; 10
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	0e 94 61 12 	call	0x24c2	; 0x24c2 <ltoa>
	lcd_puts(posi,buff);  	// Send integer to LCD
     c7a:	89 89       	ldd	r24, Y+17	; 0x11
     c7c:	9e 01       	movw	r18, r28
     c7e:	2f 5f       	subi	r18, 0xFF	; 255
     c80:	3f 4f       	sbci	r19, 0xFF	; 255
     c82:	b9 01       	movw	r22, r18
     c84:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <lcd_puts>
}
     c88:	65 96       	adiw	r28, 0x15	; 21
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <lcd_init>:


void lcd_init(void)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
  PORTC = 0x00;
     ca2:	85 e3       	ldi	r24, 0x35	; 53
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	fc 01       	movw	r30, r24
     ca8:	10 82       	st	Z, r1
  DDRC = 0xFC;
     caa:	84 e3       	ldi	r24, 0x34	; 52
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	2c ef       	ldi	r18, 0xFC	; 252
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18
  EN(0);						// Init. EN = 0
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
  RS(0);						// Init. RS = 0
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>

  sleep(500);
     cc4:	84 ef       	ldi	r24, 0xF4	; 244
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
  PORTC=(PORTC&0x0f)|0x30;	// Force LCD receive 1 times command per pulse
     ccc:	85 e3       	ldi	r24, 0x35	; 53
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	25 e3       	ldi	r18, 0x35	; 53
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	f9 01       	movw	r30, r18
     cd6:	20 81       	ld	r18, Z
     cd8:	2f 70       	andi	r18, 0x0F	; 15
     cda:	20 63       	ori	r18, 0x30	; 48
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
  lcd_clk();
     ce0:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
  PORTC=(PORTC&0x0f)|0x30;	// (do 3 times for ensure LCD operation forced)
     ce4:	85 e3       	ldi	r24, 0x35	; 53
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	25 e3       	ldi	r18, 0x35	; 53
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	f9 01       	movw	r30, r18
     cee:	20 81       	ld	r18, Z
     cf0:	2f 70       	andi	r18, 0x0F	; 15
     cf2:	20 63       	ori	r18, 0x30	; 48
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
  lcd_clk();
     cf8:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>
  PORTC=(PORTC&0x0f)|0x30;
     cfc:	85 e3       	ldi	r24, 0x35	; 53
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	25 e3       	ldi	r18, 0x35	; 53
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	2f 70       	andi	r18, 0x0F	; 15
     d0a:	20 63       	ori	r18, 0x30	; 48
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 83       	st	Z, r18
  lcd_clk();
     d10:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>

  PORTC=(PORTC&0x0f)|0x20;	// Switch to real 4 bit transfer mode on first
     d14:	85 e3       	ldi	r24, 0x35	; 53
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	25 e3       	ldi	r18, 0x35	; 53
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	f9 01       	movw	r30, r18
     d1e:	20 81       	ld	r18, Z
     d20:	2f 70       	andi	r18, 0x0F	; 15
     d22:	20 62       	ori	r18, 0x20	; 32
     d24:	fc 01       	movw	r30, r24
     d26:	20 83       	st	Z, r18
  lcd_clk();
     d28:	0e 94 6a 05 	call	0xad4	; 0xad4 <lcd_clk>

  lcd_command(0x28);		// Send real command to 4 bit operation and set N=1, F=0
     d2c:	88 e2       	ldi	r24, 0x28	; 40
     d2e:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
  lcd_command(0x01);		// Clear all
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
  lcd_command(0x06);		// Increase cursor automatic after byte
     d38:	86 e0       	ldi	r24, 0x06	; 6
     d3a:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
  lcd_command(0x0C);		// Display on, no cursor, not blink
     d3e:	8c e0       	ldi	r24, 0x0C	; 12
     d40:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
  lcd_command(0x02);		// Home position
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
  lcd_command(0x01);		// Clear all again
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
}
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <lcd>:
//-----------------------------------------------------------------------------------------------------------------------------//
//------------------------------------ Function LCD display and %d support(Beta version) ----------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------//
void lcd(char *p,...)
{
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	67 97       	sbiw	r28, 0x17	; 23
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
	char *arg,**pp;	// Poter of point
	char *ptr,char_count=0,buff[16];
     d6e:	1d 82       	std	Y+5, r1	; 0x05
	pp = &p;
     d70:	8e e1       	ldi	r24, 0x1E	; 30
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	8c 0f       	add	r24, r28
     d76:	9d 1f       	adc	r25, r29
     d78:	9f 83       	std	Y+7, r25	; 0x07
     d7a:	8e 83       	std	Y+6, r24	; 0x06
	ptr = p;	// Copy address
     d7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d80:	9c 83       	std	Y+4, r25	; 0x04
     d82:	8b 83       	std	Y+3, r24	; 0x03
	arg = pp;	// Copy address of p point	
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	9f 81       	ldd	r25, Y+7	; 0x07
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
	
	lcd_origin();       // Set origin address of LCD
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
	lcd_command(0x80);	// Set address 00H of LCD
     d92:	80 e8       	ldi	r24, 0x80	; 128
     d94:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
	if(_lcd_clear_display)
     d98:	80 91 fc 00 	lds	r24, 0x00FC
     d9c:	88 23       	and	r24, r24
     d9e:	29 f0       	breq	.+10     	; 0xdaa <lcd+0x54>
	{
		_lcd_clear_display = 0;
     da0:	10 92 fc 00 	sts	0x00FC, r1
		lcd_clear();
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
	}
	arg += 2;	// Cross 2 time go to Origin of first parameter 
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	02 96       	adiw	r24, 0x02	; 2
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
	
	while(*ptr)                 // Check data pointer = 0?
     db4:	85 c1       	rjmp	.+778    	; 0x10c0 <lcd+0x36a>
	{
	 	if(TEST_CHAR_TYPE(ptr))
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	fc 01       	movw	r30, r24
     dbc:	80 81       	ld	r24, Z
     dbe:	85 32       	cpi	r24, 0x25	; 37
     dc0:	81 f5       	brne	.+96     	; 0xe22 <lcd+0xcc>
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	fc 01       	movw	r30, r24
     dca:	80 81       	ld	r24, Z
     dcc:	83 36       	cpi	r24, 0x63	; 99
     dce:	39 f0       	breq	.+14     	; 0xdde <lcd+0x88>
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	fc 01       	movw	r30, r24
     dd8:	80 81       	ld	r24, Z
     dda:	83 34       	cpi	r24, 0x43	; 67
     ddc:	11 f5       	brne	.+68     	; 0xe22 <lcd+0xcc>
		{
			char_count++;
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	8d 83       	std	Y+5, r24	; 0x05
			if(char_count==17)
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	81 31       	cpi	r24, 0x11	; 17
     de8:	31 f4       	brne	.+12     	; 0xdf6 <lcd+0xa0>
			{
				lcd_origin();
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
				lcd_command(0xC0);
     df0:	80 ec       	ldi	r24, 0xC0	; 192
     df2:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
			}
			if(char_count>32)
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	81 32       	cpi	r24, 0x21	; 33
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <lcd+0xa8>
			{
				char_count = 0;
     dfc:	1d 82       	std	Y+5, r1	; 0x05
			}
			lcd_text(toascii(*arg));             // Send data to LCD
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	fc 01       	movw	r30, r24
     e04:	80 81       	ld	r24, Z
     e06:	8f 77       	andi	r24, 0x7F	; 127
     e08:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 	
			arg+=2;	// Cross address char type
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	02 96       	adiw	r24, 0x02	; 2
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	9c 83       	std	Y+4, r25	; 0x04
     e1e:	8b 83       	std	Y+3, r24	; 0x03
     e20:	4a c1       	rjmp	.+660    	; 0x10b6 <lcd+0x360>
		}
		else if(TEST_INT_TYPE(ptr))
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	85 32       	cpi	r24, 0x25	; 37
     e2c:	09 f0       	breq	.+2      	; 0xe30 <lcd+0xda>
     e2e:	51 c0       	rjmp	.+162    	; 0xed2 <lcd+0x17c>
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	fc 01       	movw	r30, r24
     e38:	80 81       	ld	r24, Z
     e3a:	84 36       	cpi	r24, 0x64	; 100
     e3c:	41 f0       	breq	.+16     	; 0xe4e <lcd+0xf8>
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	fc 01       	movw	r30, r24
     e46:	80 81       	ld	r24, Z
     e48:	84 34       	cpi	r24, 0x44	; 68
     e4a:	09 f0       	breq	.+2      	; 0xe4e <lcd+0xf8>
     e4c:	42 c0       	rjmp	.+132    	; 0xed2 <lcd+0x17c>
		{
			p = ltoa(*(int *)arg,&buff[0],10);
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	fc 01       	movw	r30, r24
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	aa 27       	eor	r26, r26
     e5a:	97 fd       	sbrc	r25, 7
     e5c:	a0 95       	com	r26
     e5e:	ba 2f       	mov	r27, r26
     e60:	9e 01       	movw	r18, r28
     e62:	28 5f       	subi	r18, 0xF8	; 248
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	a9 01       	movw	r20, r18
     e6c:	2a e0       	ldi	r18, 0x0A	; 10
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	0e 94 61 12 	call	0x24c2	; 0x24c2 <ltoa>
     e74:	9f 8f       	std	Y+31, r25	; 0x1f
     e76:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     e78:	1b c0       	rjmp	.+54     	; 0xeb0 <lcd+0x15a>
			{
	 			char_count++;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	8d 83       	std	Y+5, r24	; 0x05
				if(char_count==17)
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	81 31       	cpi	r24, 0x11	; 17
     e84:	31 f4       	brne	.+12     	; 0xe92 <lcd+0x13c>
				{
					lcd_origin();
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
					lcd_command(0xC0);
     e8c:	80 ec       	ldi	r24, 0xC0	; 192
     e8e:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
				}
				if(char_count>32)
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	81 32       	cpi	r24, 0x21	; 33
     e96:	08 f0       	brcs	.+2      	; 0xe9a <lcd+0x144>
				{
					char_count = 0;
     e98:	1d 82       	std	Y+5, r1	; 0x05
				}
				lcd_text(*p);             // Send data to LCD
     e9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e9c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e9e:	fc 01       	movw	r30, r24
     ea0:	80 81       	ld	r24, Z
     ea2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 			p++;                     // Increase address 1 time 
     ea6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	9f 8f       	std	Y+31, r25	; 0x1f
     eae:	8e 8f       	std	Y+30, r24	; 0x1e
			ptr++;	// Cross %d parameter
		}
		else if(TEST_INT_TYPE(ptr))
		{
			p = ltoa(*(int *)arg,&buff[0],10);
			while(*p)           // Check data pointer = 0?
     eb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     eb4:	fc 01       	movw	r30, r24
     eb6:	80 81       	ld	r24, Z
     eb8:	88 23       	and	r24, r24
     eba:	f9 f6       	brne	.-66     	; 0xe7a <lcd+0x124>
					char_count = 0;
				}
				lcd_text(*p);             // Send data to LCD
	 			p++;                     // Increase address 1 time 
			}
			arg+=2;	// Cross address int type
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	02 96       	adiw	r24, 0x02	; 2
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %d parameter
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	9c 83       	std	Y+4, r25	; 0x04
     ece:	8b 83       	std	Y+3, r24	; 0x03
     ed0:	f2 c0       	rjmp	.+484    	; 0x10b6 <lcd+0x360>
		}
		else if(TEST_LONG_TYPE(ptr))
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	85 32       	cpi	r24, 0x25	; 37
     edc:	09 f0       	breq	.+2      	; 0xee0 <lcd+0x18a>
     ede:	4f c0       	rjmp	.+158    	; 0xf7e <lcd+0x228>
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	fc 01       	movw	r30, r24
     ee8:	80 81       	ld	r24, Z
     eea:	8c 36       	cpi	r24, 0x6C	; 108
     eec:	41 f0       	breq	.+16     	; 0xefe <lcd+0x1a8>
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	fc 01       	movw	r30, r24
     ef6:	80 81       	ld	r24, Z
     ef8:	8c 34       	cpi	r24, 0x4C	; 76
     efa:	09 f0       	breq	.+2      	; 0xefe <lcd+0x1a8>
     efc:	40 c0       	rjmp	.+128    	; 0xf7e <lcd+0x228>
		{
			p = ltoa(*(long *)arg,&buff[0],10);
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	fc 01       	movw	r30, r24
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	a2 81       	ldd	r26, Z+2	; 0x02
     f0a:	b3 81       	ldd	r27, Z+3	; 0x03
     f0c:	9e 01       	movw	r18, r28
     f0e:	28 5f       	subi	r18, 0xF8	; 248
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	a9 01       	movw	r20, r18
     f18:	2a e0       	ldi	r18, 0x0A	; 10
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <ltoa>
     f20:	9f 8f       	std	Y+31, r25	; 0x1f
     f22:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     f24:	1b c0       	rjmp	.+54     	; 0xf5c <lcd+0x206>
			{
	 			char_count++;
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	8d 83       	std	Y+5, r24	; 0x05
				if(char_count==17)
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	81 31       	cpi	r24, 0x11	; 17
     f30:	31 f4       	brne	.+12     	; 0xf3e <lcd+0x1e8>
				{
					lcd_origin();
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
					lcd_command(0xC0);
     f38:	80 ec       	ldi	r24, 0xC0	; 192
     f3a:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
				}
				if(char_count>32)
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	81 32       	cpi	r24, 0x21	; 33
     f42:	08 f0       	brcs	.+2      	; 0xf46 <lcd+0x1f0>
				{
					char_count = 0;
     f44:	1d 82       	std	Y+5, r1	; 0x05
				}
				lcd_text(*p);             // Send data to LCD
     f46:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f48:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f4a:	fc 01       	movw	r30, r24
     f4c:	80 81       	ld	r24, Z
     f4e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 			p++;                     // Increase address 1 time 
     f52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f54:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	9f 8f       	std	Y+31, r25	; 0x1f
     f5a:	8e 8f       	std	Y+30, r24	; 0x1e
			ptr++;	// Cross %d parameter
		}
		else if(TEST_LONG_TYPE(ptr))
		{
			p = ltoa(*(long *)arg,&buff[0],10);
			while(*p)           // Check data pointer = 0?
     f5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f5e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f60:	fc 01       	movw	r30, r24
     f62:	80 81       	ld	r24, Z
     f64:	88 23       	and	r24, r24
     f66:	f9 f6       	brne	.-66     	; 0xf26 <lcd+0x1d0>
					char_count = 0;
				}
				lcd_text(*p);             // Send data to LCD
	 			p++;                     // Increase address 1 time 
			}
			arg+=4;	// Cross address long type
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	04 96       	adiw	r24, 0x04	; 4
     f6e:	9a 83       	std	Y+2, r25	; 0x02
     f70:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	8b 83       	std	Y+3, r24	; 0x03
     f7c:	9c c0       	rjmp	.+312    	; 0x10b6 <lcd+0x360>
		}
		else if(TEST_FLOAT_TYPE(ptr))
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	fc 01       	movw	r30, r24
     f84:	80 81       	ld	r24, Z
     f86:	85 32       	cpi	r24, 0x25	; 37
     f88:	09 f0       	breq	.+2      	; 0xf8c <lcd+0x236>
     f8a:	4e c0       	rjmp	.+156    	; 0x1028 <lcd+0x2d2>
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	fc 01       	movw	r30, r24
     f94:	80 81       	ld	r24, Z
     f96:	86 36       	cpi	r24, 0x66	; 102
     f98:	41 f0       	breq	.+16     	; 0xfaa <lcd+0x254>
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	fc 01       	movw	r30, r24
     fa2:	80 81       	ld	r24, Z
     fa4:	86 34       	cpi	r24, 0x46	; 70
     fa6:	09 f0       	breq	.+2      	; 0xfaa <lcd+0x254>
     fa8:	3f c0       	rjmp	.+126    	; 0x1028 <lcd+0x2d2>
		{
			p = dtostrf(*(float *)arg,2,F_PREC,&buff[0]);	// Convert float to string(used libm.a)
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	a2 81       	ldd	r26, Z+2	; 0x02
     fb6:	b3 81       	ldd	r27, Z+3	; 0x03
     fb8:	fe 01       	movw	r30, r28
     fba:	38 96       	adiw	r30, 0x08	; 8
     fbc:	bc 01       	movw	r22, r24
     fbe:	cd 01       	movw	r24, r26
     fc0:	42 e0       	ldi	r20, 0x02	; 2
     fc2:	23 e0       	ldi	r18, 0x03	; 3
     fc4:	8f 01       	movw	r16, r30
     fc6:	0e 94 3f 12 	call	0x247e	; 0x247e <dtostrf>
     fca:	9f 8f       	std	Y+31, r25	; 0x1f
     fcc:	8e 8f       	std	Y+30, r24	; 0x1e
			while(*p)           // Check data pointer = 0?
     fce:	1b c0       	rjmp	.+54     	; 0x1006 <lcd+0x2b0>
			{
	 			char_count++;
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	8d 83       	std	Y+5, r24	; 0x05
				if(char_count==17)
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	81 31       	cpi	r24, 0x11	; 17
     fda:	31 f4       	brne	.+12     	; 0xfe8 <lcd+0x292>
				{
					lcd_origin();
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
					lcd_command(0xC0);
     fe2:	80 ec       	ldi	r24, 0xC0	; 192
     fe4:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
				}
				if(char_count>32)
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	81 32       	cpi	r24, 0x21	; 33
     fec:	08 f0       	brcs	.+2      	; 0xff0 <lcd+0x29a>
				{
					char_count = 0;
     fee:	1d 82       	std	Y+5, r1	; 0x05
				}
				lcd_text(*p);             // Send data to LCD
     ff0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ff4:	fc 01       	movw	r30, r24
     ff6:	80 81       	ld	r24, Z
     ff8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 			p++;                     // Increase address 1 time 
     ffc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	9f 8f       	std	Y+31, r25	; 0x1f
    1004:	8e 8f       	std	Y+30, r24	; 0x1e
			ptr++;	// Cross %l parameter
		}
		else if(TEST_FLOAT_TYPE(ptr))
		{
			p = dtostrf(*(float *)arg,2,F_PREC,&buff[0]);	// Convert float to string(used libm.a)
			while(*p)           // Check data pointer = 0?
    1006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1008:	9f 8d       	ldd	r25, Y+31	; 0x1f
    100a:	fc 01       	movw	r30, r24
    100c:	80 81       	ld	r24, Z
    100e:	88 23       	and	r24, r24
    1010:	f9 f6       	brne	.-66     	; 0xfd0 <lcd+0x27a>
					char_count = 0;
				}
				lcd_text(*p);             // Send data to LCD
	 			p++;                     // Increase address 1 time 
			}
			arg+=4;	// Cross address long type
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	9a 81       	ldd	r25, Y+2	; 0x02
    1016:	04 96       	adiw	r24, 0x04	; 4
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
			ptr++;	// Cross %l parameter
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	47 c0       	rjmp	.+142    	; 0x10b6 <lcd+0x360>
		}
		else if(TEST_CLEAR_NEXT_TYPE(ptr))
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	fc 01       	movw	r30, r24
    102e:	80 81       	ld	r24, Z
    1030:	83 32       	cpi	r24, 0x23	; 35
    1032:	81 f4       	brne	.+32     	; 0x1054 <lcd+0x2fe>
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	fc 01       	movw	r30, r24
    103c:	80 81       	ld	r24, Z
    103e:	83 36       	cpi	r24, 0x63	; 99
    1040:	49 f4       	brne	.+18     	; 0x1054 <lcd+0x2fe>
		{
			_lcd_clear_display = 1;	// Clear display next time 
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	80 93 fc 00 	sts	0x00FC, r24
			
			ptr++;	// Cross %l parameter
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	31 c0       	rjmp	.+98     	; 0x10b6 <lcd+0x360>
		}
		else if(TEST_NEW_LINE_TYPE(ptr))
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	fc 01       	movw	r30, r24
    105a:	80 81       	ld	r24, Z
    105c:	83 32       	cpi	r24, 0x23	; 35
    105e:	a9 f4       	brne	.+42     	; 0x108a <lcd+0x334>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	fc 01       	movw	r30, r24
    1068:	80 81       	ld	r24, Z
    106a:	8e 36       	cpi	r24, 0x6E	; 110
    106c:	71 f4       	brne	.+28     	; 0x108a <lcd+0x334>
		{
			
			char_count = 17;	// Character start line 2 
    106e:	81 e1       	ldi	r24, 0x11	; 17
    1070:	8d 83       	std	Y+5, r24	; 0x05
			lcd_origin();
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
			lcd_command(0xC0);		
    1078:	80 ec       	ldi	r24, 0xC0	; 192
    107a:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
			ptr++;	// Cross %l parameter
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	9c 83       	std	Y+4, r25	; 0x04
    1086:	8b 83       	std	Y+3, r24	; 0x03
    1088:	16 c0       	rjmp	.+44     	; 0x10b6 <lcd+0x360>
		}
		else
		{
			char_count++;
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	8d 83       	std	Y+5, r24	; 0x05
			if(char_count==17)
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	81 31       	cpi	r24, 0x11	; 17
    1094:	31 f4       	brne	.+12     	; 0x10a2 <lcd+0x34c>
			{
				lcd_origin();
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
				lcd_command(0xC0);
    109c:	80 ec       	ldi	r24, 0xC0	; 192
    109e:	0e 94 81 05 	call	0xb02	; 0xb02 <lcd_command>
			}
			if(char_count>32)
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	81 32       	cpi	r24, 0x21	; 33
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <lcd+0x354>
			{
				char_count = 0;
    10a8:	1d 82       	std	Y+5, r1	; 0x05
			}
			lcd_text(*ptr);             // Send data to LCD
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <lcd_text>
	 	}
		
		ptr++;                      // Increase address 1 time 
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
		_lcd_clear_display = 0;
		lcd_clear();
	}
	arg += 2;	// Cross 2 time go to Origin of first parameter 
	
	while(*ptr)                 // Check data pointer = 0?
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	fc 01       	movw	r30, r24
    10c6:	80 81       	ld	r24, Z
    10c8:	88 23       	and	r24, r24
    10ca:	09 f0       	breq	.+2      	; 0x10ce <lcd+0x378>
    10cc:	74 ce       	rjmp	.-792    	; 0xdb6 <lcd+0x60>
	 	}
		
		ptr++;                      // Increase address 1 time 
	}

}
    10ce:	67 96       	adiw	r28, 0x17	; 23
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	08 95       	ret

000010e4 <__vector_9>:
unsigned char activeServo[5]={0,0,0,0,0,0};
unsigned char timeBaseServo[5]={0,0,0,0,0};
unsigned long timerTick=0;

SIGNAL(SIG_OVERFLOW0) // Interval 50 us
{
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	//TCNT0 = 156;	// Reload Interval 50 us  
	TCNT0 = 206;	// Reload Interval 25 us  
    110a:	82 e5       	ldi	r24, 0x52	; 82
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	2e ec       	ldi	r18, 0xCE	; 206
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
	timerTick++;
    1114:	80 91 08 01 	lds	r24, 0x0108
    1118:	90 91 09 01 	lds	r25, 0x0109
    111c:	a0 91 0a 01 	lds	r26, 0x010A
    1120:	b0 91 0b 01 	lds	r27, 0x010B
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	a1 1d       	adc	r26, r1
    1128:	b1 1d       	adc	r27, r1
    112a:	80 93 08 01 	sts	0x0108, r24
    112e:	90 93 09 01 	sts	0x0109, r25
    1132:	a0 93 0a 01 	sts	0x010A, r26
    1136:	b0 93 0b 01 	sts	0x010B, r27
	if(timerTick>=1000)
    113a:	80 91 08 01 	lds	r24, 0x0108
    113e:	90 91 09 01 	lds	r25, 0x0109
    1142:	a0 91 0a 01 	lds	r26, 0x010A
    1146:	b0 91 0b 01 	lds	r27, 0x010B
    114a:	88 3e       	cpi	r24, 0xE8	; 232
    114c:	f3 e0       	ldi	r31, 0x03	; 3
    114e:	9f 07       	cpc	r25, r31
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	af 07       	cpc	r26, r31
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	bf 07       	cpc	r27, r31
    1158:	40 f0       	brcs	.+16     	; 0x116a <__vector_9+0x86>
	{
		timerTick = 0;
    115a:	10 92 08 01 	sts	0x0108, r1
    115e:	10 92 09 01 	sts	0x0109, r1
    1162:	10 92 0a 01 	sts	0x010A, r1
    1166:	10 92 0b 01 	sts	0x010B, r1
	}
	if(activeServo[0]==1)
    116a:	80 91 fe 00 	lds	r24, 0x00FE
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	31 f5       	brne	.+76     	; 0x11be <__vector_9+0xda>
	{
		if(timerTick<=timeBaseServo[0])
    1172:	80 91 03 01 	lds	r24, 0x0103
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	80 91 08 01 	lds	r24, 0x0108
    1182:	90 91 09 01 	lds	r25, 0x0109
    1186:	a0 91 0a 01 	lds	r26, 0x010A
    118a:	b0 91 0b 01 	lds	r27, 0x010B
    118e:	28 17       	cp	r18, r24
    1190:	39 07       	cpc	r19, r25
    1192:	4a 07       	cpc	r20, r26
    1194:	5b 07       	cpc	r21, r27
    1196:	50 f0       	brcs	.+20     	; 0x11ac <__vector_9+0xc8>
			PORTB |= 0x01;
    1198:	88 e3       	ldi	r24, 0x38	; 56
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	28 e3       	ldi	r18, 0x38	; 56
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	f9 01       	movw	r30, r18
    11a2:	20 81       	ld	r18, Z
    11a4:	21 60       	ori	r18, 0x01	; 1
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
    11aa:	09 c0       	rjmp	.+18     	; 0x11be <__vector_9+0xda>
		else
			PORTB &= 0xFE;
    11ac:	88 e3       	ldi	r24, 0x38	; 56
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	28 e3       	ldi	r18, 0x38	; 56
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	f9 01       	movw	r30, r18
    11b6:	20 81       	ld	r18, Z
    11b8:	2e 7f       	andi	r18, 0xFE	; 254
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
	}
	if(activeServo[1]==1)
    11be:	80 91 ff 00 	lds	r24, 0x00FF
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	31 f5       	brne	.+76     	; 0x1212 <__vector_9+0x12e>
	{
		if(timerTick<=timeBaseServo[1])
    11c6:	80 91 04 01 	lds	r24, 0x0104
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	80 91 08 01 	lds	r24, 0x0108
    11d6:	90 91 09 01 	lds	r25, 0x0109
    11da:	a0 91 0a 01 	lds	r26, 0x010A
    11de:	b0 91 0b 01 	lds	r27, 0x010B
    11e2:	28 17       	cp	r18, r24
    11e4:	39 07       	cpc	r19, r25
    11e6:	4a 07       	cpc	r20, r26
    11e8:	5b 07       	cpc	r21, r27
    11ea:	50 f0       	brcs	.+20     	; 0x1200 <__vector_9+0x11c>
			PORTB |= 0x02;
    11ec:	88 e3       	ldi	r24, 0x38	; 56
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	28 e3       	ldi	r18, 0x38	; 56
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	f9 01       	movw	r30, r18
    11f6:	20 81       	ld	r18, Z
    11f8:	22 60       	ori	r18, 0x02	; 2
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18
    11fe:	09 c0       	rjmp	.+18     	; 0x1212 <__vector_9+0x12e>
		else
			PORTB &= 0xFD;
    1200:	88 e3       	ldi	r24, 0x38	; 56
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	28 e3       	ldi	r18, 0x38	; 56
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	f9 01       	movw	r30, r18
    120a:	20 81       	ld	r18, Z
    120c:	2d 7f       	andi	r18, 0xFD	; 253
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
	}
	if(activeServo[2]==1)
    1212:	80 91 00 01 	lds	r24, 0x0100
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	31 f5       	brne	.+76     	; 0x1266 <__vector_9+0x182>
	{
		if(timerTick<=timeBaseServo[2])
    121a:	80 91 05 01 	lds	r24, 0x0105
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	80 91 08 01 	lds	r24, 0x0108
    122a:	90 91 09 01 	lds	r25, 0x0109
    122e:	a0 91 0a 01 	lds	r26, 0x010A
    1232:	b0 91 0b 01 	lds	r27, 0x010B
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	4a 07       	cpc	r20, r26
    123c:	5b 07       	cpc	r21, r27
    123e:	50 f0       	brcs	.+20     	; 0x1254 <__vector_9+0x170>
			PORTB |= 0x04;
    1240:	88 e3       	ldi	r24, 0x38	; 56
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	28 e3       	ldi	r18, 0x38	; 56
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	f9 01       	movw	r30, r18
    124a:	20 81       	ld	r18, Z
    124c:	24 60       	ori	r18, 0x04	; 4
    124e:	fc 01       	movw	r30, r24
    1250:	20 83       	st	Z, r18
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <__vector_9+0x182>
		else
			PORTB &= 0xFB;
    1254:	88 e3       	ldi	r24, 0x38	; 56
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	28 e3       	ldi	r18, 0x38	; 56
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	f9 01       	movw	r30, r18
    125e:	20 81       	ld	r18, Z
    1260:	2b 7f       	andi	r18, 0xFB	; 251
    1262:	fc 01       	movw	r30, r24
    1264:	20 83       	st	Z, r18
	}
	if(activeServo[3]==1)
    1266:	80 91 01 01 	lds	r24, 0x0101
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	31 f5       	brne	.+76     	; 0x12ba <__vector_9+0x1d6>
	{
		if(timerTick<=timeBaseServo[3])
    126e:	80 91 06 01 	lds	r24, 0x0106
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	80 91 08 01 	lds	r24, 0x0108
    127e:	90 91 09 01 	lds	r25, 0x0109
    1282:	a0 91 0a 01 	lds	r26, 0x010A
    1286:	b0 91 0b 01 	lds	r27, 0x010B
    128a:	28 17       	cp	r18, r24
    128c:	39 07       	cpc	r19, r25
    128e:	4a 07       	cpc	r20, r26
    1290:	5b 07       	cpc	r21, r27
    1292:	50 f0       	brcs	.+20     	; 0x12a8 <__vector_9+0x1c4>
			PORTB |= 0x08;
    1294:	88 e3       	ldi	r24, 0x38	; 56
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	28 e3       	ldi	r18, 0x38	; 56
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	f9 01       	movw	r30, r18
    129e:	20 81       	ld	r18, Z
    12a0:	28 60       	ori	r18, 0x08	; 8
    12a2:	fc 01       	movw	r30, r24
    12a4:	20 83       	st	Z, r18
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <__vector_9+0x1d6>
		else
			PORTB &= 0xF7;
    12a8:	88 e3       	ldi	r24, 0x38	; 56
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	28 e3       	ldi	r18, 0x38	; 56
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	f9 01       	movw	r30, r18
    12b2:	20 81       	ld	r18, Z
    12b4:	27 7f       	andi	r18, 0xF7	; 247
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
	}
	if(activeServo[4]==1)
    12ba:	80 91 02 01 	lds	r24, 0x0102
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	31 f5       	brne	.+76     	; 0x130e <__vector_9+0x22a>
	{
		if(timerTick<=timeBaseServo[4])
    12c2:	80 91 07 01 	lds	r24, 0x0107
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	80 91 08 01 	lds	r24, 0x0108
    12d2:	90 91 09 01 	lds	r25, 0x0109
    12d6:	a0 91 0a 01 	lds	r26, 0x010A
    12da:	b0 91 0b 01 	lds	r27, 0x010B
    12de:	28 17       	cp	r18, r24
    12e0:	39 07       	cpc	r19, r25
    12e2:	4a 07       	cpc	r20, r26
    12e4:	5b 07       	cpc	r21, r27
    12e6:	50 f0       	brcs	.+20     	; 0x12fc <__vector_9+0x218>
			PORTB |= 0x10;
    12e8:	88 e3       	ldi	r24, 0x38	; 56
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	28 e3       	ldi	r18, 0x38	; 56
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	f9 01       	movw	r30, r18
    12f2:	20 81       	ld	r18, Z
    12f4:	20 61       	ori	r18, 0x10	; 16
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <__vector_9+0x22a>
		else
			PORTB &= 0xEF;
    12fc:	88 e3       	ldi	r24, 0x38	; 56
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	28 e3       	ldi	r18, 0x38	; 56
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	f9 01       	movw	r30, r18
    1306:	20 81       	ld	r18, Z
    1308:	2f 7e       	andi	r18, 0xEF	; 239
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
	}
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	bf 91       	pop	r27
    1318:	af 91       	pop	r26
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	5f 91       	pop	r21
    1320:	4f 91       	pop	r20
    1322:	3f 91       	pop	r19
    1324:	2f 91       	pop	r18
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <servo_start>:
void servo_start(void) // Config. and Start up timer 0 
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
   
	TCCR0 = (1<<CS01); 	// Prescaler 8,16 MHz,1 MC = 8/16M = 0.5 us/count 
    1338:	83 e5       	ldi	r24, 0x53	; 83
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	22 e0       	ldi	r18, 0x02	; 2
    133e:	fc 01       	movw	r30, r24
    1340:	20 83       	st	Z, r18
	TIFR |= 1<<TOV0; 	//Clear TOV0 / clear
    1342:	88 e5       	ldi	r24, 0x58	; 88
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	28 e5       	ldi	r18, 0x58	; 88
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	f9 01       	movw	r30, r18
    134c:	20 81       	ld	r18, Z
    134e:	21 60       	ori	r18, 0x01	; 1
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
	TIMSK |= 1<<TOIE0; 	//Enable Timer0 Overflow Interrupt
    1354:	89 e5       	ldi	r24, 0x59	; 89
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	29 e5       	ldi	r18, 0x59	; 89
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	f9 01       	movw	r30, r18
    135e:	20 81       	ld	r18, Z
    1360:	21 60       	ori	r18, 0x01	; 1
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
	//TCNT0 = 156;	// Interval 50 us  	
    TCNT0 = 206;	// Interval 50 us  	
    1366:	82 e5       	ldi	r24, 0x52	; 82
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	2e ec       	ldi	r18, 0xCE	; 206
    136c:	fc 01       	movw	r30, r24
    136e:	20 83       	st	Z, r18
    
	sei();	// Enable all interrupt
    1370:	78 94       	sei
	timerTick = 0;
    1372:	10 92 08 01 	sts	0x0108, r1
    1376:	10 92 09 01 	sts	0x0109, r1
    137a:	10 92 0a 01 	sts	0x010A, r1
    137e:	10 92 0b 01 	sts	0x010B, r1
	servo_ini = 1;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	80 93 fd 00 	sts	0x00FD, r24
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <servo_stop>:
void servo_stop()
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;		// Stop timer and 
    1396:	83 e5       	ldi	r24, 0x53	; 83
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	fc 01       	movw	r30, r24
    139c:	10 82       	st	Z, r1
	TCNT0 = 0;
    139e:	82 e5       	ldi	r24, 0x52	; 82
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	fc 01       	movw	r30, r24
    13a4:	10 82       	st	Z, r1
	TIMSK &= ~_BV(TOIE0);	
    13a6:	89 e5       	ldi	r24, 0x59	; 89
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	29 e5       	ldi	r18, 0x59	; 89
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	f9 01       	movw	r30, r18
    13b0:	20 81       	ld	r18, Z
    13b2:	2e 7f       	andi	r18, 0xFE	; 254
    13b4:	fc 01       	movw	r30, r24
    13b6:	20 83       	st	Z, r18
	timerTick = 0;
    13b8:	10 92 08 01 	sts	0x0108, r1
    13bc:	10 92 09 01 	sts	0x0109, r1
    13c0:	10 92 0a 01 	sts	0x010A, r1
    13c4:	10 92 0b 01 	sts	0x010B, r1
	servo_ini = 0;
    13c8:	10 92 fd 00 	sts	0x00FD, r1
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <servo>:
void servo(unsigned char _ch,unsigned int _pos)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <servo+0x6>
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	7b 83       	std	Y+3, r23	; 0x03
    13e2:	6a 83       	std	Y+2, r22	; 0x02
	if(servo_ini==0)
    13e4:	80 91 fd 00 	lds	r24, 0x00FD
    13e8:	88 23       	and	r24, r24
    13ea:	29 f4       	brne	.+10     	; 0x13f6 <servo+0x24>
	{
		servo_start();
    13ec:	0e 94 98 09 	call	0x1330	; 0x1330 <servo_start>
		servo_ini=1;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	80 93 fd 00 	sts	0x00FD, r24
	}
	if(_ch>=0 && _ch<=4)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	85 30       	cpi	r24, 0x05	; 5
    13fa:	28 f5       	brcc	.+74     	; 0x1446 <servo+0x74>
	{
		DDRB |= 1<<(_ch);
    13fc:	87 e3       	ldi	r24, 0x37	; 55
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	27 e3       	ldi	r18, 0x37	; 55
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	f9 01       	movw	r30, r18
    1406:	20 81       	ld	r18, Z
    1408:	62 2f       	mov	r22, r18
    140a:	29 81       	ldd	r18, Y+1	; 0x01
    140c:	42 2f       	mov	r20, r18
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	21 e0       	ldi	r18, 0x01	; 1
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	04 2e       	mov	r0, r20
    1416:	02 c0       	rjmp	.+4      	; 0x141c <servo+0x4a>
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <servo+0x46>
    1420:	26 2b       	or	r18, r22
    1422:	fc 01       	movw	r30, r24
    1424:	20 83       	st	Z, r18
		timeBaseServo[_ch] = _pos;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	2a 81       	ldd	r18, Y+2	; 0x02
    142e:	8d 5f       	subi	r24, 0xFD	; 253
    1430:	9e 4f       	sbci	r25, 0xFE	; 254
    1432:	fc 01       	movw	r30, r24
    1434:	20 83       	st	Z, r18
		activeServo[_ch]=1;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	82 50       	subi	r24, 0x02	; 2
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	21 e0       	ldi	r18, 0x01	; 1
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18
	}
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <servo_pause>:
void servo_pause(char _ch)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	0f 92       	push	r0
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	89 83       	std	Y+1, r24	; 0x01
	if(_ch>=0 && _ch<=4)
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	85 30       	cpi	r24, 0x05	; 5
    1462:	38 f4       	brcc	.+14     	; 0x1472 <servo_pause+0x20>
	{
		activeServo[_ch]=0;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	82 50       	subi	r24, 0x02	; 2
    146c:	9f 4f       	sbci	r25, 0xFF	; 255
    146e:	fc 01       	movw	r30, r24
    1470:	10 82       	st	Z, r1
	}
}
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <servo_resume>:
void servo_resume(char _ch)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
	if(_ch>=0 && _ch<=4)
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	85 30       	cpi	r24, 0x05	; 5
    148a:	40 f4       	brcc	.+16     	; 0x149c <servo_resume+0x22>
	{
		activeServo[_ch]=1;
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	82 50       	subi	r24, 0x02	; 2
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	fc 01       	movw	r30, r24
    149a:	20 83       	st	Z, r18
	}
}
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <servo_get_status>:
unsigned char servo_get_status(char _ch)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
	return(activeServo[_ch]);
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	82 50       	subi	r24, 0x02	; 2
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	fc 01       	movw	r30, r24
    14bc:	80 81       	ld	r24, Z
}
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <delay_sound>:
#include <in_out.h>
//------------------------------------------------------------------------------------------------//
//---------------------------- Function delay 100 us per count -----------------------------------//
//------------------------------------------------------------------------------------------------//
void delay_sound(unsigned int ms)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <delay_sound+0x6>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <delay_sound+0x8>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <delay_sound+0xa>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	9e 83       	std	Y+6, r25	; 0x06
    14d6:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int i,j;
	for(i=0;i<ms;i++)
    14d8:	1a 82       	std	Y+2, r1	; 0x02
    14da:	19 82       	std	Y+1, r1	; 0x01
    14dc:	12 c0       	rjmp	.+36     	; 0x1502 <delay_sound+0x3c>
		for(j=0;j<80;j++);
    14de:	1c 82       	std	Y+4, r1	; 0x04
    14e0:	1b 82       	std	Y+3, r1	; 0x03
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <delay_sound+0x28>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	80 35       	cpi	r24, 0x50	; 80
    14f4:	91 05       	cpc	r25, r1
    14f6:	b0 f3       	brcs	.-20     	; 0x14e4 <delay_sound+0x1e>
//---------------------------- Function delay 100 us per count -----------------------------------//
//------------------------------------------------------------------------------------------------//
void delay_sound(unsigned int ms)
{
	unsigned int i,j;
	for(i=0;i<ms;i++)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	29 81       	ldd	r18, Y+1	; 0x01
    1504:	3a 81       	ldd	r19, Y+2	; 0x02
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	28 17       	cp	r18, r24
    150c:	39 07       	cpc	r19, r25
    150e:	38 f3       	brcs	.-50     	; 0x14de <delay_sound+0x18>
		for(j=0;j<80;j++);
}
    1510:	26 96       	adiw	r28, 0x06	; 6
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <sound_a>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_a(char ch,int freq,int time)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	29 97       	sbiw	r28, 0x09	; 9
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	7f 83       	std	Y+7, r23	; 0x07
    153a:	6e 83       	std	Y+6, r22	; 0x06
    153c:	59 87       	std	Y+9, r21	; 0x09
    153e:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,sm=0;	// Keep value and 
    1540:	1c 82       	std	Y+4, r1	; 0x04
    1542:	1b 82       	std	Y+3, r1	; 0x03
    1544:	1a 82       	std	Y+2, r1	; 0x02
    1546:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
    1548:	88 e8       	ldi	r24, 0x88	; 136
    154a:	93 e1       	ldi	r25, 0x13	; 19
    154c:	2e 81       	ldd	r18, Y+6	; 0x06
    154e:	3f 81       	ldd	r19, Y+7	; 0x07
    1550:	b9 01       	movw	r22, r18
    1552:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    1556:	9b 01       	movw	r18, r22
    1558:	3c 83       	std	Y+4, r19	; 0x04
    155a:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
    155c:	88 85       	ldd	r24, Y+8	; 0x08
    155e:	99 85       	ldd	r25, Y+9	; 0x09
    1560:	9c 01       	movw	r18, r24
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	22 0f       	add	r18, r18
    1568:	33 1f       	adc	r19, r19
    156a:	82 0f       	add	r24, r18
    156c:	93 1f       	adc	r25, r19
    156e:	2b 81       	ldd	r18, Y+3	; 0x03
    1570:	3c 81       	ldd	r19, Y+4	; 0x04
    1572:	b9 01       	movw	r22, r18
    1574:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    1578:	9b 01       	movw	r18, r22
    157a:	39 87       	std	Y+9, r19	; 0x09
    157c:	28 87       	std	Y+8, r18	; 0x08
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    157e:	1a 82       	std	Y+2, r1	; 0x02
    1580:	19 82       	std	Y+1, r1	; 0x01
    1582:	15 c0       	rjmp	.+42     	; 0x15ae <sound_a+0x8c>
	{
        out_a(ch,1);
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	0e 94 7e 02 	call	0x4fc	; 0x4fc <out_a>
		delay_sound(dt);	// Delay for sound	
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
        out_a(ch,0);
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	0e 94 7e 02 	call	0x4fc	; 0x4fc <out_a>
		delay_sound(dt);	// Delay for sound
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
void sound_a(char ch,int freq,int time)
{
	int dt=0,sm=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	29 81       	ldd	r18, Y+1	; 0x01
    15b0:	3a 81       	ldd	r19, Y+2	; 0x02
    15b2:	88 85       	ldd	r24, Y+8	; 0x08
    15b4:	99 85       	ldd	r25, Y+9	; 0x09
    15b6:	28 17       	cp	r18, r24
    15b8:	39 07       	cpc	r19, r25
    15ba:	24 f3       	brlt	.-56     	; 0x1584 <sound_a+0x62>
        out_a(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_a(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
    15bc:	29 96       	adiw	r28, 0x09	; 9
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <sound_b>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_b(char ch,int freq,int time)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	29 97       	sbiw	r28, 0x09	; 9
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	7f 83       	std	Y+7, r23	; 0x07
    15e6:	6e 83       	std	Y+6, r22	; 0x06
    15e8:	59 87       	std	Y+9, r21	; 0x09
    15ea:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,sm=0;	// Keep value and 
    15ec:	1c 82       	std	Y+4, r1	; 0x04
    15ee:	1b 82       	std	Y+3, r1	; 0x03
    15f0:	1a 82       	std	Y+2, r1	; 0x02
    15f2:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
    15f4:	88 e8       	ldi	r24, 0x88	; 136
    15f6:	93 e1       	ldi	r25, 0x13	; 19
    15f8:	2e 81       	ldd	r18, Y+6	; 0x06
    15fa:	3f 81       	ldd	r19, Y+7	; 0x07
    15fc:	b9 01       	movw	r22, r18
    15fe:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    1602:	9b 01       	movw	r18, r22
    1604:	3c 83       	std	Y+4, r19	; 0x04
    1606:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
    1608:	88 85       	ldd	r24, Y+8	; 0x08
    160a:	99 85       	ldd	r25, Y+9	; 0x09
    160c:	9c 01       	movw	r18, r24
    160e:	22 0f       	add	r18, r18
    1610:	33 1f       	adc	r19, r19
    1612:	22 0f       	add	r18, r18
    1614:	33 1f       	adc	r19, r19
    1616:	82 0f       	add	r24, r18
    1618:	93 1f       	adc	r25, r19
    161a:	2b 81       	ldd	r18, Y+3	; 0x03
    161c:	3c 81       	ldd	r19, Y+4	; 0x04
    161e:	b9 01       	movw	r22, r18
    1620:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    1624:	9b 01       	movw	r18, r22
    1626:	39 87       	std	Y+9, r19	; 0x09
    1628:	28 87       	std	Y+8, r18	; 0x08
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    162a:	1a 82       	std	Y+2, r1	; 0x02
    162c:	19 82       	std	Y+1, r1	; 0x01
    162e:	15 c0       	rjmp	.+42     	; 0x165a <sound_b+0x8c>
	{
        out_b(ch,1);
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	61 e0       	ldi	r22, 0x01	; 1
    1634:	0e 94 ce 02 	call	0x59c	; 0x59c <out_b>
		delay_sound(dt);	// Delay for sound	
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
        out_b(ch,0);
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	0e 94 ce 02 	call	0x59c	; 0x59c <out_b>
		delay_sound(dt);	// Delay for sound
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
void sound_b(char ch,int freq,int time)
{
	int dt=0,sm=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	29 81       	ldd	r18, Y+1	; 0x01
    165c:	3a 81       	ldd	r19, Y+2	; 0x02
    165e:	88 85       	ldd	r24, Y+8	; 0x08
    1660:	99 85       	ldd	r25, Y+9	; 0x09
    1662:	28 17       	cp	r18, r24
    1664:	39 07       	cpc	r19, r25
    1666:	24 f3       	brlt	.-56     	; 0x1630 <sound_b+0x62>
        out_b(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_b(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
    1668:	29 96       	adiw	r28, 0x09	; 9
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <sound_c>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_c(char ch,int freq,int time)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	29 97       	sbiw	r28, 0x09	; 9
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	7f 83       	std	Y+7, r23	; 0x07
    1692:	6e 83       	std	Y+6, r22	; 0x06
    1694:	59 87       	std	Y+9, r21	; 0x09
    1696:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,sm=0;	// Keep value and 
    1698:	1c 82       	std	Y+4, r1	; 0x04
    169a:	1b 82       	std	Y+3, r1	; 0x03
    169c:	1a 82       	std	Y+2, r1	; 0x02
    169e:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
    16a0:	88 e8       	ldi	r24, 0x88	; 136
    16a2:	93 e1       	ldi	r25, 0x13	; 19
    16a4:	2e 81       	ldd	r18, Y+6	; 0x06
    16a6:	3f 81       	ldd	r19, Y+7	; 0x07
    16a8:	b9 01       	movw	r22, r18
    16aa:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    16ae:	9b 01       	movw	r18, r22
    16b0:	3c 83       	std	Y+4, r19	; 0x04
    16b2:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
    16b4:	88 85       	ldd	r24, Y+8	; 0x08
    16b6:	99 85       	ldd	r25, Y+9	; 0x09
    16b8:	9c 01       	movw	r18, r24
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	22 0f       	add	r18, r18
    16c0:	33 1f       	adc	r19, r19
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	2b 81       	ldd	r18, Y+3	; 0x03
    16c8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ca:	b9 01       	movw	r22, r18
    16cc:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    16d0:	9b 01       	movw	r18, r22
    16d2:	39 87       	std	Y+9, r19	; 0x09
    16d4:	28 87       	std	Y+8, r18	; 0x08
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    16d6:	1a 82       	std	Y+2, r1	; 0x02
    16d8:	19 82       	std	Y+1, r1	; 0x01
    16da:	15 c0       	rjmp	.+42     	; 0x1706 <sound_c+0x8c>
	{
        out_c(ch,1);
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
		delay_sound(dt);	// Delay for sound	
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
        out_c(ch,0);
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	0e 94 1e 03 	call	0x63c	; 0x63c <out_c>
		delay_sound(dt);	// Delay for sound
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
void sound_c(char ch,int freq,int time)
{
	int dt=0,sm=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	29 81       	ldd	r18, Y+1	; 0x01
    1708:	3a 81       	ldd	r19, Y+2	; 0x02
    170a:	88 85       	ldd	r24, Y+8	; 0x08
    170c:	99 85       	ldd	r25, Y+9	; 0x09
    170e:	28 17       	cp	r18, r24
    1710:	39 07       	cpc	r19, r25
    1712:	24 f3       	brlt	.-56     	; 0x16dc <sound_c+0x62>
        out_c(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_c(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
    1714:	29 96       	adiw	r28, 0x09	; 9
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <sound_d>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound -------------------------------------------//
//------------------------------------------------------------------------------------------------//
void sound_d(char ch,int freq,int time)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	29 97       	sbiw	r28, 0x09	; 9
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	8d 83       	std	Y+5, r24	; 0x05
    173c:	7f 83       	std	Y+7, r23	; 0x07
    173e:	6e 83       	std	Y+6, r22	; 0x06
    1740:	59 87       	std	Y+9, r21	; 0x09
    1742:	48 87       	std	Y+8, r20	; 0x08
	int dt=0,sm=0;	// Keep value and 
    1744:	1c 82       	std	Y+4, r1	; 0x04
    1746:	1b 82       	std	Y+3, r1	; 0x03
    1748:	1a 82       	std	Y+2, r1	; 0x02
    174a:	19 82       	std	Y+1, r1	; 0x01
    dt = 5000/freq;   	// Keep active logic delay
    174c:	88 e8       	ldi	r24, 0x88	; 136
    174e:	93 e1       	ldi	r25, 0x13	; 19
    1750:	2e 81       	ldd	r18, Y+6	; 0x06
    1752:	3f 81       	ldd	r19, Y+7	; 0x07
    1754:	b9 01       	movw	r22, r18
    1756:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    175a:	9b 01       	movw	r18, r22
    175c:	3c 83       	std	Y+4, r19	; 0x04
    175e:	2b 83       	std	Y+3, r18	; 0x03
	time = (5*time)/dt;	// Keep counter for generate sound
    1760:	88 85       	ldd	r24, Y+8	; 0x08
    1762:	99 85       	ldd	r25, Y+9	; 0x09
    1764:	9c 01       	movw	r18, r24
    1766:	22 0f       	add	r18, r18
    1768:	33 1f       	adc	r19, r19
    176a:	22 0f       	add	r18, r18
    176c:	33 1f       	adc	r19, r19
    176e:	82 0f       	add	r24, r18
    1770:	93 1f       	adc	r25, r19
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	3c 81       	ldd	r19, Y+4	; 0x04
    1776:	b9 01       	movw	r22, r18
    1778:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    177c:	9b 01       	movw	r18, r22
    177e:	39 87       	std	Y+9, r19	; 0x09
    1780:	28 87       	std	Y+8, r18	; 0x08
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    1782:	1a 82       	std	Y+2, r1	; 0x02
    1784:	19 82       	std	Y+1, r1	; 0x01
    1786:	15 c0       	rjmp	.+42     	; 0x17b2 <sound_d+0x8c>
	{
        out_d(ch,1);
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
		delay_sound(dt);	// Delay for sound	
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
        out_d(ch,0);
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <out_d>
		delay_sound(dt);	// Delay for sound
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <delay_sound>
void sound_d(char ch,int freq,int time)
{
	int dt=0,sm=0;	// Keep value and 
    dt = 5000/freq;   	// Keep active logic delay
	time = (5*time)/dt;	// Keep counter for generate sound
	for(sm=0;sm<time;sm++) // Loop for generate sound(Toggle logic P0.12)   
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	29 81       	ldd	r18, Y+1	; 0x01
    17b4:	3a 81       	ldd	r19, Y+2	; 0x02
    17b6:	88 85       	ldd	r24, Y+8	; 0x08
    17b8:	99 85       	ldd	r25, Y+9	; 0x09
    17ba:	28 17       	cp	r18, r24
    17bc:	39 07       	cpc	r19, r25
    17be:	24 f3       	brlt	.-56     	; 0x1788 <sound_d+0x62>
        out_d(ch,1);
		delay_sound(dt);	// Delay for sound	
        out_d(ch,0);
		delay_sound(dt);	// Delay for sound
	}		
}
    17c0:	29 96       	adiw	r28, 0x09	; 9
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <beep_a>:

//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_a(char _ch)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	0f 92       	push	r0
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	89 83       	std	Y+1, r24	; 0x01
	sound_a(_ch,3000,100);	// Generate sound default frequency
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	68 eb       	ldi	r22, 0xB8	; 184
    17e2:	7b e0       	ldi	r23, 0x0B	; 11
    17e4:	44 e6       	ldi	r20, 0x64	; 100
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	0e 94 91 0a 	call	0x1522	; 0x1522 <sound_a>
}
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <beep_b>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_b(char _ch)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	0f 92       	push	r0
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	89 83       	std	Y+1, r24	; 0x01
	sound_b(_ch,3000,100);	// Generate sound default frequency
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	68 eb       	ldi	r22, 0xB8	; 184
    1804:	7b e0       	ldi	r23, 0x0B	; 11
    1806:	44 e6       	ldi	r20, 0x64	; 100
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <sound_b>
}
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <beep_c>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_c(char _ch)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	0f 92       	push	r0
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	89 83       	std	Y+1, r24	; 0x01
	sound_c(_ch,3000,100);	// Generate sound default frequency
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	68 eb       	ldi	r22, 0xB8	; 184
    1826:	7b e0       	ldi	r23, 0x0B	; 11
    1828:	44 e6       	ldi	r20, 0x64	; 100
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	0e 94 3d 0b 	call	0x167a	; 0x167a <sound_c>
}
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <beep_d>:
//------------------------------------------------------------------------------------------------//
//---------------------------- Function generate sound beep default ------------------------------//
//------------------------------------------------------------------------------------------------//
void beep_d(char _ch)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01
	sound_d(_ch,2000,100);	// Generate sound default frequency
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	60 ed       	ldi	r22, 0xD0	; 208
    1848:	77 e0       	ldi	r23, 0x07	; 7
    184a:	44 e6       	ldi	r20, 0x64	; 100
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	0e 94 93 0b 	call	0x1726	; 0x1726 <sound_d>
}
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <getdist>:
#include <analog.h>
#define m 2933
#define b 20
#define k 1
unsigned int getdist(char adc_ch)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <getdist+0x6>
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int dist = 0;
    1868:	1a 82       	std	Y+2, r1	; 0x02
    186a:	19 82       	std	Y+1, r1	; 0x01
   dist = (m/(analog(adc_ch)+b)) - k;
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	0e 94 26 05 	call	0xa4c	; 0xa4c <analog>
    1872:	9c 01       	movw	r18, r24
    1874:	2c 5e       	subi	r18, 0xEC	; 236
    1876:	3f 4f       	sbci	r19, 0xFF	; 255
    1878:	85 e7       	ldi	r24, 0x75	; 117
    187a:	9b e0       	ldi	r25, 0x0B	; 11
    187c:	b9 01       	movw	r22, r18
    187e:	0e 94 18 12 	call	0x2430	; 0x2430 <__udivmodhi4>
    1882:	9b 01       	movw	r18, r22
    1884:	c9 01       	movw	r24, r18
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
	return(dist);
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <main>:
#define BBBBB (L2< REF&&L1< REF&&CT< REF&&R1< REF&&R2< REF)




void main(){
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	startup();
    18a4:	8c ed       	ldi	r24, 0xDC	; 220
    18a6:	9e e0       	ldi	r25, 0x0E	; 14
    18a8:	fc 01       	movw	r30, r24
    18aa:	09 95       	icall
	step01();
    18ac:	82 e7       	ldi	r24, 0x72	; 114
    18ae:	9c e0       	ldi	r25, 0x0C	; 12
    18b0:	fc 01       	movw	r30, r24
    18b2:	09 95       	icall
	step02();
    18b4:	8e eb       	ldi	r24, 0xBE	; 190
    18b6:	9c e0       	ldi	r25, 0x0C	; 12
    18b8:	fc 01       	movw	r30, r24
    18ba:	09 95       	icall
	step03();
    18bc:	8b e9       	ldi	r24, 0x9B	; 155
    18be:	9d e0       	ldi	r25, 0x0D	; 13
    18c0:	fc 01       	movw	r30, r24
    18c2:	09 95       	icall
	lcd("Completed");
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <main+0x2a>
    18c6:	8d b7       	in	r24, 0x3d	; 61
    18c8:	9e b7       	in	r25, 0x3e	; 62
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	20 e6       	ldi	r18, 0x60	; 96
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	fc 01       	movw	r30, r24
    18d2:	31 83       	std	Z+1, r19	; 0x01
    18d4:	20 83       	st	Z, r18
    18d6:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0

}
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <step01>:

/* Step */
void step01(){
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
	forward(500);
    18ec:	2b ec       	ldi	r18, 0xCB	; 203
    18ee:	30 e1       	ldi	r19, 0x10	; 16
    18f0:	84 ef       	ldi	r24, 0xF4	; 244
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	f9 01       	movw	r30, r18
    18f6:	09 95       	icall
	while(1){
		if(WBB&&R2<REF||BBB||(R1<REF&&R2<REF)){
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    18fe:	88 23       	and	r24, r24
    1900:	79 f0       	breq	.+30     	; 0x1920 <step01+0x3c>
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1908:	88 23       	and	r24, r24
    190a:	51 f4       	brne	.+20     	; 0x1920 <step01+0x3c>
    190c:	83 e0       	ldi	r24, 0x03	; 3
    190e:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1912:	88 23       	and	r24, r24
    1914:	29 f4       	brne	.+10     	; 0x1920 <step01+0x3c>
    1916:	84 e0       	ldi	r24, 0x04	; 4
    1918:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    191c:	88 23       	and	r24, r24
    191e:	c9 f0       	breq	.+50     	; 0x1952 <step01+0x6e>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1926:	88 23       	and	r24, r24
    1928:	51 f4       	brne	.+20     	; 0x193e <step01+0x5a>
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1930:	88 23       	and	r24, r24
    1932:	29 f4       	brne	.+10     	; 0x193e <step01+0x5a>
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    193a:	88 23       	and	r24, r24
    193c:	51 f0       	breq	.+20     	; 0x1952 <step01+0x6e>
    193e:	83 e0       	ldi	r24, 0x03	; 3
    1940:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1944:	88 23       	and	r24, r24
    1946:	a9 f4       	brne	.+42     	; 0x1972 <step01+0x8e>
    1948:	84 e0       	ldi	r24, 0x04	; 4
    194a:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    194e:	88 23       	and	r24, r24
    1950:	81 f4       	brne	.+32     	; 0x1972 <step01+0x8e>
			forward(10);
    1952:	2b ec       	ldi	r18, 0xCB	; 203
    1954:	30 e1       	ldi	r19, 0x10	; 16
    1956:	8a e0       	ldi	r24, 0x0A	; 10
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	f9 01       	movw	r30, r18
    195c:	09 95       	icall
			R90();
    195e:	89 e7       	ldi	r24, 0x79	; 121
    1960:	91 e1       	ldi	r25, 0x11	; 17
    1962:	fc 01       	movw	r30, r24
    1964:	09 95       	icall
			break;
		}
		trackto();
	}
	SIL;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>
}
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret
		if(WBB&&R2<REF||BBB||(R1<REF&&R2<REF)){
			forward(10);
			R90();
			break;
		}
		trackto();
    1972:	8b e5       	ldi	r24, 0x5B	; 91
    1974:	9e e0       	ldi	r25, 0x0E	; 14
    1976:	fc 01       	movw	r30, r24
    1978:	09 95       	icall
	}
    197a:	be cf       	rjmp	.-132    	; 0x18f8 <step01+0x14>

0000197c <step02>:
	SIL;
}

void step02(){
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <step02+0x6>
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <step02+0x16>

		else if(W_B){turn_right(10);}
		else if(B_W){turn_left(10);}
		else if(W_W){forward(1);}
		else if(WBW){forward(20);}
	}
    1988:	00 00       	nop
    198a:	03 c0       	rjmp	.+6      	; 0x1992 <step02+0x16>
    198c:	00 00       	nop
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <step02+0x16>
    1990:	00 00       	nop
	SIL;
}

void step02(){
	while(1){
		int dist= INFARED
    1992:	84 e0       	ldi	r24, 0x04	; 4
    1994:	0e 94 2d 0c 	call	0x185a	; 0x185a <getdist>
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
			if(dist>6&&dist<8){
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	87 30       	cpi	r24, 0x07	; 7
    19a2:	91 05       	cpc	r25, r1
    19a4:	0c f4       	brge	.+2      	; 0x19a8 <step02+0x2c>
    19a6:	49 c0       	rjmp	.+146    	; 0x1a3a <step02+0xbe>
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	88 30       	cpi	r24, 0x08	; 8
    19ae:	91 05       	cpc	r25, r1
    19b0:	0c f0       	brlt	.+2      	; 0x19b4 <step02+0x38>
    19b2:	43 c0       	rjmp	.+134    	; 0x1a3a <step02+0xbe>
				if(WBW){
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    19ba:	88 23       	and	r24, r24
    19bc:	e9 f1       	breq	.+122    	; 0x1a38 <step02+0xbc>
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    19c4:	88 23       	and	r24, r24
    19c6:	c1 f5       	brne	.+112    	; 0x1a38 <step02+0xbc>
    19c8:	83 e0       	ldi	r24, 0x03	; 3
    19ca:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    19ce:	88 23       	and	r24, r24
    19d0:	99 f1       	breq	.+102    	; 0x1a38 <step02+0xbc>
				//forward(50);
					pause(50);
    19d2:	23 e3       	ldi	r18, 0x33	; 51
    19d4:	31 e1       	ldi	r19, 0x11	; 17
    19d6:	82 e3       	ldi	r24, 0x32	; 50
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	f9 01       	movw	r30, r18
    19dc:	09 95       	icall
					backward(10);
    19de:	25 ee       	ldi	r18, 0xE5	; 229
    19e0:	30 e1       	ldi	r19, 0x10	; 16
    19e2:	8a e0       	ldi	r24, 0x0A	; 10
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	f9 01       	movw	r30, r18
    19e8:	09 95       	icall
					pause(50);
    19ea:	23 e3       	ldi	r18, 0x33	; 51
    19ec:	31 e1       	ldi	r19, 0x11	; 17
    19ee:	82 e3       	ldi	r24, 0x32	; 50
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	f9 01       	movw	r30, r18
    19f4:	09 95       	icall
					
					servo_open();
    19f6:	8c ea       	ldi	r24, 0xAC	; 172
    19f8:	91 e1       	ldi	r25, 0x11	; 17
    19fa:	fc 01       	movw	r30, r24
    19fc:	09 95       	icall
					servo_close();
    19fe:	80 ed       	ldi	r24, 0xD0	; 208
    1a00:	91 e1       	ldi	r25, 0x11	; 17
    1a02:	fc 01       	movw	r30, r24
    1a04:	09 95       	icall
					SIL;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>
					lcd("%d   ",dist);
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <step02+0x92>
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <step02+0x94>
    1a10:	8d b7       	in	r24, 0x3d	; 61
    1a12:	9e b7       	in	r25, 0x3e	; 62
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	2a e6       	ldi	r18, 0x6A	; 106
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	31 83       	std	Z+1, r19	; 0x01
    1a1e:	20 83       	st	Z, r18
    1a20:	29 81       	ldd	r18, Y+1	; 0x01
    1a22:	3a 81       	ldd	r19, Y+2	; 0x02
    1a24:	fc 01       	movw	r30, r24
    1a26:	33 83       	std	Z+3, r19	; 0x03
    1a28:	22 83       	std	Z+2, r18	; 0x02
    1a2a:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
					break;
    1a36:	53 c0       	rjmp	.+166    	; 0x1ade <step02+0x162>

void step02(){
	while(1){
		int dist= INFARED
			if(dist>6&&dist<8){
				if(WBW){
    1a38:	4c c0       	rjmp	.+152    	; 0x1ad2 <step02+0x156>
					lcd("%d   ",dist);
					break;
				}
			}

		else if(W_B){turn_right(10);}
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1a40:	88 23       	and	r24, r24
    1a42:	61 f0       	breq	.+24     	; 0x1a5c <step02+0xe0>
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1a4a:	88 23       	and	r24, r24
    1a4c:	39 f4       	brne	.+14     	; 0x1a5c <step02+0xe0>
    1a4e:	29 e1       	ldi	r18, 0x19	; 25
    1a50:	31 e1       	ldi	r19, 0x11	; 17
    1a52:	8a e0       	ldi	r24, 0x0A	; 10
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	f9 01       	movw	r30, r18
    1a58:	09 95       	icall
    1a5a:	3b c0       	rjmp	.+118    	; 0x1ad2 <step02+0x156>
		else if(B_W){turn_left(10);}
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1a62:	88 23       	and	r24, r24
    1a64:	61 f4       	brne	.+24     	; 0x1a7e <step02+0x102>
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1a6c:	88 23       	and	r24, r24
    1a6e:	39 f0       	breq	.+14     	; 0x1a7e <step02+0x102>
    1a70:	2f ef       	ldi	r18, 0xFF	; 255
    1a72:	30 e1       	ldi	r19, 0x10	; 16
    1a74:	8a e0       	ldi	r24, 0x0A	; 10
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	f9 01       	movw	r30, r18
    1a7a:	09 95       	icall
    1a7c:	2a c0       	rjmp	.+84     	; 0x1ad2 <step02+0x156>
		else if(W_W){forward(1);}
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1a84:	88 23       	and	r24, r24
    1a86:	61 f0       	breq	.+24     	; 0x1aa0 <step02+0x124>
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1a8e:	88 23       	and	r24, r24
    1a90:	39 f0       	breq	.+14     	; 0x1aa0 <step02+0x124>
    1a92:	2b ec       	ldi	r18, 0xCB	; 203
    1a94:	30 e1       	ldi	r19, 0x10	; 16
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	f9 01       	movw	r30, r18
    1a9c:	09 95       	icall
    1a9e:	19 c0       	rjmp	.+50     	; 0x1ad2 <step02+0x156>
		else if(WBW){forward(20);}
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1aa6:	88 23       	and	r24, r24
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <step02+0x130>
    1aaa:	6e cf       	rjmp	.-292    	; 0x1988 <step02+0xc>
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <step02+0x13c>
    1ab6:	6a cf       	rjmp	.-300    	; 0x198c <step02+0x10>
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1abe:	88 23       	and	r24, r24
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <step02+0x148>
    1ac2:	66 cf       	rjmp	.-308    	; 0x1990 <step02+0x14>
    1ac4:	2b ec       	ldi	r18, 0xCB	; 203
    1ac6:	30 e1       	ldi	r19, 0x10	; 16
    1ac8:	84 e1       	ldi	r24, 0x14	; 20
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	f9 01       	movw	r30, r18
    1ace:	09 95       	icall
	}
    1ad0:	60 cf       	rjmp	.-320    	; 0x1992 <step02+0x16>
    1ad2:	5f cf       	rjmp	.-322    	; 0x1992 <step02+0x16>
		}
		else if(WBW){
			forward(100);
			break;
		}
	}
    1ad4:	00 00       	nop
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <step02+0x162>
    1ad8:	00 00       	nop
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <step02+0x162>
    1adc:	00 00       	nop
		else if(B_W){turn_left(10);}
		else if(W_W){forward(1);}
		else if(WBW){forward(20);}
	}
	while(1){
		if(L2<REF&&R2<REF){
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1ae4:	88 23       	and	r24, r24
    1ae6:	69 f4       	brne	.+26     	; 0x1b02 <step02+0x186>
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1aee:	88 23       	and	r24, r24
    1af0:	41 f4       	brne	.+16     	; 0x1b02 <step02+0x186>
			forward(100);
    1af2:	2b ec       	ldi	r18, 0xCB	; 203
    1af4:	30 e1       	ldi	r19, 0x10	; 16
    1af6:	84 e6       	ldi	r24, 0x64	; 100
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	f9 01       	movw	r30, r18
    1afc:	09 95       	icall
		else if(B_W){turn_left(10);}
		else if(W_W){forward(1);}
		else if(WBW){forward(20);}
	}
	while(1){
		if(L2<REF&&R2<REF){
    1afe:	00 00       	nop
		}
		else if(WBW){
			forward(100);
			break;
		}
	}
    1b00:	ee cf       	rjmp	.-36     	; 0x1ade <step02+0x162>
	}
	while(1){
		if(L2<REF&&R2<REF){
			forward(100);
		}
		else if(WBW){
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1b08:	88 23       	and	r24, r24
    1b0a:	21 f3       	breq	.-56     	; 0x1ad4 <step02+0x158>
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1b12:	88 23       	and	r24, r24
    1b14:	09 f7       	brne	.-62     	; 0x1ad8 <step02+0x15c>
    1b16:	83 e0       	ldi	r24, 0x03	; 3
    1b18:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1b1c:	88 23       	and	r24, r24
    1b1e:	f1 f2       	breq	.-68     	; 0x1adc <step02+0x160>
			forward(100);
    1b20:	2b ec       	ldi	r18, 0xCB	; 203
    1b22:	30 e1       	ldi	r19, 0x10	; 16
    1b24:	84 e6       	ldi	r24, 0x64	; 100
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	f9 01       	movw	r30, r18
    1b2a:	09 95       	icall
			break;
		}
	}
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <step03>:

void step03(){
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <step03+0x14>
			SIC;
			break;

		}
		
	}
    1b40:	00 00       	nop
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <step03+0x14>
    1b44:	00 00       	nop
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <step03+0x14>
    1b48:	00 00       	nop
	}
}

void step03(){
	while(1){
		trackto();
    1b4a:	8b e5       	ldi	r24, 0x5B	; 91
    1b4c:	9e e0       	ldi	r25, 0x0E	; 14
    1b4e:	fc 01       	movw	r30, r24
    1b50:	09 95       	icall
		if(BBB){
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1b58:	88 23       	and	r24, r24
    1b5a:	91 f7       	brne	.-28     	; 0x1b40 <step03+0xa>
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1b62:	88 23       	and	r24, r24
    1b64:	79 f7       	brne	.-34     	; 0x1b44 <step03+0xe>
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1b6c:	88 23       	and	r24, r24
    1b6e:	61 f7       	brne	.-40     	; 0x1b48 <step03+0x12>
			SIC;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>
			break;

		}
		
	}
	forward(10);
    1b76:	2b ec       	ldi	r18, 0xCB	; 203
    1b78:	30 e1       	ldi	r19, 0x10	; 16
    1b7a:	8a e0       	ldi	r24, 0x0A	; 10
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	f9 01       	movw	r30, r18
    1b80:	09 95       	icall
    1b82:	07 c0       	rjmp	.+14     	; 0x1b92 <step03+0x5c>
			if(COLOR==0){
				turn_left(20);servo_put();forward(10);turn_right(20);backward(200);break;
			}
			else if(COLOR==1){turn_right(200);servo_put();forward(10);turn_left(200);backward(500);break;}
		}
	}
    1b84:	00 00       	nop
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <step03+0x5c>
    1b88:	00 00       	nop
    1b8a:	03 c0       	rjmp	.+6      	; 0x1b92 <step03+0x5c>
    1b8c:	00 00       	nop
    1b8e:	01 c0       	rjmp	.+2      	; 0x1b92 <step03+0x5c>
    1b90:	00 00       	nop
		}
		
	}
	forward(10);
	while(1){
		trackto();
    1b92:	8b e5       	ldi	r24, 0x5B	; 91
    1b94:	9e e0       	ldi	r25, 0x0E	; 14
    1b96:	fc 01       	movw	r30, r24
    1b98:	09 95       	icall
		if(BBB){
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1ba0:	88 23       	and	r24, r24
    1ba2:	81 f7       	brne	.-32     	; 0x1b84 <step03+0x4e>
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1baa:	88 23       	and	r24, r24
    1bac:	69 f7       	brne	.-38     	; 0x1b88 <step03+0x52>
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1bb4:	88 23       	and	r24, r24
    1bb6:	51 f7       	brne	.-44     	; 0x1b8c <step03+0x56>
			pause(100);SIL;
    1bb8:	23 e3       	ldi	r18, 0x33	; 51
    1bba:	31 e1       	ldi	r19, 0x11	; 17
    1bbc:	84 e6       	ldi	r24, 0x64	; 100
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	f9 01       	movw	r30, r18
    1bc2:	09 95       	icall
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>
			if(COLOR==0){
    1bca:	85 e0       	ldi	r24, 0x05	; 5
    1bcc:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1bd0:	88 23       	and	r24, r24
    1bd2:	e9 f4       	brne	.+58     	; 0x1c0e <step03+0xd8>
				turn_left(20);servo_put();forward(10);turn_right(20);backward(200);break;
    1bd4:	2f ef       	ldi	r18, 0xFF	; 255
    1bd6:	30 e1       	ldi	r19, 0x10	; 16
    1bd8:	84 e1       	ldi	r24, 0x14	; 20
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	f9 01       	movw	r30, r18
    1bde:	09 95       	icall
    1be0:	84 ef       	ldi	r24, 0xF4	; 244
    1be2:	91 e1       	ldi	r25, 0x11	; 17
    1be4:	fc 01       	movw	r30, r24
    1be6:	09 95       	icall
    1be8:	2b ec       	ldi	r18, 0xCB	; 203
    1bea:	30 e1       	ldi	r19, 0x10	; 16
    1bec:	8a e0       	ldi	r24, 0x0A	; 10
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	09 95       	icall
    1bf4:	29 e1       	ldi	r18, 0x19	; 25
    1bf6:	31 e1       	ldi	r19, 0x11	; 17
    1bf8:	84 e1       	ldi	r24, 0x14	; 20
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	f9 01       	movw	r30, r18
    1bfe:	09 95       	icall
    1c00:	25 ee       	ldi	r18, 0xE5	; 229
    1c02:	30 e1       	ldi	r19, 0x10	; 16
    1c04:	88 ec       	ldi	r24, 0xC8	; 200
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	f9 01       	movw	r30, r18
    1c0a:	09 95       	icall
    1c0c:	23 c0       	rjmp	.+70     	; 0x1c54 <step03+0x11e>
			}
			else if(COLOR==1){turn_right(200);servo_put();forward(10);turn_left(200);backward(500);break;}
    1c0e:	85 e0       	ldi	r24, 0x05	; 5
    1c10:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <step03+0xe4>
    1c18:	bb cf       	rjmp	.-138    	; 0x1b90 <step03+0x5a>
    1c1a:	29 e1       	ldi	r18, 0x19	; 25
    1c1c:	31 e1       	ldi	r19, 0x11	; 17
    1c1e:	88 ec       	ldi	r24, 0xC8	; 200
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	f9 01       	movw	r30, r18
    1c24:	09 95       	icall
    1c26:	84 ef       	ldi	r24, 0xF4	; 244
    1c28:	91 e1       	ldi	r25, 0x11	; 17
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	09 95       	icall
    1c2e:	2b ec       	ldi	r18, 0xCB	; 203
    1c30:	30 e1       	ldi	r19, 0x10	; 16
    1c32:	8a e0       	ldi	r24, 0x0A	; 10
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	f9 01       	movw	r30, r18
    1c38:	09 95       	icall
    1c3a:	2f ef       	ldi	r18, 0xFF	; 255
    1c3c:	30 e1       	ldi	r19, 0x10	; 16
    1c3e:	88 ec       	ldi	r24, 0xC8	; 200
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	f9 01       	movw	r30, r18
    1c44:	09 95       	icall
    1c46:	25 ee       	ldi	r18, 0xE5	; 229
    1c48:	30 e1       	ldi	r19, 0x10	; 16
    1c4a:	84 ef       	ldi	r24, 0xF4	; 244
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	f9 01       	movw	r30, r18
    1c50:	09 95       	icall
    1c52:	00 00       	nop
		}
	}
	SIL;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>

	turn_right(10);
    1c5a:	29 e1       	ldi	r18, 0x19	; 25
    1c5c:	31 e1       	ldi	r19, 0x11	; 17
    1c5e:	8a e0       	ldi	r24, 0x0A	; 10
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	f9 01       	movw	r30, r18
    1c64:	09 95       	icall
    1c66:	05 c0       	rjmp	.+10     	; 0x1c72 <step03+0x13c>
		if(BBB){
			forward(20);
			L90();
			break;
		}
	}
    1c68:	00 00       	nop
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <step03+0x13c>
    1c6c:	00 00       	nop
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <step03+0x13c>
    1c70:	00 00       	nop
	}
	SIL;

	turn_right(10);
	while(1){
		if(BBB){
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1c78:	88 23       	and	r24, r24
    1c7a:	b1 f7       	brne	.-20     	; 0x1c68 <step03+0x132>
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1c82:	88 23       	and	r24, r24
    1c84:	99 f7       	brne	.-26     	; 0x1c6c <step03+0x136>
    1c86:	83 e0       	ldi	r24, 0x03	; 3
    1c88:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1c8c:	88 23       	and	r24, r24
    1c8e:	81 f7       	brne	.-32     	; 0x1c70 <step03+0x13a>
			forward(20);
    1c90:	2b ec       	ldi	r18, 0xCB	; 203
    1c92:	30 e1       	ldi	r19, 0x10	; 16
    1c94:	84 e1       	ldi	r24, 0x14	; 20
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	f9 01       	movw	r30, r18
    1c9a:	09 95       	icall
			L90();
    1c9c:	86 e4       	ldi	r24, 0x46	; 70
    1c9e:	91 e1       	ldi	r25, 0x11	; 17
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	09 95       	icall
			break;
		}
	}
	SIL;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>
motor_stop(ALL);
    1caa:	83 e0       	ldi	r24, 0x03	; 3
    1cac:	0e 94 cc 04 	call	0x998	; 0x998 <motor_stop>
}
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <trackto>:




/* Track line */
void trackto(){
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
	if(W_W){forward(100);}
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1cc4:	88 23       	and	r24, r24
    1cc6:	61 f0       	breq	.+24     	; 0x1ce0 <trackto+0x2a>
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1cce:	88 23       	and	r24, r24
    1cd0:	39 f0       	breq	.+14     	; 0x1ce0 <trackto+0x2a>
    1cd2:	2b ec       	ldi	r18, 0xCB	; 203
    1cd4:	30 e1       	ldi	r19, 0x10	; 16
    1cd6:	84 e6       	ldi	r24, 0x64	; 100
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	f9 01       	movw	r30, r18
    1cdc:	09 95       	icall
    1cde:	21 c0       	rjmp	.+66     	; 0x1d22 <trackto+0x6c>
	else if(W_B){turn_right(10);}
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1ce6:	88 23       	and	r24, r24
    1ce8:	61 f0       	breq	.+24     	; 0x1d02 <trackto+0x4c>
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1cf0:	88 23       	and	r24, r24
    1cf2:	39 f4       	brne	.+14     	; 0x1d02 <trackto+0x4c>
    1cf4:	29 e1       	ldi	r18, 0x19	; 25
    1cf6:	31 e1       	ldi	r19, 0x11	; 17
    1cf8:	8a e0       	ldi	r24, 0x0A	; 10
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	f9 01       	movw	r30, r18
    1cfe:	09 95       	icall
    1d00:	10 c0       	rjmp	.+32     	; 0x1d22 <trackto+0x6c>
	else if(B_W){turn_left(10);}
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1d08:	88 23       	and	r24, r24
    1d0a:	59 f4       	brne	.+22     	; 0x1d22 <trackto+0x6c>
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1d12:	88 23       	and	r24, r24
    1d14:	31 f0       	breq	.+12     	; 0x1d22 <trackto+0x6c>
    1d16:	2f ef       	ldi	r18, 0xFF	; 255
    1d18:	30 e1       	ldi	r19, 0x10	; 16
    1d1a:	8a e0       	ldi	r24, 0x0A	; 10
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	f9 01       	movw	r30, r18
    1d20:	09 95       	icall
}
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <trackline>:
void trackline(){
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
		if(WBW){forward(100);}
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1d36:	88 23       	and	r24, r24
    1d38:	89 f0       	breq	.+34     	; 0x1d5c <trackline+0x34>
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1d40:	88 23       	and	r24, r24
    1d42:	61 f4       	brne	.+24     	; 0x1d5c <trackline+0x34>
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1d4a:	88 23       	and	r24, r24
    1d4c:	39 f0       	breq	.+14     	; 0x1d5c <trackline+0x34>
    1d4e:	2b ec       	ldi	r18, 0xCB	; 203
    1d50:	30 e1       	ldi	r19, 0x10	; 16
    1d52:	84 e6       	ldi	r24, 0x64	; 100
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	f9 01       	movw	r30, r18
    1d58:	09 95       	icall
    1d5a:	2b c0       	rjmp	.+86     	; 0x1db2 <trackline+0x8a>
		else if(WWB){turn_right(10);}
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1d62:	88 23       	and	r24, r24
    1d64:	89 f0       	breq	.+34     	; 0x1d88 <trackline+0x60>
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1d6c:	88 23       	and	r24, r24
    1d6e:	61 f0       	breq	.+24     	; 0x1d88 <trackline+0x60>
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1d76:	88 23       	and	r24, r24
    1d78:	39 f4       	brne	.+14     	; 0x1d88 <trackline+0x60>
    1d7a:	29 e1       	ldi	r18, 0x19	; 25
    1d7c:	31 e1       	ldi	r19, 0x11	; 17
    1d7e:	8a e0       	ldi	r24, 0x0A	; 10
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	f9 01       	movw	r30, r18
    1d84:	09 95       	icall
    1d86:	15 c0       	rjmp	.+42     	; 0x1db2 <trackline+0x8a>
		else if(BWW){turn_left(10);}
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1d8e:	88 23       	and	r24, r24
    1d90:	81 f4       	brne	.+32     	; 0x1db2 <trackline+0x8a>
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1d98:	88 23       	and	r24, r24
    1d9a:	59 f0       	breq	.+22     	; 0x1db2 <trackline+0x8a>
    1d9c:	83 e0       	ldi	r24, 0x03	; 3
    1d9e:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1da2:	88 23       	and	r24, r24
    1da4:	31 f0       	breq	.+12     	; 0x1db2 <trackline+0x8a>
    1da6:	2f ef       	ldi	r18, 0xFF	; 255
    1da8:	30 e1       	ldi	r19, 0x10	; 16
    1daa:	8a e0       	ldi	r24, 0x0A	; 10
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	f9 01       	movw	r30, r18
    1db0:	09 95       	icall
}
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <startup>:


/* Basic function */
void startup(){
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
	lcd("Press SW1");
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <startup+0xa>
    1dc2:	8d b7       	in	r24, 0x3d	; 61
    1dc4:	9e b7       	in	r25, 0x3e	; 62
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	20 e7       	ldi	r18, 0x70	; 112
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	fc 01       	movw	r30, r24
    1dce:	31 83       	std	Z+1, r19	; 0x01
    1dd0:	20 83       	st	Z, r18
    1dd2:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
	servo_close();
    1dda:	80 ed       	ldi	r24, 0xD0	; 208
    1ddc:	91 e1       	ldi	r25, 0x11	; 17
    1dde:	fc 01       	movw	r30, r24
    1de0:	09 95       	icall
	servo_stop();
    1de2:	0e 94 c7 09 	call	0x138e	; 0x138e <servo_stop>
	sw1_press();
    1de6:	85 e0       	ldi	r24, 0x05	; 5
    1de8:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1dec:	88 23       	and	r24, r24
    1dee:	d9 f7       	brne	.-10     	; 0x1de6 <startup+0x2e>
    1df0:	85 e0       	ldi	r24, 0x05	; 5
    1df2:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1df6:	88 23       	and	r24, r24
    1df8:	d9 f3       	breq	.-10     	; 0x1df0 <startup+0x38>
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <chk_line6>:

void chk_line6(){	lcd("L1:%d L2:%d CT:%d #nR1:%d R2:%d",L1,L2,CT,R1,R2);}
    1e00:	af 92       	push	r10
    1e02:	bf 92       	push	r11
    1e04:	cf 92       	push	r12
    1e06:	df 92       	push	r13
    1e08:	ef 92       	push	r14
    1e0a:	ff 92       	push	r15
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1e1e:	a8 2e       	mov	r10, r24
    1e20:	bb 24       	eor	r11, r11
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1e28:	c8 2e       	mov	r12, r24
    1e2a:	dd 24       	eor	r13, r13
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1e32:	e8 2e       	mov	r14, r24
    1e34:	ff 24       	eor	r15, r15
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1e3c:	08 2f       	mov	r16, r24
    1e3e:	10 e0       	ldi	r17, 0x00	; 0
    1e40:	84 e0       	ldi	r24, 0x04	; 4
    1e42:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	8d b7       	in	r24, 0x3d	; 61
    1e4c:	9e b7       	in	r25, 0x3e	; 62
    1e4e:	0c 97       	sbiw	r24, 0x0c	; 12
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	9e bf       	out	0x3e, r25	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	8d bf       	out	0x3d, r24	; 61
    1e5a:	8d b7       	in	r24, 0x3d	; 61
    1e5c:	9e b7       	in	r25, 0x3e	; 62
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	4a e7       	ldi	r20, 0x7A	; 122
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	fc 01       	movw	r30, r24
    1e66:	51 83       	std	Z+1, r21	; 0x01
    1e68:	40 83       	st	Z, r20
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	b3 82       	std	Z+3, r11	; 0x03
    1e6e:	a2 82       	std	Z+2, r10	; 0x02
    1e70:	fc 01       	movw	r30, r24
    1e72:	d5 82       	std	Z+5, r13	; 0x05
    1e74:	c4 82       	std	Z+4, r12	; 0x04
    1e76:	fc 01       	movw	r30, r24
    1e78:	f7 82       	std	Z+7, r15	; 0x07
    1e7a:	e6 82       	std	Z+6, r14	; 0x06
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	11 87       	std	Z+9, r17	; 0x09
    1e80:	00 87       	std	Z+8, r16	; 0x08
    1e82:	fc 01       	movw	r30, r24
    1e84:	33 87       	std	Z+11, r19	; 0x0b
    1e86:	22 87       	std	Z+10, r18	; 0x0a
    1e88:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    1e8c:	8d b7       	in	r24, 0x3d	; 61
    1e8e:	9e b7       	in	r25, 0x3e	; 62
    1e90:	0c 96       	adiw	r24, 0x0c	; 12
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	9e bf       	out	0x3e, r25	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	8d bf       	out	0x3d, r24	; 61
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	ff 90       	pop	r15
    1ea6:	ef 90       	pop	r14
    1ea8:	df 90       	pop	r13
    1eaa:	cf 90       	pop	r12
    1eac:	bf 90       	pop	r11
    1eae:	af 90       	pop	r10
    1eb0:	08 95       	ret

00001eb2 <chk_line9>:
void chk_line9(){	lcd("BL1:%d L2:%d CT:%d #nR1:%d R2:%d",L1,L2,CT,R1,R2);}
    1eb2:	af 92       	push	r10
    1eb4:	bf 92       	push	r11
    1eb6:	cf 92       	push	r12
    1eb8:	df 92       	push	r13
    1eba:	ef 92       	push	r14
    1ebc:	ff 92       	push	r15
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1ed0:	a8 2e       	mov	r10, r24
    1ed2:	bb 24       	eor	r11, r11
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1eda:	c8 2e       	mov	r12, r24
    1edc:	dd 24       	eor	r13, r13
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1ee4:	e8 2e       	mov	r14, r24
    1ee6:	ff 24       	eor	r15, r15
    1ee8:	83 e0       	ldi	r24, 0x03	; 3
    1eea:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1eee:	08 2f       	mov	r16, r24
    1ef0:	10 e0       	ldi	r17, 0x00	; 0
    1ef2:	84 e0       	ldi	r24, 0x04	; 4
    1ef4:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	8d b7       	in	r24, 0x3d	; 61
    1efe:	9e b7       	in	r25, 0x3e	; 62
    1f00:	0c 97       	sbiw	r24, 0x0c	; 12
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	9e bf       	out	0x3e, r25	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	8d bf       	out	0x3d, r24	; 61
    1f0c:	8d b7       	in	r24, 0x3d	; 61
    1f0e:	9e b7       	in	r25, 0x3e	; 62
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	4a e9       	ldi	r20, 0x9A	; 154
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	fc 01       	movw	r30, r24
    1f18:	51 83       	std	Z+1, r21	; 0x01
    1f1a:	40 83       	st	Z, r20
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	b3 82       	std	Z+3, r11	; 0x03
    1f20:	a2 82       	std	Z+2, r10	; 0x02
    1f22:	fc 01       	movw	r30, r24
    1f24:	d5 82       	std	Z+5, r13	; 0x05
    1f26:	c4 82       	std	Z+4, r12	; 0x04
    1f28:	fc 01       	movw	r30, r24
    1f2a:	f7 82       	std	Z+7, r15	; 0x07
    1f2c:	e6 82       	std	Z+6, r14	; 0x06
    1f2e:	fc 01       	movw	r30, r24
    1f30:	11 87       	std	Z+9, r17	; 0x09
    1f32:	00 87       	std	Z+8, r16	; 0x08
    1f34:	fc 01       	movw	r30, r24
    1f36:	33 87       	std	Z+11, r19	; 0x0b
    1f38:	22 87       	std	Z+10, r18	; 0x0a
    1f3a:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    1f3e:	8d b7       	in	r24, 0x3d	; 61
    1f40:	9e b7       	in	r25, 0x3e	; 62
    1f42:	0c 96       	adiw	r24, 0x0c	; 12
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	9e bf       	out	0x3e, r25	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	8d bf       	out	0x3d, r24	; 61
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	df 90       	pop	r13
    1f5c:	cf 90       	pop	r12
    1f5e:	bf 90       	pop	r11
    1f60:	af 90       	pop	r10
    1f62:	08 95       	ret

00001f64 <chk_servo_pos>:




void chk_servo_pos(){
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	2c 97       	sbiw	r28, 0x0c	; 12
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
	int na,nb,ea,eb,ec,ed;
	na=25;
    1f78:	89 e1       	ldi	r24, 0x19	; 25
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	nb=25;
    1f80:	89 e1       	ldi	r24, 0x19	; 25
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03

	while(1){
		ea = in_a(2);
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
		eb = in_a(3);
    1f96:	83 e0       	ldi	r24, 0x03	; 3
    1f98:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	98 87       	std	Y+8, r25	; 0x08
    1fa2:	8f 83       	std	Y+7, r24	; 0x07
		ec = in_a(4);
    1fa4:	84 e0       	ldi	r24, 0x04	; 4
    1fa6:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9a 87       	std	Y+10, r25	; 0x0a
    1fb0:	89 87       	std	Y+9, r24	; 0x09
		ed = in_a(5);
    1fb2:	85 e0       	ldi	r24, 0x05	; 5
    1fb4:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 87       	std	Y+12, r25	; 0x0c
    1fbe:	8b 87       	std	Y+11, r24	; 0x0b

		servo(0,na);
    1fc0:	29 81       	ldd	r18, Y+1	; 0x01
    1fc2:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	b9 01       	movw	r22, r18
    1fc8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
		servo(1,nb);
    1fcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fce:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
		if(ea==0){na+=5;}
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	31 f4       	brne	.+12     	; 0x1fec <chk_servo_pos+0x88>
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	05 96       	adiw	r24, 0x05	; 5
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	1d c0       	rjmp	.+58     	; 0x2026 <chk_servo_pos+0xc2>
		else if(eb==0){na-=5;}
    1fec:	8f 81       	ldd	r24, Y+7	; 0x07
    1fee:	98 85       	ldd	r25, Y+8	; 0x08
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	31 f4       	brne	.+12     	; 0x2000 <chk_servo_pos+0x9c>
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	05 97       	sbiw	r24, 0x05	; 5
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	13 c0       	rjmp	.+38     	; 0x2026 <chk_servo_pos+0xc2>
		else if(ec==0){nb+=5;}
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	31 f4       	brne	.+12     	; 0x2014 <chk_servo_pos+0xb0>
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	05 96       	adiw	r24, 0x05	; 5
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	8b 83       	std	Y+3, r24	; 0x03
    2012:	09 c0       	rjmp	.+18     	; 0x2026 <chk_servo_pos+0xc2>
		else if(ed==0){nb-=5;}
    2014:	8b 85       	ldd	r24, Y+11	; 0x0b
    2016:	9c 85       	ldd	r25, Y+12	; 0x0c
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	29 f4       	brne	.+10     	; 0x2026 <chk_servo_pos+0xc2>
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	9c 81       	ldd	r25, Y+4	; 0x04
    2020:	05 97       	sbiw	r24, 0x05	; 5
    2022:	9c 83       	std	Y+4, r25	; 0x04
    2024:	8b 83       	std	Y+3, r24	; 0x03
		lcd("K:%d   #nA:%d   ",na,nb);
    2026:	00 d0       	rcall	.+0      	; 0x2028 <chk_servo_pos+0xc4>
    2028:	00 d0       	rcall	.+0      	; 0x202a <chk_servo_pos+0xc6>
    202a:	00 d0       	rcall	.+0      	; 0x202c <chk_servo_pos+0xc8>
    202c:	8d b7       	in	r24, 0x3d	; 61
    202e:	9e b7       	in	r25, 0x3e	; 62
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	2b eb       	ldi	r18, 0xBB	; 187
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	fc 01       	movw	r30, r24
    2038:	31 83       	std	Z+1, r19	; 0x01
    203a:	20 83       	st	Z, r18
    203c:	29 81       	ldd	r18, Y+1	; 0x01
    203e:	3a 81       	ldd	r19, Y+2	; 0x02
    2040:	fc 01       	movw	r30, r24
    2042:	33 83       	std	Z+3, r19	; 0x03
    2044:	22 83       	std	Z+2, r18	; 0x02
    2046:	2b 81       	ldd	r18, Y+3	; 0x03
    2048:	3c 81       	ldd	r19, Y+4	; 0x04
    204a:	fc 01       	movw	r30, r24
    204c:	35 83       	std	Z+5, r19	; 0x05
    204e:	24 83       	std	Z+4, r18	; 0x04
    2050:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    2054:	8d b7       	in	r24, 0x3d	; 61
    2056:	9e b7       	in	r25, 0x3e	; 62
    2058:	06 96       	adiw	r24, 0x06	; 6
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	9e bf       	out	0x3e, r25	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	8d bf       	out	0x3d, r24	; 61
	}
    2064:	91 cf       	rjmp	.-222    	; 0x1f88 <chk_servo_pos+0x24>

00002066 <chk_movement>:
}

void chk_movement(){
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62

	while(1){
	 forward(1000);SIL;
    206e:	2b ec       	ldi	r18, 0xCB	; 203
    2070:	30 e1       	ldi	r19, 0x10	; 16
    2072:	88 ee       	ldi	r24, 0xE8	; 232
    2074:	93 e0       	ldi	r25, 0x03	; 3
    2076:	f9 01       	movw	r30, r18
    2078:	09 95       	icall
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>
	 backward(1000);SIL;
    2080:	25 ee       	ldi	r18, 0xE5	; 229
    2082:	30 e1       	ldi	r19, 0x10	; 16
    2084:	88 ee       	ldi	r24, 0xE8	; 232
    2086:	93 e0       	ldi	r25, 0x03	; 3
    2088:	f9 01       	movw	r30, r18
    208a:	09 95       	icall
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>
	 turn_left(1000);SIL;
    2092:	2f ef       	ldi	r18, 0xFF	; 255
    2094:	30 e1       	ldi	r19, 0x10	; 16
    2096:	88 ee       	ldi	r24, 0xE8	; 232
    2098:	93 e0       	ldi	r25, 0x03	; 3
    209a:	f9 01       	movw	r30, r18
    209c:	09 95       	icall
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>
	 turn_right(1000);
    20a4:	29 e1       	ldi	r18, 0x19	; 25
    20a6:	31 e1       	ldi	r19, 0x11	; 17
    20a8:	88 ee       	ldi	r24, 0xE8	; 232
    20aa:	93 e0       	ldi	r25, 0x03	; 3
    20ac:	f9 01       	movw	r30, r18
    20ae:	09 95       	icall
	 SIL;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <beep_d>
	}
    20b6:	db cf       	rjmp	.-74     	; 0x206e <chk_movement+0x8>

000020b8 <chk_gripper>:

}

void chk_gripper(){
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <chk_gripper+0xc>
	while(1){
		if(in_a(2)==0){servo_open();lcd("open      ");}
		else if(in_a(3)==0){servo_close();lcd("Close      ");}
		else if(in_a(4)==0){servo_put();lcd("Put     ");}
	}
    20c2:	00 00       	nop

}

void chk_gripper(){
	while(1){
		if(in_a(2)==0){servo_open();lcd("open      ");}
    20c4:	82 e0       	ldi	r24, 0x02	; 2
    20c6:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    20ca:	88 23       	and	r24, r24
    20cc:	91 f4       	brne	.+36     	; 0x20f2 <chk_gripper+0x3a>
    20ce:	8c ea       	ldi	r24, 0xAC	; 172
    20d0:	91 e1       	ldi	r25, 0x11	; 17
    20d2:	fc 01       	movw	r30, r24
    20d4:	09 95       	icall
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <chk_gripper+0x20>
    20d8:	8d b7       	in	r24, 0x3d	; 61
    20da:	9e b7       	in	r25, 0x3e	; 62
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	2c ec       	ldi	r18, 0xCC	; 204
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	fc 01       	movw	r30, r24
    20e4:	31 83       	std	Z+1, r19	; 0x01
    20e6:	20 83       	st	Z, r18
    20e8:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
		else if(in_a(3)==0){servo_close();lcd("Close      ");}
		else if(in_a(4)==0){servo_put();lcd("Put     ");}
	}
    20f0:	e9 cf       	rjmp	.-46     	; 0x20c4 <chk_gripper+0xc>
}

void chk_gripper(){
	while(1){
		if(in_a(2)==0){servo_open();lcd("open      ");}
		else if(in_a(3)==0){servo_close();lcd("Close      ");}
    20f2:	83 e0       	ldi	r24, 0x03	; 3
    20f4:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    20f8:	88 23       	and	r24, r24
    20fa:	91 f4       	brne	.+36     	; 0x2120 <chk_gripper+0x68>
    20fc:	80 ed       	ldi	r24, 0xD0	; 208
    20fe:	91 e1       	ldi	r25, 0x11	; 17
    2100:	fc 01       	movw	r30, r24
    2102:	09 95       	icall
    2104:	00 d0       	rcall	.+0      	; 0x2106 <chk_gripper+0x4e>
    2106:	8d b7       	in	r24, 0x3d	; 61
    2108:	9e b7       	in	r25, 0x3e	; 62
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	27 ed       	ldi	r18, 0xD7	; 215
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	fc 01       	movw	r30, r24
    2112:	31 83       	std	Z+1, r19	; 0x01
    2114:	20 83       	st	Z, r18
    2116:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
		else if(in_a(4)==0){servo_put();lcd("Put     ");}
	}
    211e:	d2 cf       	rjmp	.-92     	; 0x20c4 <chk_gripper+0xc>

void chk_gripper(){
	while(1){
		if(in_a(2)==0){servo_open();lcd("open      ");}
		else if(in_a(3)==0){servo_close();lcd("Close      ");}
		else if(in_a(4)==0){servo_put();lcd("Put     ");}
    2120:	84 e0       	ldi	r24, 0x04	; 4
    2122:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    2126:	88 23       	and	r24, r24
    2128:	61 f6       	brne	.-104    	; 0x20c2 <chk_gripper+0xa>
    212a:	84 ef       	ldi	r24, 0xF4	; 244
    212c:	91 e1       	ldi	r25, 0x11	; 17
    212e:	fc 01       	movw	r30, r24
    2130:	09 95       	icall
    2132:	00 d0       	rcall	.+0      	; 0x2134 <chk_gripper+0x7c>
    2134:	8d b7       	in	r24, 0x3d	; 61
    2136:	9e b7       	in	r25, 0x3e	; 62
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	23 ee       	ldi	r18, 0xE3	; 227
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	fc 01       	movw	r30, r24
    2140:	31 83       	std	Z+1, r19	; 0x01
    2142:	20 83       	st	Z, r18
    2144:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
	}
    214c:	bb cf       	rjmp	.-138    	; 0x20c4 <chk_gripper+0xc>

0000214e <chk_infa>:
}

void chk_infa(){
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	00 d0       	rcall	.+0      	; 0x2154 <chk_infa+0x6>
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
	int dist;
	while(1){
		dist = getdist(6);
    2158:	86 e0       	ldi	r24, 0x06	; 6
    215a:	0e 94 2d 0c 	call	0x185a	; 0x185a <getdist>
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
		lcd("%d        ",dist);
    2162:	00 d0       	rcall	.+0      	; 0x2164 <chk_infa+0x16>
    2164:	00 d0       	rcall	.+0      	; 0x2166 <chk_infa+0x18>
    2166:	8d b7       	in	r24, 0x3d	; 61
    2168:	9e b7       	in	r25, 0x3e	; 62
    216a:	01 96       	adiw	r24, 0x01	; 1
    216c:	2c ee       	ldi	r18, 0xEC	; 236
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	fc 01       	movw	r30, r24
    2172:	31 83       	std	Z+1, r19	; 0x01
    2174:	20 83       	st	Z, r18
    2176:	29 81       	ldd	r18, Y+1	; 0x01
    2178:	3a 81       	ldd	r19, Y+2	; 0x02
    217a:	fc 01       	movw	r30, r24
    217c:	33 83       	std	Z+3, r19	; 0x03
    217e:	22 83       	std	Z+2, r18	; 0x02
    2180:	0e 94 ab 06 	call	0xd56	; 0xd56 <lcd>
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
		sleep(500);
    218c:	84 ef       	ldi	r24, 0xF4	; 244
    218e:	91 e0       	ldi	r25, 0x01	; 1
    2190:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	}
    2194:	e1 cf       	rjmp	.-62     	; 0x2158 <chk_infa+0xa>

00002196 <forward>:
}


/* Basic controll */
void forward(unsigned int delay){
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <forward+0x6>
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
	motor(1,POW);
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	6c e3       	ldi	r22, 0x3C	; 60
    21a8:	70 e0       	ldi	r23, 0x00	; 0
    21aa:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	motor(2,POW);
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	6c e3       	ldi	r22, 0x3C	; 60
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	sleep(delay);
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <backward>:

void backward(unsigned int delay){
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <backward+0x6>
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
	motor(1,-POW);
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	64 ec       	ldi	r22, 0xC4	; 196
    21dc:	7f ef       	ldi	r23, 0xFF	; 255
    21de:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	motor(2,-POW);
    21e2:	82 e0       	ldi	r24, 0x02	; 2
    21e4:	64 ec       	ldi	r22, 0xC4	; 196
    21e6:	7f ef       	ldi	r23, 0xFF	; 255
    21e8:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	sleep(delay);
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <turn_left>:

void turn_left(unsigned int delay){
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <turn_left+0x6>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
	motor(1,-POW);
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	64 ec       	ldi	r22, 0xC4	; 196
    2210:	7f ef       	ldi	r23, 0xFF	; 255
    2212:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	motor(2,POW);
    2216:	82 e0       	ldi	r24, 0x02	; 2
    2218:	6c e3       	ldi	r22, 0x3C	; 60
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	sleep(delay);
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <turn_right>:

void turn_right(unsigned int delay){
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <turn_right+0x6>
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
	motor(1,POW);
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	6c e3       	ldi	r22, 0x3C	; 60
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	motor(2,-POW);
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	64 ec       	ldi	r22, 0xC4	; 196
    224e:	7f ef       	ldi	r23, 0xFF	; 255
    2250:	0e 94 77 04 	call	0x8ee	; 0x8ee <motor>
	sleep(delay);
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <pause>:

void pause(delay){   
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <pause+0x6>
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
	motor_stop(ALL);
    2274:	83 e0       	ldi	r24, 0x03	; 3
    2276:	0e 94 cc 04 	call	0x998	; 0x998 <motor_stop>
	sleep(delay);
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <L90>:




/* Movement function */  
void L90(){
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
	forward(20);
    2294:	84 e1       	ldi	r24, 0x14	; 20
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	0e 94 cb 10 	call	0x2196	; 0x2196 <forward>
	while(L2>=REF){
    229c:	04 c0       	rjmp	.+8      	; 0x22a6 <L90+0x1a>
		turn_left(20);
    229e:	84 e1       	ldi	r24, 0x14	; 20
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 ff 10 	call	0x21fe	; 0x21fe <turn_left>


/* Movement function */  
void L90(){
	forward(20);
	while(L2>=REF){
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    22ac:	88 23       	and	r24, r24
    22ae:	b9 f7       	brne	.-18     	; 0x229e <L90+0x12>
		turn_left(20);
	}
	while(L2<REF){
    22b0:	04 c0       	rjmp	.+8      	; 0x22ba <L90+0x2e>
		turn_left(20);
    22b2:	84 e1       	ldi	r24, 0x14	; 20
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <turn_left>
void L90(){
	forward(20);
	while(L2>=REF){
		turn_left(20);
	}
	while(L2<REF){
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    22c0:	88 23       	and	r24, r24
    22c2:	b9 f3       	breq	.-18     	; 0x22b2 <L90+0x26>
		turn_left(20);
	}
	while(L1>=REF){
    22c4:	04 c0       	rjmp	.+8      	; 0x22ce <L90+0x42>
		turn_left(20);
    22c6:	84 e1       	ldi	r24, 0x14	; 20
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 ff 10 	call	0x21fe	; 0x21fe <turn_left>
		turn_left(20);
	}
	while(L2<REF){
		turn_left(20);
	}
	while(L1>=REF){
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    22d4:	88 23       	and	r24, r24
    22d6:	b9 f7       	brne	.-18     	; 0x22c6 <L90+0x3a>
		turn_left(20);
	}
	while(CC<REF){
    22d8:	04 c0       	rjmp	.+8      	; 0x22e2 <L90+0x56>
		forward(10);
    22da:	8a e0       	ldi	r24, 0x0A	; 10
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0e 94 cb 10 	call	0x2196	; 0x2196 <forward>
		turn_left(20);
	}
	while(L1>=REF){
		turn_left(20);
	}
	while(CC<REF){
    22e2:	85 e0       	ldi	r24, 0x05	; 5
    22e4:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    22e8:	88 23       	and	r24, r24
    22ea:	b9 f3       	breq	.-18     	; 0x22da <L90+0x4e>
		forward(10);
	}
	//pause(400);
			
}
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <R90>:

void R90(){
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
	forward(20);
    22fa:	84 e1       	ldi	r24, 0x14	; 20
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 cb 10 	call	0x2196	; 0x2196 <forward>
	while(R2>=REF){
    2302:	04 c0       	rjmp	.+8      	; 0x230c <R90+0x1a>
		turn_right(20);
    2304:	84 e1       	ldi	r24, 0x14	; 20
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 19 11 	call	0x2232	; 0x2232 <turn_right>
			
}

void R90(){
	forward(20);
	while(R2>=REF){
    230c:	84 e0       	ldi	r24, 0x04	; 4
    230e:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    2312:	88 23       	and	r24, r24
    2314:	b9 f7       	brne	.-18     	; 0x2304 <R90+0x12>
		turn_right(20);
	}
	while(R2<REF){
    2316:	04 c0       	rjmp	.+8      	; 0x2320 <R90+0x2e>
		turn_right(20);
    2318:	84 e1       	ldi	r24, 0x14	; 20
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 19 11 	call	0x2232	; 0x2232 <turn_right>
void R90(){
	forward(20);
	while(R2>=REF){
		turn_right(20);
	}
	while(R2<REF){
    2320:	84 e0       	ldi	r24, 0x04	; 4
    2322:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    2326:	88 23       	and	r24, r24
    2328:	b9 f3       	breq	.-18     	; 0x2318 <R90+0x26>
		turn_right(20);
	}
	while(R1>=REF){
    232a:	04 c0       	rjmp	.+8      	; 0x2334 <R90+0x42>
		turn_left(20);
    232c:	84 e1       	ldi	r24, 0x14	; 20
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 ff 10 	call	0x21fe	; 0x21fe <turn_left>
		turn_right(20);
	}
	while(R2<REF){
		turn_right(20);
	}
	while(R1>=REF){
    2334:	83 e0       	ldi	r24, 0x03	; 3
    2336:	0e 94 cd 01 	call	0x39a	; 0x39a <in_b>
    233a:	88 23       	and	r24, r24
    233c:	b9 f7       	brne	.-18     	; 0x232c <R90+0x3a>
		turn_left(20);
	}
	while(CC<REF){
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <R90+0x56>
		forward(10);
    2340:	8a e0       	ldi	r24, 0x0A	; 10
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 cb 10 	call	0x2196	; 0x2196 <forward>
		turn_right(20);
	}
	while(R1>=REF){
		turn_left(20);
	}
	while(CC<REF){
    2348:	85 e0       	ldi	r24, 0x05	; 5
    234a:	0e 94 92 01 	call	0x324	; 0x324 <in_a>
    234e:	88 23       	and	r24, r24
    2350:	b9 f3       	breq	.-18     	; 0x2340 <R90+0x4e>
		forward(10);
	}
	//pause(400);
	
		
}
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <servo_open>:

/* Gripper */
void servo_open(){
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
	servo(SERVO_GRP,SERVO_GRP_MAX);sleep(200);
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	66 e4       	ldi	r22, 0x46	; 70
    2364:	70 e0       	ldi	r23, 0x00	; 0
    2366:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    236a:	88 ec       	ldi	r24, 0xC8	; 200
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_ARM,SERVO_ARM_MIN);sleep(200);
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	64 e1       	ldi	r22, 0x14	; 20
    2376:	70 e0       	ldi	r23, 0x00	; 0
    2378:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    237c:	88 ec       	ldi	r24, 0xC8	; 200
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_ARM,SERVO_ARM_MIN);sleep(200);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	64 e1       	ldi	r22, 0x14	; 20
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    238e:	88 ec       	ldi	r24, 0xC8	; 200
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo_stop();
    2396:	0e 94 c7 09 	call	0x138e	; 0x138e <servo_stop>
}
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <servo_close>:

void servo_close(){
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
	servo(SERVO_GRP,SERVO_GRP_MIN);sleep(200);
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	69 e1       	ldi	r22, 0x19	; 25
    23ac:	70 e0       	ldi	r23, 0x00	; 0
    23ae:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    23b2:	88 ec       	ldi	r24, 0xC8	; 200
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_ARM,SERVO_ARM_MAX);sleep(200);
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	68 e2       	ldi	r22, 0x28	; 40
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    23c4:	88 ec       	ldi	r24, 0xC8	; 200
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_ARM,SERVO_ARM_MAX);sleep(200);
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	68 e2       	ldi	r22, 0x28	; 40
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    23d6:	88 ec       	ldi	r24, 0xC8	; 200
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo_stop();
    23de:	0e 94 c7 09 	call	0x138e	; 0x138e <servo_stop>
}
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <servo_put>:

void servo_put(){
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
	servo(SERVO_ARM,SERVO_ARM_MIN);sleep(200);
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	64 e1       	ldi	r22, 0x14	; 20
    23f4:	70 e0       	ldi	r23, 0x00	; 0
    23f6:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    23fa:	88 ec       	ldi	r24, 0xC8	; 200
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_GRP,SERVO_GRP_MAX);sleep(200);
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	66 e4       	ldi	r22, 0x46	; 70
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    240c:	88 ec       	ldi	r24, 0xC8	; 200
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo(SERVO_GRP,SERVO_GRP_MAX);sleep(200);
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	66 e4       	ldi	r22, 0x46	; 70
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <servo>
    241e:	88 ec       	ldi	r24, 0xC8	; 200
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sleep>
	servo_stop();
    2426:	0e 94 c7 09 	call	0x138e	; 0x138e <servo_stop>
}
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <__udivmodhi4>:
    2430:	aa 1b       	sub	r26, r26
    2432:	bb 1b       	sub	r27, r27
    2434:	51 e1       	ldi	r21, 0x11	; 17
    2436:	07 c0       	rjmp	.+14     	; 0x2446 <__udivmodhi4_ep>

00002438 <__udivmodhi4_loop>:
    2438:	aa 1f       	adc	r26, r26
    243a:	bb 1f       	adc	r27, r27
    243c:	a6 17       	cp	r26, r22
    243e:	b7 07       	cpc	r27, r23
    2440:	10 f0       	brcs	.+4      	; 0x2446 <__udivmodhi4_ep>
    2442:	a6 1b       	sub	r26, r22
    2444:	b7 0b       	sbc	r27, r23

00002446 <__udivmodhi4_ep>:
    2446:	88 1f       	adc	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	5a 95       	dec	r21
    244c:	a9 f7       	brne	.-22     	; 0x2438 <__udivmodhi4_loop>
    244e:	80 95       	com	r24
    2450:	90 95       	com	r25
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	08 95       	ret

00002458 <__divmodhi4>:
    2458:	97 fb       	bst	r25, 7
    245a:	09 2e       	mov	r0, r25
    245c:	07 26       	eor	r0, r23
    245e:	0a d0       	rcall	.+20     	; 0x2474 <__divmodhi4_neg1>
    2460:	77 fd       	sbrc	r23, 7
    2462:	04 d0       	rcall	.+8      	; 0x246c <__divmodhi4_neg2>
    2464:	e5 df       	rcall	.-54     	; 0x2430 <__udivmodhi4>
    2466:	06 d0       	rcall	.+12     	; 0x2474 <__divmodhi4_neg1>
    2468:	00 20       	and	r0, r0
    246a:	1a f4       	brpl	.+6      	; 0x2472 <__divmodhi4_exit>

0000246c <__divmodhi4_neg2>:
    246c:	70 95       	com	r23
    246e:	61 95       	neg	r22
    2470:	7f 4f       	sbci	r23, 0xFF	; 255

00002472 <__divmodhi4_exit>:
    2472:	08 95       	ret

00002474 <__divmodhi4_neg1>:
    2474:	f6 f7       	brtc	.-4      	; 0x2472 <__divmodhi4_exit>
    2476:	90 95       	com	r25
    2478:	81 95       	neg	r24
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	08 95       	ret

0000247e <dtostrf>:
    247e:	ef 92       	push	r14
    2480:	ff 92       	push	r15
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	32 2f       	mov	r19, r18
    2488:	f0 2e       	mov	r15, r16
    248a:	47 ff       	sbrs	r20, 7
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <dtostrf+0x14>
    248e:	a4 e1       	ldi	r26, 0x14	; 20
    2490:	01 c0       	rjmp	.+2      	; 0x2494 <dtostrf+0x16>
    2492:	a4 e0       	ldi	r26, 0x04	; 4
    2494:	e4 2f       	mov	r30, r20
    2496:	ff 27       	eor	r31, r31
    2498:	e7 fd       	sbrc	r30, 7
    249a:	f0 95       	com	r31
    249c:	f7 ff       	sbrs	r31, 7
    249e:	03 c0       	rjmp	.+6      	; 0x24a6 <dtostrf+0x28>
    24a0:	f0 95       	com	r31
    24a2:	e1 95       	neg	r30
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	4f 2d       	mov	r20, r15
    24a8:	51 2f       	mov	r21, r17
    24aa:	2e 2f       	mov	r18, r30
    24ac:	03 2f       	mov	r16, r19
    24ae:	ea 2e       	mov	r14, r26
    24b0:	0e 94 95 12 	call	0x252a	; 0x252a <dtoa_prf>
    24b4:	8f 2d       	mov	r24, r15
    24b6:	91 2f       	mov	r25, r17
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	08 95       	ret

000024c2 <ltoa>:
    24c2:	fa 01       	movw	r30, r20
    24c4:	cf 93       	push	r28
    24c6:	ff 93       	push	r31
    24c8:	ef 93       	push	r30
    24ca:	22 30       	cpi	r18, 0x02	; 2
    24cc:	44 f1       	brlt	.+80     	; 0x251e <ltoa+0x5c>
    24ce:	25 32       	cpi	r18, 0x25	; 37
    24d0:	34 f5       	brge	.+76     	; 0x251e <ltoa+0x5c>
    24d2:	c2 2f       	mov	r28, r18
    24d4:	e8 94       	clt
    24d6:	ca 30       	cpi	r28, 0x0A	; 10
    24d8:	49 f4       	brne	.+18     	; 0x24ec <ltoa+0x2a>
    24da:	97 fb       	bst	r25, 7
    24dc:	3e f4       	brtc	.+14     	; 0x24ec <ltoa+0x2a>
    24de:	90 95       	com	r25
    24e0:	80 95       	com	r24
    24e2:	70 95       	com	r23
    24e4:	61 95       	neg	r22
    24e6:	7f 4f       	sbci	r23, 0xFF	; 255
    24e8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ea:	9f 4f       	sbci	r25, 0xFF	; 255
    24ec:	2c 2f       	mov	r18, r28
    24ee:	33 27       	eor	r19, r19
    24f0:	44 27       	eor	r20, r20
    24f2:	55 27       	eor	r21, r21
    24f4:	ff 93       	push	r31
    24f6:	ef 93       	push	r30
    24f8:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__udivmodsi4>
    24fc:	ef 91       	pop	r30
    24fe:	ff 91       	pop	r31
    2500:	60 5d       	subi	r22, 0xD0	; 208
    2502:	6a 33       	cpi	r22, 0x3A	; 58
    2504:	0c f0       	brlt	.+2      	; 0x2508 <ltoa+0x46>
    2506:	69 5d       	subi	r22, 0xD9	; 217
    2508:	61 93       	st	Z+, r22
    250a:	b9 01       	movw	r22, r18
    250c:	ca 01       	movw	r24, r20
    250e:	60 50       	subi	r22, 0x00	; 0
    2510:	70 40       	sbci	r23, 0x00	; 0
    2512:	80 40       	sbci	r24, 0x00	; 0
    2514:	90 40       	sbci	r25, 0x00	; 0
    2516:	51 f7       	brne	.-44     	; 0x24ec <ltoa+0x2a>
    2518:	16 f4       	brtc	.+4      	; 0x251e <ltoa+0x5c>
    251a:	cd e2       	ldi	r28, 0x2D	; 45
    251c:	c1 93       	st	Z+, r28
    251e:	10 82       	st	Z, r1
    2520:	8f 91       	pop	r24
    2522:	9f 91       	pop	r25
    2524:	cf 91       	pop	r28
    2526:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <strrev>

0000252a <dtoa_prf>:
    252a:	a9 e0       	ldi	r26, 0x09	; 9
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	eb e9       	ldi	r30, 0x9B	; 155
    2530:	f2 e1       	ldi	r31, 0x12	; 18
    2532:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__prologue_saves__+0x10>
    2536:	6a 01       	movw	r12, r20
    2538:	f2 2e       	mov	r15, r18
    253a:	10 2f       	mov	r17, r16
    253c:	0c 33       	cpi	r16, 0x3C	; 60
    253e:	18 f4       	brcc	.+6      	; 0x2546 <dtoa_prf+0x1c>
    2540:	b0 2e       	mov	r11, r16
    2542:	b3 94       	inc	r11
    2544:	02 c0       	rjmp	.+4      	; 0x254a <dtoa_prf+0x20>
    2546:	ec e3       	ldi	r30, 0x3C	; 60
    2548:	be 2e       	mov	r11, r30
    254a:	ae 01       	movw	r20, r28
    254c:	4f 5f       	subi	r20, 0xFF	; 255
    254e:	5f 4f       	sbci	r21, 0xFF	; 255
    2550:	27 e0       	ldi	r18, 0x07	; 7
    2552:	0b 2d       	mov	r16, r11
    2554:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__ftoa_engine>
    2558:	29 81       	ldd	r18, Y+1	; 0x01
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	a9 01       	movw	r20, r18
    255e:	49 70       	andi	r20, 0x09	; 9
    2560:	50 70       	andi	r21, 0x00	; 0
    2562:	41 30       	cpi	r20, 0x01	; 1
    2564:	51 05       	cpc	r21, r1
    2566:	31 f0       	breq	.+12     	; 0x2574 <dtoa_prf+0x4a>
    2568:	e1 fc       	sbrc	r14, 1
    256a:	06 c0       	rjmp	.+12     	; 0x2578 <dtoa_prf+0x4e>
    256c:	e0 fe       	sbrs	r14, 0
    256e:	06 c0       	rjmp	.+12     	; 0x257c <dtoa_prf+0x52>
    2570:	e0 e2       	ldi	r30, 0x20	; 32
    2572:	05 c0       	rjmp	.+10     	; 0x257e <dtoa_prf+0x54>
    2574:	ed e2       	ldi	r30, 0x2D	; 45
    2576:	03 c0       	rjmp	.+6      	; 0x257e <dtoa_prf+0x54>
    2578:	eb e2       	ldi	r30, 0x2B	; 43
    257a:	01 c0       	rjmp	.+2      	; 0x257e <dtoa_prf+0x54>
    257c:	e0 e0       	ldi	r30, 0x00	; 0
    257e:	23 ff       	sbrs	r18, 3
    2580:	37 c0       	rjmp	.+110    	; 0x25f0 <dtoa_prf+0xc6>
    2582:	ee 23       	and	r30, r30
    2584:	11 f0       	breq	.+4      	; 0x258a <dtoa_prf+0x60>
    2586:	84 e0       	ldi	r24, 0x04	; 4
    2588:	01 c0       	rjmp	.+2      	; 0x258c <dtoa_prf+0x62>
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	8f 15       	cp	r24, r15
    258e:	18 f4       	brcc	.+6      	; 0x2596 <dtoa_prf+0x6c>
    2590:	f8 1a       	sub	r15, r24
    2592:	8f 2d       	mov	r24, r15
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <dtoa_prf+0x6e>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	e4 fc       	sbrc	r14, 4
    259a:	0b c0       	rjmp	.+22     	; 0x25b2 <dtoa_prf+0x88>
    259c:	98 2f       	mov	r25, r24
    259e:	d6 01       	movw	r26, r12
    25a0:	20 e2       	ldi	r18, 0x20	; 32
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <dtoa_prf+0x7e>
    25a4:	2d 93       	st	X+, r18
    25a6:	91 50       	subi	r25, 0x01	; 1
    25a8:	99 23       	and	r25, r25
    25aa:	e1 f7       	brne	.-8      	; 0x25a4 <dtoa_prf+0x7a>
    25ac:	c8 0e       	add	r12, r24
    25ae:	d1 1c       	adc	r13, r1
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	ee 23       	and	r30, r30
    25b4:	19 f0       	breq	.+6      	; 0x25bc <dtoa_prf+0x92>
    25b6:	d6 01       	movw	r26, r12
    25b8:	ed 93       	st	X+, r30
    25ba:	6d 01       	movw	r12, r26
    25bc:	f6 01       	movw	r30, r12
    25be:	31 96       	adiw	r30, 0x01	; 1
    25c0:	e2 fe       	sbrs	r14, 2
    25c2:	05 c0       	rjmp	.+10     	; 0x25ce <dtoa_prf+0xa4>
    25c4:	9e e4       	ldi	r25, 0x4E	; 78
    25c6:	d6 01       	movw	r26, r12
    25c8:	9c 93       	st	X, r25
    25ca:	21 e4       	ldi	r18, 0x41	; 65
    25cc:	04 c0       	rjmp	.+8      	; 0x25d6 <dtoa_prf+0xac>
    25ce:	9e e6       	ldi	r25, 0x6E	; 110
    25d0:	d6 01       	movw	r26, r12
    25d2:	9c 93       	st	X, r25
    25d4:	21 e6       	ldi	r18, 0x61	; 97
    25d6:	11 96       	adiw	r26, 0x01	; 1
    25d8:	2c 93       	st	X, r18
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	32 96       	adiw	r30, 0x02	; 2
    25de:	98 2f       	mov	r25, r24
    25e0:	df 01       	movw	r26, r30
    25e2:	20 e2       	ldi	r18, 0x20	; 32
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <dtoa_prf+0xc0>
    25e6:	2d 93       	st	X+, r18
    25e8:	91 50       	subi	r25, 0x01	; 1
    25ea:	99 23       	and	r25, r25
    25ec:	e1 f7       	brne	.-8      	; 0x25e6 <dtoa_prf+0xbc>
    25ee:	3d c0       	rjmp	.+122    	; 0x266a <dtoa_prf+0x140>
    25f0:	22 ff       	sbrs	r18, 2
    25f2:	41 c0       	rjmp	.+130    	; 0x2676 <dtoa_prf+0x14c>
    25f4:	ee 23       	and	r30, r30
    25f6:	11 f0       	breq	.+4      	; 0x25fc <dtoa_prf+0xd2>
    25f8:	84 e0       	ldi	r24, 0x04	; 4
    25fa:	01 c0       	rjmp	.+2      	; 0x25fe <dtoa_prf+0xd4>
    25fc:	83 e0       	ldi	r24, 0x03	; 3
    25fe:	8f 15       	cp	r24, r15
    2600:	18 f4       	brcc	.+6      	; 0x2608 <dtoa_prf+0xde>
    2602:	f8 1a       	sub	r15, r24
    2604:	8f 2d       	mov	r24, r15
    2606:	01 c0       	rjmp	.+2      	; 0x260a <dtoa_prf+0xe0>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	e4 fc       	sbrc	r14, 4
    260c:	0b c0       	rjmp	.+22     	; 0x2624 <dtoa_prf+0xfa>
    260e:	98 2f       	mov	r25, r24
    2610:	d6 01       	movw	r26, r12
    2612:	20 e2       	ldi	r18, 0x20	; 32
    2614:	02 c0       	rjmp	.+4      	; 0x261a <dtoa_prf+0xf0>
    2616:	2d 93       	st	X+, r18
    2618:	91 50       	subi	r25, 0x01	; 1
    261a:	99 23       	and	r25, r25
    261c:	e1 f7       	brne	.-8      	; 0x2616 <dtoa_prf+0xec>
    261e:	c8 0e       	add	r12, r24
    2620:	d1 1c       	adc	r13, r1
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	ee 23       	and	r30, r30
    2626:	19 f0       	breq	.+6      	; 0x262e <dtoa_prf+0x104>
    2628:	d6 01       	movw	r26, r12
    262a:	ed 93       	st	X+, r30
    262c:	6d 01       	movw	r12, r26
    262e:	f6 01       	movw	r30, r12
    2630:	31 96       	adiw	r30, 0x01	; 1
    2632:	e2 fe       	sbrs	r14, 2
    2634:	09 c0       	rjmp	.+18     	; 0x2648 <dtoa_prf+0x11e>
    2636:	99 e4       	ldi	r25, 0x49	; 73
    2638:	d6 01       	movw	r26, r12
    263a:	9c 93       	st	X, r25
    263c:	9e e4       	ldi	r25, 0x4E	; 78
    263e:	11 96       	adiw	r26, 0x01	; 1
    2640:	9c 93       	st	X, r25
    2642:	11 97       	sbiw	r26, 0x01	; 1
    2644:	96 e4       	ldi	r25, 0x46	; 70
    2646:	07 c0       	rjmp	.+14     	; 0x2656 <dtoa_prf+0x12c>
    2648:	99 e6       	ldi	r25, 0x69	; 105
    264a:	d6 01       	movw	r26, r12
    264c:	9c 93       	st	X, r25
    264e:	9e e6       	ldi	r25, 0x6E	; 110
    2650:	11 96       	adiw	r26, 0x01	; 1
    2652:	9c 93       	st	X, r25
    2654:	96 e6       	ldi	r25, 0x66	; 102
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	32 96       	adiw	r30, 0x02	; 2
    265a:	98 2f       	mov	r25, r24
    265c:	df 01       	movw	r26, r30
    265e:	20 e2       	ldi	r18, 0x20	; 32
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <dtoa_prf+0x13c>
    2662:	2d 93       	st	X+, r18
    2664:	91 50       	subi	r25, 0x01	; 1
    2666:	99 23       	and	r25, r25
    2668:	e1 f7       	brne	.-8      	; 0x2662 <dtoa_prf+0x138>
    266a:	e8 0f       	add	r30, r24
    266c:	f1 1d       	adc	r31, r1
    266e:	10 82       	st	Z, r1
    2670:	2e ef       	ldi	r18, 0xFE	; 254
    2672:	3f ef       	ldi	r19, 0xFF	; 255
    2674:	ac c0       	rjmp	.+344    	; 0x27ce <dtoa_prf+0x2a4>
    2676:	41 e0       	ldi	r20, 0x01	; 1
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	ee 23       	and	r30, r30
    267c:	11 f4       	brne	.+4      	; 0x2682 <dtoa_prf+0x158>
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	18 16       	cp	r1, r24
    2684:	19 06       	cpc	r1, r25
    2686:	24 f4       	brge	.+8      	; 0x2690 <dtoa_prf+0x166>
    2688:	bc 01       	movw	r22, r24
    268a:	6f 5f       	subi	r22, 0xFF	; 255
    268c:	7f 4f       	sbci	r23, 0xFF	; 255
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <dtoa_prf+0x16a>
    2690:	61 e0       	ldi	r22, 0x01	; 1
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	64 0f       	add	r22, r20
    2696:	75 1f       	adc	r23, r21
    2698:	11 23       	and	r17, r17
    269a:	29 f0       	breq	.+10     	; 0x26a6 <dtoa_prf+0x17c>
    269c:	41 2f       	mov	r20, r17
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	4f 5f       	subi	r20, 0xFF	; 255
    26a2:	5f 4f       	sbci	r21, 0xFF	; 255
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <dtoa_prf+0x180>
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	46 0f       	add	r20, r22
    26ac:	57 1f       	adc	r21, r23
    26ae:	6f 2d       	mov	r22, r15
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	46 17       	cp	r20, r22
    26b4:	57 07       	cpc	r21, r23
    26b6:	1c f4       	brge	.+6      	; 0x26be <dtoa_prf+0x194>
    26b8:	0f 2d       	mov	r16, r15
    26ba:	04 1b       	sub	r16, r20
    26bc:	01 c0       	rjmp	.+2      	; 0x26c0 <dtoa_prf+0x196>
    26be:	00 e0       	ldi	r16, 0x00	; 0
    26c0:	ff 24       	eor	r15, r15
    26c2:	a7 01       	movw	r20, r14
    26c4:	40 71       	andi	r20, 0x10	; 16
    26c6:	50 70       	andi	r21, 0x00	; 0
    26c8:	e4 fc       	sbrc	r14, 4
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <dtoa_prf+0x1bc>
    26cc:	e3 fc       	sbrc	r14, 3
    26ce:	0b c0       	rjmp	.+22     	; 0x26e6 <dtoa_prf+0x1bc>
    26d0:	60 2f       	mov	r22, r16
    26d2:	d6 01       	movw	r26, r12
    26d4:	70 e2       	ldi	r23, 0x20	; 32
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <dtoa_prf+0x1b2>
    26d8:	7d 93       	st	X+, r23
    26da:	61 50       	subi	r22, 0x01	; 1
    26dc:	66 23       	and	r22, r22
    26de:	e1 f7       	brne	.-8      	; 0x26d8 <dtoa_prf+0x1ae>
    26e0:	c0 0e       	add	r12, r16
    26e2:	d1 1c       	adc	r13, r1
    26e4:	00 e0       	ldi	r16, 0x00	; 0
    26e6:	ee 23       	and	r30, r30
    26e8:	19 f0       	breq	.+6      	; 0x26f0 <dtoa_prf+0x1c6>
    26ea:	d6 01       	movw	r26, r12
    26ec:	ed 93       	st	X+, r30
    26ee:	6d 01       	movw	r12, r26
    26f0:	41 15       	cp	r20, r1
    26f2:	51 05       	cpc	r21, r1
    26f4:	59 f4       	brne	.+22     	; 0x270c <dtoa_prf+0x1e2>
    26f6:	40 2f       	mov	r20, r16
    26f8:	f6 01       	movw	r30, r12
    26fa:	50 e3       	ldi	r21, 0x30	; 48
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <dtoa_prf+0x1d8>
    26fe:	51 93       	st	Z+, r21
    2700:	41 50       	subi	r20, 0x01	; 1
    2702:	44 23       	and	r20, r20
    2704:	e1 f7       	brne	.-8      	; 0x26fe <dtoa_prf+0x1d4>
    2706:	c0 0e       	add	r12, r16
    2708:	d1 1c       	adc	r13, r1
    270a:	00 e0       	ldi	r16, 0x00	; 0
    270c:	b8 0e       	add	r11, r24
    270e:	fa 80       	ldd	r15, Y+2	; 0x02
    2710:	a9 01       	movw	r20, r18
    2712:	40 71       	andi	r20, 0x10	; 16
    2714:	50 70       	andi	r21, 0x00	; 0
    2716:	24 ff       	sbrs	r18, 4
    2718:	04 c0       	rjmp	.+8      	; 0x2722 <dtoa_prf+0x1f8>
    271a:	bf 2d       	mov	r27, r15
    271c:	b1 33       	cpi	r27, 0x31	; 49
    271e:	09 f4       	brne	.+2      	; 0x2722 <dtoa_prf+0x1f8>
    2720:	ba 94       	dec	r11
    2722:	1b 14       	cp	r1, r11
    2724:	2c f4       	brge	.+10     	; 0x2730 <dtoa_prf+0x206>
    2726:	ab 2d       	mov	r26, r11
    2728:	a9 30       	cpi	r26, 0x09	; 9
    272a:	18 f0       	brcs	.+6      	; 0x2732 <dtoa_prf+0x208>
    272c:	a8 e0       	ldi	r26, 0x08	; 8
    272e:	01 c0       	rjmp	.+2      	; 0x2732 <dtoa_prf+0x208>
    2730:	a1 e0       	ldi	r26, 0x01	; 1
    2732:	9c 01       	movw	r18, r24
    2734:	97 ff       	sbrs	r25, 7
    2736:	02 c0       	rjmp	.+4      	; 0x273c <dtoa_prf+0x212>
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	bc 01       	movw	r22, r24
    273e:	6f 5f       	subi	r22, 0xFF	; 255
    2740:	7f 4f       	sbci	r23, 0xFF	; 255
    2742:	62 1b       	sub	r22, r18
    2744:	73 0b       	sbc	r23, r19
    2746:	fe 01       	movw	r30, r28
    2748:	31 96       	adiw	r30, 0x01	; 1
    274a:	e6 0f       	add	r30, r22
    274c:	f7 1f       	adc	r31, r23
    274e:	6e e2       	ldi	r22, 0x2E	; 46
    2750:	e6 2e       	mov	r14, r22
    2752:	bc 01       	movw	r22, r24
    2754:	6a 1b       	sub	r22, r26
    2756:	71 09       	sbc	r23, r1
    2758:	a1 2f       	mov	r26, r17
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	aa 24       	eor	r10, r10
    275e:	bb 24       	eor	r11, r11
    2760:	aa 1a       	sub	r10, r26
    2762:	bb 0a       	sbc	r11, r27
    2764:	1f ef       	ldi	r17, 0xFF	; 255
    2766:	2f 3f       	cpi	r18, 0xFF	; 255
    2768:	31 07       	cpc	r19, r17
    276a:	19 f4       	brne	.+6      	; 0x2772 <dtoa_prf+0x248>
    276c:	d6 01       	movw	r26, r12
    276e:	ed 92       	st	X+, r14
    2770:	6d 01       	movw	r12, r26
    2772:	82 17       	cp	r24, r18
    2774:	93 07       	cpc	r25, r19
    2776:	2c f0       	brlt	.+10     	; 0x2782 <dtoa_prf+0x258>
    2778:	62 17       	cp	r22, r18
    277a:	73 07       	cpc	r23, r19
    277c:	14 f4       	brge	.+4      	; 0x2782 <dtoa_prf+0x258>
    277e:	10 81       	ld	r17, Z
    2780:	01 c0       	rjmp	.+2      	; 0x2784 <dtoa_prf+0x25a>
    2782:	10 e3       	ldi	r17, 0x30	; 48
    2784:	21 50       	subi	r18, 0x01	; 1
    2786:	30 40       	sbci	r19, 0x00	; 0
    2788:	31 96       	adiw	r30, 0x01	; 1
    278a:	2a 15       	cp	r18, r10
    278c:	3b 05       	cpc	r19, r11
    278e:	24 f0       	brlt	.+8      	; 0x2798 <dtoa_prf+0x26e>
    2790:	d6 01       	movw	r26, r12
    2792:	1d 93       	st	X+, r17
    2794:	6d 01       	movw	r12, r26
    2796:	e6 cf       	rjmp	.-52     	; 0x2764 <dtoa_prf+0x23a>
    2798:	28 17       	cp	r18, r24
    279a:	39 07       	cpc	r19, r25
    279c:	49 f4       	brne	.+18     	; 0x27b0 <dtoa_prf+0x286>
    279e:	bf 2d       	mov	r27, r15
    27a0:	b6 33       	cpi	r27, 0x36	; 54
    27a2:	28 f4       	brcc	.+10     	; 0x27ae <dtoa_prf+0x284>
    27a4:	b5 33       	cpi	r27, 0x35	; 53
    27a6:	21 f4       	brne	.+8      	; 0x27b0 <dtoa_prf+0x286>
    27a8:	41 15       	cp	r20, r1
    27aa:	51 05       	cpc	r21, r1
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <dtoa_prf+0x286>
    27ae:	11 e3       	ldi	r17, 0x31	; 49
    27b0:	f6 01       	movw	r30, r12
    27b2:	11 93       	st	Z+, r17
    27b4:	80 2f       	mov	r24, r16
    27b6:	df 01       	movw	r26, r30
    27b8:	90 e2       	ldi	r25, 0x20	; 32
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <dtoa_prf+0x296>
    27bc:	9d 93       	st	X+, r25
    27be:	81 50       	subi	r24, 0x01	; 1
    27c0:	88 23       	and	r24, r24
    27c2:	e1 f7       	brne	.-8      	; 0x27bc <dtoa_prf+0x292>
    27c4:	e0 0f       	add	r30, r16
    27c6:	f1 1d       	adc	r31, r1
    27c8:	10 82       	st	Z, r1
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	c9 01       	movw	r24, r18
    27d0:	29 96       	adiw	r28, 0x09	; 9
    27d2:	ea e0       	ldi	r30, 0x0A	; 10
    27d4:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__epilogue_restores__+0x10>

000027d8 <__ftoa_engine>:
    27d8:	28 30       	cpi	r18, 0x08	; 8
    27da:	08 f0       	brcs	.+2      	; 0x27de <__ftoa_engine+0x6>
    27dc:	27 e0       	ldi	r18, 0x07	; 7
    27de:	33 27       	eor	r19, r19
    27e0:	da 01       	movw	r26, r20
    27e2:	99 0f       	add	r25, r25
    27e4:	31 1d       	adc	r19, r1
    27e6:	87 fd       	sbrc	r24, 7
    27e8:	91 60       	ori	r25, 0x01	; 1
    27ea:	00 96       	adiw	r24, 0x00	; 0
    27ec:	61 05       	cpc	r22, r1
    27ee:	71 05       	cpc	r23, r1
    27f0:	39 f4       	brne	.+14     	; 0x2800 <__ftoa_engine+0x28>
    27f2:	32 60       	ori	r19, 0x02	; 2
    27f4:	2e 5f       	subi	r18, 0xFE	; 254
    27f6:	3d 93       	st	X+, r19
    27f8:	30 e3       	ldi	r19, 0x30	; 48
    27fa:	2a 95       	dec	r18
    27fc:	e1 f7       	brne	.-8      	; 0x27f6 <__ftoa_engine+0x1e>
    27fe:	08 95       	ret
    2800:	9f 3f       	cpi	r25, 0xFF	; 255
    2802:	30 f0       	brcs	.+12     	; 0x2810 <__ftoa_engine+0x38>
    2804:	80 38       	cpi	r24, 0x80	; 128
    2806:	71 05       	cpc	r23, r1
    2808:	61 05       	cpc	r22, r1
    280a:	09 f0       	breq	.+2      	; 0x280e <__ftoa_engine+0x36>
    280c:	3c 5f       	subi	r19, 0xFC	; 252
    280e:	3c 5f       	subi	r19, 0xFC	; 252
    2810:	3d 93       	st	X+, r19
    2812:	91 30       	cpi	r25, 0x01	; 1
    2814:	08 f0       	brcs	.+2      	; 0x2818 <__ftoa_engine+0x40>
    2816:	80 68       	ori	r24, 0x80	; 128
    2818:	91 1d       	adc	r25, r1
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	1f 93       	push	r17
    2820:	0f 93       	push	r16
    2822:	ff 92       	push	r15
    2824:	ef 92       	push	r14
    2826:	19 2f       	mov	r17, r25
    2828:	98 7f       	andi	r25, 0xF8	; 248
    282a:	96 95       	lsr	r25
    282c:	e9 2f       	mov	r30, r25
    282e:	96 95       	lsr	r25
    2830:	96 95       	lsr	r25
    2832:	e9 0f       	add	r30, r25
    2834:	ff 27       	eor	r31, r31
    2836:	e2 55       	subi	r30, 0x52	; 82
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	99 27       	eor	r25, r25
    283c:	33 27       	eor	r19, r19
    283e:	ee 24       	eor	r14, r14
    2840:	ff 24       	eor	r15, r15
    2842:	a7 01       	movw	r20, r14
    2844:	e7 01       	movw	r28, r14
    2846:	05 90       	lpm	r0, Z+
    2848:	08 94       	sec
    284a:	07 94       	ror	r0
    284c:	28 f4       	brcc	.+10     	; 0x2858 <__ftoa_engine+0x80>
    284e:	36 0f       	add	r19, r22
    2850:	e7 1e       	adc	r14, r23
    2852:	f8 1e       	adc	r15, r24
    2854:	49 1f       	adc	r20, r25
    2856:	51 1d       	adc	r21, r1
    2858:	66 0f       	add	r22, r22
    285a:	77 1f       	adc	r23, r23
    285c:	88 1f       	adc	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	06 94       	lsr	r0
    2862:	a1 f7       	brne	.-24     	; 0x284c <__ftoa_engine+0x74>
    2864:	05 90       	lpm	r0, Z+
    2866:	07 94       	ror	r0
    2868:	28 f4       	brcc	.+10     	; 0x2874 <__ftoa_engine+0x9c>
    286a:	e7 0e       	add	r14, r23
    286c:	f8 1e       	adc	r15, r24
    286e:	49 1f       	adc	r20, r25
    2870:	56 1f       	adc	r21, r22
    2872:	c1 1d       	adc	r28, r1
    2874:	77 0f       	add	r23, r23
    2876:	88 1f       	adc	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	66 1f       	adc	r22, r22
    287c:	06 94       	lsr	r0
    287e:	a1 f7       	brne	.-24     	; 0x2868 <__ftoa_engine+0x90>
    2880:	05 90       	lpm	r0, Z+
    2882:	07 94       	ror	r0
    2884:	28 f4       	brcc	.+10     	; 0x2890 <__ftoa_engine+0xb8>
    2886:	f8 0e       	add	r15, r24
    2888:	49 1f       	adc	r20, r25
    288a:	56 1f       	adc	r21, r22
    288c:	c7 1f       	adc	r28, r23
    288e:	d1 1d       	adc	r29, r1
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	66 1f       	adc	r22, r22
    2896:	77 1f       	adc	r23, r23
    2898:	06 94       	lsr	r0
    289a:	a1 f7       	brne	.-24     	; 0x2884 <__ftoa_engine+0xac>
    289c:	05 90       	lpm	r0, Z+
    289e:	07 94       	ror	r0
    28a0:	20 f4       	brcc	.+8      	; 0x28aa <__ftoa_engine+0xd2>
    28a2:	49 0f       	add	r20, r25
    28a4:	56 1f       	adc	r21, r22
    28a6:	c7 1f       	adc	r28, r23
    28a8:	d8 1f       	adc	r29, r24
    28aa:	99 0f       	add	r25, r25
    28ac:	66 1f       	adc	r22, r22
    28ae:	77 1f       	adc	r23, r23
    28b0:	88 1f       	adc	r24, r24
    28b2:	06 94       	lsr	r0
    28b4:	a9 f7       	brne	.-22     	; 0x28a0 <__ftoa_engine+0xc8>
    28b6:	84 91       	lpm	r24, Z+
    28b8:	10 95       	com	r17
    28ba:	17 70       	andi	r17, 0x07	; 7
    28bc:	41 f0       	breq	.+16     	; 0x28ce <__ftoa_engine+0xf6>
    28be:	d6 95       	lsr	r29
    28c0:	c7 95       	ror	r28
    28c2:	57 95       	ror	r21
    28c4:	47 95       	ror	r20
    28c6:	f7 94       	ror	r15
    28c8:	e7 94       	ror	r14
    28ca:	1a 95       	dec	r17
    28cc:	c1 f7       	brne	.-16     	; 0x28be <__ftoa_engine+0xe6>
    28ce:	e4 e5       	ldi	r30, 0x54	; 84
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	68 94       	set
    28d4:	15 90       	lpm	r1, Z+
    28d6:	15 91       	lpm	r17, Z+
    28d8:	35 91       	lpm	r19, Z+
    28da:	65 91       	lpm	r22, Z+
    28dc:	95 91       	lpm	r25, Z+
    28de:	05 90       	lpm	r0, Z+
    28e0:	7f e2       	ldi	r23, 0x2F	; 47
    28e2:	73 95       	inc	r23
    28e4:	e1 18       	sub	r14, r1
    28e6:	f1 0a       	sbc	r15, r17
    28e8:	43 0b       	sbc	r20, r19
    28ea:	56 0b       	sbc	r21, r22
    28ec:	c9 0b       	sbc	r28, r25
    28ee:	d0 09       	sbc	r29, r0
    28f0:	c0 f7       	brcc	.-16     	; 0x28e2 <__ftoa_engine+0x10a>
    28f2:	e1 0c       	add	r14, r1
    28f4:	f1 1e       	adc	r15, r17
    28f6:	43 1f       	adc	r20, r19
    28f8:	56 1f       	adc	r21, r22
    28fa:	c9 1f       	adc	r28, r25
    28fc:	d0 1d       	adc	r29, r0
    28fe:	7e f4       	brtc	.+30     	; 0x291e <__ftoa_engine+0x146>
    2900:	70 33       	cpi	r23, 0x30	; 48
    2902:	11 f4       	brne	.+4      	; 0x2908 <__ftoa_engine+0x130>
    2904:	8a 95       	dec	r24
    2906:	e6 cf       	rjmp	.-52     	; 0x28d4 <__ftoa_engine+0xfc>
    2908:	e8 94       	clt
    290a:	01 50       	subi	r16, 0x01	; 1
    290c:	30 f0       	brcs	.+12     	; 0x291a <__ftoa_engine+0x142>
    290e:	08 0f       	add	r16, r24
    2910:	0a f4       	brpl	.+2      	; 0x2914 <__ftoa_engine+0x13c>
    2912:	00 27       	eor	r16, r16
    2914:	02 17       	cp	r16, r18
    2916:	08 f4       	brcc	.+2      	; 0x291a <__ftoa_engine+0x142>
    2918:	20 2f       	mov	r18, r16
    291a:	23 95       	inc	r18
    291c:	02 2f       	mov	r16, r18
    291e:	7a 33       	cpi	r23, 0x3A	; 58
    2920:	28 f0       	brcs	.+10     	; 0x292c <__ftoa_engine+0x154>
    2922:	79 e3       	ldi	r23, 0x39	; 57
    2924:	7d 93       	st	X+, r23
    2926:	2a 95       	dec	r18
    2928:	e9 f7       	brne	.-6      	; 0x2924 <__ftoa_engine+0x14c>
    292a:	10 c0       	rjmp	.+32     	; 0x294c <__ftoa_engine+0x174>
    292c:	7d 93       	st	X+, r23
    292e:	2a 95       	dec	r18
    2930:	89 f6       	brne	.-94     	; 0x28d4 <__ftoa_engine+0xfc>
    2932:	06 94       	lsr	r0
    2934:	97 95       	ror	r25
    2936:	67 95       	ror	r22
    2938:	37 95       	ror	r19
    293a:	17 95       	ror	r17
    293c:	17 94       	ror	r1
    293e:	e1 18       	sub	r14, r1
    2940:	f1 0a       	sbc	r15, r17
    2942:	43 0b       	sbc	r20, r19
    2944:	56 0b       	sbc	r21, r22
    2946:	c9 0b       	sbc	r28, r25
    2948:	d0 09       	sbc	r29, r0
    294a:	98 f0       	brcs	.+38     	; 0x2972 <__ftoa_engine+0x19a>
    294c:	23 95       	inc	r18
    294e:	7e 91       	ld	r23, -X
    2950:	73 95       	inc	r23
    2952:	7a 33       	cpi	r23, 0x3A	; 58
    2954:	08 f0       	brcs	.+2      	; 0x2958 <__ftoa_engine+0x180>
    2956:	70 e3       	ldi	r23, 0x30	; 48
    2958:	7c 93       	st	X, r23
    295a:	20 13       	cpse	r18, r16
    295c:	b8 f7       	brcc	.-18     	; 0x294c <__ftoa_engine+0x174>
    295e:	7e 91       	ld	r23, -X
    2960:	70 61       	ori	r23, 0x10	; 16
    2962:	7d 93       	st	X+, r23
    2964:	30 f0       	brcs	.+12     	; 0x2972 <__ftoa_engine+0x19a>
    2966:	83 95       	inc	r24
    2968:	71 e3       	ldi	r23, 0x31	; 49
    296a:	7d 93       	st	X+, r23
    296c:	70 e3       	ldi	r23, 0x30	; 48
    296e:	2a 95       	dec	r18
    2970:	e1 f7       	brne	.-8      	; 0x296a <__ftoa_engine+0x192>
    2972:	11 24       	eor	r1, r1
    2974:	ef 90       	pop	r14
    2976:	ff 90       	pop	r15
    2978:	0f 91       	pop	r16
    297a:	1f 91       	pop	r17
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	99 27       	eor	r25, r25
    2982:	87 fd       	sbrc	r24, 7
    2984:	90 95       	com	r25
    2986:	08 95       	ret

00002988 <strrev>:
    2988:	dc 01       	movw	r26, r24
    298a:	fc 01       	movw	r30, r24
    298c:	67 2f       	mov	r22, r23
    298e:	71 91       	ld	r23, Z+
    2990:	77 23       	and	r23, r23
    2992:	e1 f7       	brne	.-8      	; 0x298c <strrev+0x4>
    2994:	32 97       	sbiw	r30, 0x02	; 2
    2996:	04 c0       	rjmp	.+8      	; 0x29a0 <strrev+0x18>
    2998:	7c 91       	ld	r23, X
    299a:	6d 93       	st	X+, r22
    299c:	70 83       	st	Z, r23
    299e:	62 91       	ld	r22, -Z
    29a0:	ae 17       	cp	r26, r30
    29a2:	bf 07       	cpc	r27, r31
    29a4:	c8 f3       	brcs	.-14     	; 0x2998 <strrev+0x10>
    29a6:	08 95       	ret

000029a8 <__udivmodsi4>:
    29a8:	a1 e2       	ldi	r26, 0x21	; 33
    29aa:	1a 2e       	mov	r1, r26
    29ac:	aa 1b       	sub	r26, r26
    29ae:	bb 1b       	sub	r27, r27
    29b0:	fd 01       	movw	r30, r26
    29b2:	0d c0       	rjmp	.+26     	; 0x29ce <__udivmodsi4_ep>

000029b4 <__udivmodsi4_loop>:
    29b4:	aa 1f       	adc	r26, r26
    29b6:	bb 1f       	adc	r27, r27
    29b8:	ee 1f       	adc	r30, r30
    29ba:	ff 1f       	adc	r31, r31
    29bc:	a2 17       	cp	r26, r18
    29be:	b3 07       	cpc	r27, r19
    29c0:	e4 07       	cpc	r30, r20
    29c2:	f5 07       	cpc	r31, r21
    29c4:	20 f0       	brcs	.+8      	; 0x29ce <__udivmodsi4_ep>
    29c6:	a2 1b       	sub	r26, r18
    29c8:	b3 0b       	sbc	r27, r19
    29ca:	e4 0b       	sbc	r30, r20
    29cc:	f5 0b       	sbc	r31, r21

000029ce <__udivmodsi4_ep>:
    29ce:	66 1f       	adc	r22, r22
    29d0:	77 1f       	adc	r23, r23
    29d2:	88 1f       	adc	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	1a 94       	dec	r1
    29d8:	69 f7       	brne	.-38     	; 0x29b4 <__udivmodsi4_loop>
    29da:	60 95       	com	r22
    29dc:	70 95       	com	r23
    29de:	80 95       	com	r24
    29e0:	90 95       	com	r25
    29e2:	9b 01       	movw	r18, r22
    29e4:	ac 01       	movw	r20, r24
    29e6:	bd 01       	movw	r22, r26
    29e8:	cf 01       	movw	r24, r30
    29ea:	08 95       	ret

000029ec <__prologue_saves__>:
    29ec:	2f 92       	push	r2
    29ee:	3f 92       	push	r3
    29f0:	4f 92       	push	r4
    29f2:	5f 92       	push	r5
    29f4:	6f 92       	push	r6
    29f6:	7f 92       	push	r7
    29f8:	8f 92       	push	r8
    29fa:	9f 92       	push	r9
    29fc:	af 92       	push	r10
    29fe:	bf 92       	push	r11
    2a00:	cf 92       	push	r12
    2a02:	df 92       	push	r13
    2a04:	ef 92       	push	r14
    2a06:	ff 92       	push	r15
    2a08:	0f 93       	push	r16
    2a0a:	1f 93       	push	r17
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	ca 1b       	sub	r28, r26
    2a16:	db 0b       	sbc	r29, r27
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	09 94       	ijmp

00002a24 <__epilogue_restores__>:
    2a24:	2a 88       	ldd	r2, Y+18	; 0x12
    2a26:	39 88       	ldd	r3, Y+17	; 0x11
    2a28:	48 88       	ldd	r4, Y+16	; 0x10
    2a2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a30:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a32:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a34:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a36:	b9 84       	ldd	r11, Y+9	; 0x09
    2a38:	c8 84       	ldd	r12, Y+8	; 0x08
    2a3a:	df 80       	ldd	r13, Y+7	; 0x07
    2a3c:	ee 80       	ldd	r14, Y+6	; 0x06
    2a3e:	fd 80       	ldd	r15, Y+5	; 0x05
    2a40:	0c 81       	ldd	r16, Y+4	; 0x04
    2a42:	1b 81       	ldd	r17, Y+3	; 0x03
    2a44:	aa 81       	ldd	r26, Y+2	; 0x02
    2a46:	b9 81       	ldd	r27, Y+1	; 0x01
    2a48:	ce 0f       	add	r28, r30
    2a4a:	d1 1d       	adc	r29, r1
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	ed 01       	movw	r28, r26
    2a58:	08 95       	ret

00002a5a <_exit>:
    2a5a:	f8 94       	cli

00002a5c <__stop_program>:
    2a5c:	ff cf       	rjmp	.-2      	; 0x2a5c <__stop_program>
